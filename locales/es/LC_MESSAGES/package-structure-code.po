# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2024, pyOpenSci
# This file is distributed under the same license as the pyOpenSci Python
# Package Guide package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2024.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: pyOpenSci Python Package Guide \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-06-28 08:42-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: es\n"
"Language-Team: es <LL@li.org>\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.15.0\n"

#: ../../package-structure-code/code-style-linting-format.md:1
msgid "Python Package Code Style, Format and Linters"
msgstr ""

#: ../../package-structure-code/code-style-linting-format.md:3
#: ../../package-structure-code/publish-python-package-pypi-conda.md:12
msgid "Take Aways"
msgstr ""

#: ../../package-structure-code/code-style-linting-format.md:5
msgid "pyOpenSci requires authors to follow PEP 8 code format guidelines"
msgstr ""

#: ../../package-structure-code/code-style-linting-format.md:6
msgid ""
"Setting up a code formatters like Black and isort will help you enforce "
"PEP 8 style guidelines and also consistent, readable code format"
msgstr ""

#: ../../package-structure-code/code-style-linting-format.md:7
msgid "Some commonly used tools are: Black, Isort, flake8, Ruff"
msgstr ""

#: ../../package-structure-code/code-style-linting-format.md:8
msgid ""
"You can also setup pre-commit hooks which will run code formatters "
"locally each time you make a commit."
msgstr ""

#: ../../package-structure-code/code-style-linting-format.md:10
msgid ""
"[precommit.ci](https://pre-commit.ci/) is a bot that you can add to your "
"GitHub repository. It will automagically apply code format to every PR "
"using the tools specified in your pre-commit-config.yaml file. It can "
"save significant time and make contributions easier for new contributors."
msgstr ""

#: ../../package-structure-code/code-style-linting-format.md:11
msgid ""
"Automation is good! By making code quality tools care of your code, you "
"can focus on structural and high values tasks."
msgstr ""

#: ../../package-structure-code/code-style-linting-format.md:14
msgid ""
"Consistent code format and style is useful to both your package and "
"across the scientific Python ecosystem because using similar formats "
"makes code easier to read."
msgstr ""

#: ../../package-structure-code/code-style-linting-format.md:18
msgid ""
"For instance, if you saw a sentence like this one without any spaces, or "
"punctuation, it would take your brain longer to process it."
msgstr ""

#: ../../package-structure-code/code-style-linting-format.md:25
msgid ""
"pyOpenSci peer review process requires that you to follow standard "
"[Python PEP 8 format rules](https://peps.python.org/pep-0008/) as closely"
" as you can."
msgstr ""

#: ../../package-structure-code/code-style-linting-format.md:29
msgid ""
"pyOpenSci doesn't require you to use a specific code format tool. "
"However, we do look for consistency and readability in code style. Below "
"you will find a discussion of:"
msgstr ""

#: ../../package-structure-code/code-style-linting-format.md:33
msgid "The benefits of using linters and code format tools in your workflow"
msgstr ""

#: ../../package-structure-code/code-style-linting-format.md:34
msgid "Some commonly used tools in the scientific Python space"
msgstr ""

#: ../../package-structure-code/code-style-linting-format.md:35
msgid ""
"Setting up pre-commit hooks and the pre-commit.ci bot to make using code "
"format tools in daily workflows and in pull requests on GitHub easier."
msgstr ""

#: ../../package-structure-code/code-style-linting-format.md:38
msgid "Use a code format tool (or tools) to make your life easier"
msgstr ""

#: ../../package-structure-code/code-style-linting-format.md:40
msgid ""
"We suggest that you use a code format tool, or a set of format tools, "
"because manually applying all of the PEP 8 format specifications is both "
"time consuming for maintainers and can be a road block for potential new "
"contributors. Code formatters will automagically reformat your code for "
"you, adhering to PEP 8 standards and applying consistent style decisions "
"throughout."
msgstr ""

#: ../../package-structure-code/code-style-linting-format.md:46
msgid "Setting up a code format suite of tools will:"
msgstr ""

#: ../../package-structure-code/code-style-linting-format.md:48
msgid "Save you and your maintainer team time in fixing PEP 8 inconsistencies."
msgstr ""

#: ../../package-structure-code/code-style-linting-format.md:49
msgid "Ensure that format and style is consistent across your entire code-base."
msgstr ""

#: ../../package-structure-code/code-style-linting-format.md:50
msgid ""
"Avoid lengthy discussions with contributors and other maintainers about "
"personalized code format preferences during reviews."
msgstr ""

#: ../../package-structure-code/code-style-linting-format.md:52
msgid ""
"Avoid pure visual edits in the code base so that code reviews focus on "
"added value"
msgstr ""

#: ../../package-structure-code/code-style-linting-format.md:54
msgid ""
"Many packages use a suite of tools to apply code format rules, taking the"
" work out of manually implementing code format requirements."
msgstr ""

#: ../../package-structure-code/code-style-linting-format.md:57
msgid ""
"Consistent code format across packages within the (scientific) Python "
"ecosystem, will also broadly make code easier to scan, understand and "
"contribute to."
msgstr ""

#: ../../package-structure-code/code-style-linting-format.md:60
msgid "Linting vs format and style"
msgstr ""

#: ../../package-structure-code/code-style-linting-format.md:62
msgid "Before we dive in let's get a few definitions out of the way."
msgstr ""

#: ../../package-structure-code/code-style-linting-format.md:64
msgid "Code Linting"
msgstr ""

#: ../../package-structure-code/code-style-linting-format.md:66
msgid ""
"A code linter is a tool that will review your code and identify errors or"
" issues. A linter typically does not modify your code. It will tell you "
"what the error is and on what line it was discovered. Flake8, discussed "
"below, is an example of a commonly-used code linter."
msgstr ""

#: ../../package-structure-code/code-style-linting-format.md:71
msgid "Code Formatters (and stylers)"
msgstr ""

#: ../../package-structure-code/code-style-linting-format.md:73
msgid ""
"Code formatters will reformat your code for you. Python focused code "
"formatters often follow PEP 8 standards. However, they also make "
"stylistic decisions about code consistency."
msgstr ""

#: ../../package-structure-code/code-style-linting-format.md:77
msgid ""
"Black is an example of a commonly-used code formatter. Black both applies"
" PEP 8 standards while also making decisions about things like consistent"
" use of double quotes for strings, and spacing of items in lists."
msgstr ""

#: ../../package-structure-code/code-style-linting-format.md:81
msgid "You will learn more about Black below."
msgstr ""

#: ../../package-structure-code/code-style-linting-format.md:83
msgid "Code linting, formatting and styling tools"
msgstr ""

#: ../../package-structure-code/code-style-linting-format.md:85
msgid "Black"
msgstr ""

#: ../../package-structure-code/code-style-linting-format.md:87
msgid ""
"[Black](https://black.readthedocs.io/en/stable/) is a code formatter. "
"Black will automagically (and _unapologetically_) fix spacing issues and "
"ensure code format is consistent throughout your package. Black also "
"generally adheres to PEP 8 style guidelines with some exceptions. A few "
"examples of those exceptions are below:"
msgstr ""

#: ../../package-structure-code/code-style-linting-format.md:93
msgid ""
"Black defaults to a line length of 88 (79 + 10%) rather than the 79 "
"character `PEP 8` specification. However, line length is a setting can be"
" manually overwritten in your Black configuration."
msgstr ""

#: ../../package-structure-code/code-style-linting-format.md:94
msgid "Black will not adjust line length in your comments or docstrings."
msgstr ""

#: ../../package-structure-code/code-style-linting-format.md:95
msgid ""
"This tool will not review and fix import order (you need `isort` or "
"`ruff` to do that - see below)."
msgstr ""

#: ../../package-structure-code/code-style-linting-format.md:98
msgid ""
"If you are interested in seeing how Black will format your code, you can "
"use the [Black playground](https://black.vercel.app/)"
msgstr ""

#: ../../package-structure-code/code-style-linting-format.md:102
msgid ""
"Using a code formatter like Black will leave you more time to work on "
"code function rather than worry about format."
msgstr ""

#: ../../package-structure-code/code-style-linting-format.md:105
msgid "Flake8"
msgstr ""

#: ../../package-structure-code/code-style-linting-format.md:107
msgid ""
"To adhere to Python `pep8` format standards, you might want to add "
"[flake8](https://flake8.pycqa.org/en/latest/) to your code format "
"toolbox."
msgstr ""

#: ../../package-structure-code/code-style-linting-format.md:111
msgid "flake8 will:"
msgstr ""

#: ../../package-structure-code/code-style-linting-format.md:113
msgid ""
"Flag every line in your code that extends beyond 79 characters (including"
" those in docstrings and comments)"
msgstr ""

#: ../../package-structure-code/code-style-linting-format.md:114
msgid ""
"Flag spacing issues that conflict with PEP 8 guidelines such as missing "
"spaces after commas"
msgstr ""

#: ../../package-structure-code/code-style-linting-format.md:116
msgid ""
"Flake8 also flags unused imports and unused declared variables in your "
"modules."
msgstr ""

#: ../../package-structure-code/code-style-linting-format.md:119
msgid ""
"Below you can see the output of running `flake8 filename.py` at the "
"command line for a Python file within a package called `stravalib`."
msgstr ""

#: ../../package-structure-code/code-style-linting-format.md:123
msgid "The line length standard for PEP 8 is 79 characters."
msgstr ""

#: ../../package-structure-code/code-style-linting-format.md:125
msgid ""
"Notice that flake8 returns a list of issues that it found in the model.py"
" module on the command line. The Python file itself is not modified. "
"Using this output, you can fix each issue line by line manually."
msgstr ""

#: ../../package-structure-code/code-style-linting-format.md:140
msgid "Isort"
msgstr ""

#: ../../package-structure-code/code-style-linting-format.md:142
msgid ""
"Python imports refer to the Python packages that a module in your package"
" requires. Imports should always be located at the top of each Python "
"module in your package."
msgstr ""

#: ../../package-structure-code/code-style-linting-format.md:146
msgid ""
"[PEP 8 has specific standards for the order of these "
"imports](https://peps.python.org/pep-0008/#imports). These standards are "
"listed below:"
msgstr ""

#: ../../package-structure-code/code-style-linting-format.md:148
msgid "Imports should be grouped in the following order:"
msgstr ""

#: ../../package-structure-code/code-style-linting-format.md:150
msgid "Standard library imports."
msgstr ""

#: ../../package-structure-code/code-style-linting-format.md:151
msgid "Related third party imports."
msgstr ""

#: ../../package-structure-code/code-style-linting-format.md:152
msgid "Local application/library specific imports."
msgstr ""

#: ../../package-structure-code/code-style-linting-format.md:154
msgid ""
"While `flake8` will identify unused imports in your code, it won't fix or"
" identify issues with the order of package imports."
msgstr ""

#: ../../package-structure-code/code-style-linting-format.md:157
msgid ""
"`isort` will identify where imports in your code are out of order. It "
"will then modify your code, automatically reordering all imports. This "
"leaves you with one less thing to think about when cleaning up your code."
msgstr ""

#: ../../package-structure-code/code-style-linting-format.md:162
msgid "Example application of isort"
msgstr ""

#: ../../package-structure-code/code-style-linting-format.md:164
msgid "Code imports before `isort` is run:"
msgstr ""

#: ../../package-structure-code/code-style-linting-format.md:166
msgid ""
"Below, the `pandas` is a third party package, `typing` is a core `Python`"
" package distributed with `Python`, and `examplePy.temperature` is a "
"first-party module which means it belongs to the same package as the file"
" doing the import. Also notice that there are no spaces in the imports "
"listed below."
msgstr ""

#: ../../package-structure-code/code-style-linting-format.md:176
msgid "From the project root, run:"
msgstr ""

#: ../../package-structure-code/code-style-linting-format.md:181
msgid "Python file `temporal.py` imports after `isort` has been run"
msgstr ""

#: ../../package-structure-code/code-style-linting-format.md:188
msgid "Ruff"
msgstr ""

#: ../../package-structure-code/code-style-linting-format.md:190
msgid ""
"[Ruff](https://docs.astral.sh/ruff/) is a new addition to the code "
"quality ecosystem, gaining some traction since its release. `ruff` is "
"both a linter and a code formatter for Python, aiming to replace several "
"tools behind a single interface. As such, `ruff` can be used at a "
"replacement of all other tools mentioned here, or in complement to some "
"of them."
msgstr ""

#: ../../package-structure-code/code-style-linting-format.md:196
msgid ""
"`ruff` has some interesting features that distinguish it from other "
"linters:"
msgstr ""

#: ../../package-structure-code/code-style-linting-format.md:198
msgid "Linter configuration in `pyproject.toml`"
msgstr ""

#: ../../package-structure-code/code-style-linting-format.md:199
msgid "Several hundred rules included, many of which are automatically fixable"
msgstr ""

#: ../../package-structure-code/code-style-linting-format.md:200
msgid ""
"Rules explanation, see [F403](https://docs.astral.sh/ruff/rules"
"/undefined-local-with-import-star/) for an example"
msgstr ""

#: ../../package-structure-code/code-style-linting-format.md:201
msgid ""
"Fast execution time, makes a quick feedback loop possible even on large "
"projects."
msgstr ""

#: ../../package-structure-code/code-style-linting-format.md:203
msgid ""
"Here is a simple configuration to get started with `ruff`. It would go "
"into your `pyproject.toml`:"
msgstr ""

#: ../../package-structure-code/code-style-linting-format.md:211
msgid ""
"Depending on your project, you might want to add the following to sort "
"imports correctly:"
msgstr ""

#: ../../package-structure-code/code-style-linting-format.md:218
msgid "How to use code formatter in your local workflow"
msgstr ""

#: ../../package-structure-code/code-style-linting-format.md:220
msgid "Linters, code formatters and your favorite coding tools"
msgstr ""

#: ../../package-structure-code/code-style-linting-format.md:222
msgid ""
"Linters can be run as a command-line tool as shown above. They also can "
"be run within your favorite coding tool (e.g. VScode, pycharm, etc). For "
"example, you might prefer to have tools like Black and isort run when you"
" save a file. In some editors you can also setup shortcuts that run your "
"favorite code format tools on demand."
msgstr ""

#: ../../package-structure-code/code-style-linting-format.md:228
msgid "Use pre-commit hooks to run code formatters and linters on commits"
msgstr ""

#: ../../package-structure-code/code-style-linting-format.md:230
msgid "You can also setup a `pre-commit hook` in your Python package repository."
msgstr ""

#: ../../package-structure-code/code-style-linting-format.md:232
msgid ""
"A pre-commit hook is a tool that allows an action (or actions) to be "
"triggered when you apply a commit to your git repository."
msgstr ""

#: ../../package-structure-code/code-style-linting-format.md:235
msgid "Pre-commit hook example workflow"
msgstr ""

#: ../../package-structure-code/code-style-linting-format.md:237
msgid "The precommit workflow looks like this: You type and run:"
msgstr ""

#: ../../package-structure-code/code-style-linting-format.md:240
msgid "`git commit -m \"message here\"` at the command line"
msgstr ""

#: ../../package-structure-code/code-style-linting-format.md:242
msgid ""
"Once you hit return, pre-commit will run any tools that you have "
"configured in a **.pre-commit-config.yaml** file."
msgstr ""

#: ../../package-structure-code/code-style-linting-format.md:244
msgid ""
"If the tools configured in the pre-commit hook run successfully without "
"making changes or finding errors in your code, the commit will be applied"
" to the repository."
msgstr ""

#: ../../package-structure-code/code-style-linting-format.md:248
msgid ""
"If the tools configured in the hook find errors in your files, the commit"
" will NOT be applied to the repository. Remember from the discussion "
"above that a code formatter like Black will run and reformat your code. A"
" linter like _flake8_ will provide you with some output that details "
"where there are syntax issues in your code. You will then need to fix "
"those issues, manually."
msgstr ""

#: ../../package-structure-code/code-style-linting-format.md:255
msgid ""
"Once all of the fixes are applied you can re-add (stage) the files to be "
"commit. And re-run your commit."
msgstr ""

#: ../../package-structure-code/code-style-linting-format.md:259
msgid "Diagram showing the steps of a pre-commit workflow from left to right."
msgstr ""

#: ../../package-structure-code/code-style-linting-format.md:261
msgid ""
"The pre-commit workflow begins with you adding files that have changes to"
" be staged in git. Next, you'd run git commit. when you run git commit, "
"the pre-commit hooks will then run. In this example, Black, the code "
"formatter and flake8, a linter both run. If all of the files pass Black "
"and flake8 checks, then your commit will be recorded. If they don't, the "
"commit is canceled. You will have to fix any flake8 issues, and then re-"
"add / stage the files to be committed. [_Image "
"Source_](https://ljvmiranda921.github.io/notebook/2018/06/21/precommits-"
"using-black-and-flake8/*)"
msgstr ""

#: ../../package-structure-code/code-style-linting-format.md:274
msgid ""
"If have a Python code-base and multiple maintainers actively working on "
"the code, and you intend to run a tool like Black, be sure to coordinate "
"across your team. An initial commit that applies Black to your entire "
"package will likely change a significant amount of your code. This could "
"lead to merge conflicts on open and new PR's before the new changes are "
"merged."
msgstr ""

#: ../../package-structure-code/code-style-linting-format.md:281
msgid "General pre commit checks"
msgstr ""

#: ../../package-structure-code/code-style-linting-format.md:283
msgid ""
"In addition to calling tools, Pre-commit also has a suite of [built in "
"format hooks](https://github.com/pre-commit/pre-commit-hooks#hooks-"
"available) that you can call. Some, such as trailing-whitespace can be "
"also useful to add to your pre-commit workflow to ensure clean, "
"streamlined code files."
msgstr ""

#: ../../package-structure-code/code-style-linting-format.md:288
msgid ""
"An example pre-commit-config.yaml file is below with examples of how this"
" is all setup."
msgstr ""

#: ../../package-structure-code/code-style-linting-format.md:291
msgid "Pre-commit.ci"
msgstr ""

#: ../../package-structure-code/code-style-linting-format.md:293
msgid ""
"[Pre-commit.ci](https://pre-commit.ci) is a bot that may become your new "
"best friend. This bot, when setup on a repo can be configured to do the "
"following:"
msgstr ""

#: ../../package-structure-code/code-style-linting-format.md:296
msgid "It will check every pull request using all of the pre-commit hook setting"
msgstr ""

#: ../../package-structure-code/code-style-linting-format.md:297
msgid ""
"If you wish, it will also submit a pull request to your repo with pre-"
"commit fixes, saving you, and new contributors the time of reformatting a"
" pr that has format issues."
msgstr ""

#: ../../package-structure-code/code-style-linting-format.md:300
msgid "You can also call the bot on any pull request to run / and fix the code."
msgstr ""

#: ../../package-structure-code/code-style-linting-format.md:302
msgid ""
"The pre-commit.ci bot uses the same pre-commit-config.yaml file that you "
"use to setup pre-commit locally."
msgstr ""

#: ../../package-structure-code/code-style-linting-format.md:305
msgid "Setting up a bot like this can be valuable because:"
msgstr ""

#: ../../package-structure-code/code-style-linting-format.md:307
msgid ""
"It can make is easier for maintainers as they no longer have to worry at "
"allows about fixing code format. The bot will do the work for them."
msgstr ""

#: ../../package-structure-code/code-style-linting-format.md:309
msgid ""
"It can make it easier for new comers as they never have to setup pre-"
"commit locally or worry about linting their code. They can even make "
"small fixes to the code directly on GitHub without worry."
msgstr ""

#: ../../package-structure-code/code-style-linting-format.md:311
msgid "Setting up a git pre-commit hook"
msgstr ""

#: ../../package-structure-code/code-style-linting-format.md:313
msgid "To setup pre-commit locally, you need to do 3 things:"
msgstr ""

#: ../../package-structure-code/code-style-linting-format.md:315
msgid ""
"Install pre-commit (and include it as a development requirement in your "
"repository)"
msgstr ""

#: ../../package-structure-code/code-style-linting-format.md:325
msgid ""
"Create a .pre-commit-config.yaml file in the root of your package "
"directory."
msgstr ""

#: ../../package-structure-code/code-style-linting-format.md:327
msgid ""
"Below is an example **.pre-commit-cofig.yaml** file that can be used to "
"setup the pre-commit hook and the pre-commit.ci bot if you chose to "
"implement that too."
msgstr ""

#: ../../package-structure-code/code-style-linting-format.md:335
msgid ""
"This file specifies a hook that will be triggered automatically before "
"each `git commit`, in this case, it specifies a `flake8` using version "
"`6.0.0`."
msgstr ""

#: ../../package-structure-code/code-style-linting-format.md:338
msgid ""
"Install your pre-commit hook(s) using `pre-commit install`. This will "
"install all of the hooks specified in the pre-commit yaml file into your "
"environment."
msgstr ""

#: ../../package-structure-code/code-style-linting-format.md:340
msgid ""
"Once you have done the above, you are ready to start working on your "
"code. Pre-commit will run every time you run `git commit`."
msgstr ""

#: ../../package-structure-code/code-style-linting-format.md:343
msgid "Summary"
msgstr ""

#: ../../package-structure-code/code-style-linting-format.md:345
msgid ""
"pyOpenSci suggests setting up a linter and a code styler for your "
"package, regardless of whether you use pre-commit hooks, CI or other "
"infrastructure to manage code format. Setting up these tools will give "
"you automatic feedback about your code's structure as you (or a "
"contributor) write it. And using a tool like black that format code for "
"you, reduce effort that you need to make surrounding decisions around "
"code format and style."
msgstr ""

#: ../../package-structure-code/complex-python-package-builds.md:1
msgid "Complex Python package builds"
msgstr "Compilaciones complejas de paquetes de Python"

#: ../../package-structure-code/complex-python-package-builds.md:3
msgid ""
"This guide is focused on packages that are either pure-python or that "
"have a few simple extensions in another language such as C or C++."
msgstr ""
"Esta guía se centra en paquetes que solamente utilizan Python o que tienen unas "
"pocas extensiones simples en otro lenguaje como C o C++."

#: ../../package-structure-code/complex-python-package-builds.md:6
msgid ""
"In the future, we want to provide resources for packaging workflows that "
"require more complex builds. If you have questions about these types of "
"package, please [add a question to our "
"discourse](https://pyopensci.discourse.group/) or open an [issue about "
"this guide specifically in the GitHub repo for this "
"guide](https://github.com/pyOpenSci/python-package-guide/issues). There "
"are many nuances to building and distributing Python packages that have "
"compiled extensions requiring non-Python dependencies at build time. For "
"an overview and thorough discussion of these nuances, please see [this "
"site.](https://pypackaging-native.github.io/)"
msgstr ""
"En el futuro, queremos proporcionar recursos para flujos de trabajo de "
"empaquetado que requieran compilaciones más complejas. Si tiene preguntas "
"sobre estos tipos de paquetes, por favor [agregue una pregunta a nuestro "
"foro](https://pyopensci.discourse.group/) o abra una [issue sobre esta guía "
"específicamente en el repositorio](https://github.com/pyOpenSci/python-package-guide/issues). "
"Hay muchos matices para construir y distribuir paquetes de Python que tienen "
"extensiones compiladas que requieren dependencias en otros lenguajes en el momento de "
"construcción del paquete. Para obtener una descripción general y una discusión exhaustiva "
"de estos matices, consulte [este sitio.](https://pypackaging-native.github.io/)"



#: ../../package-structure-code/complex-python-package-builds.md:8
msgid "Pure Python Packages vs. packages with extensions in other languages"
msgstr "Paquetes de Python puros vs. paquetes con extensiones en otros lenguajes"

#: ../../package-structure-code/complex-python-package-builds.md:10
msgid ""
"You can classify Python package complexity into three general categories."
" These categories can in turn help you select the correct package "
"frontend and backend tools."
msgstr ""
"Se puede clasificar la complejidad de los paquetes de Python en tres categorías. "
"Estas categorías, a su vez, pueden ayudarlo a seleccionar las mejores herramientas de "
"frontend y backend."

#: ../../package-structure-code/complex-python-package-builds.md:14
msgid ""
"**Pure-python packages:** these are packages that only rely on Python to "
"function. Building a pure Python package is simpler. As such, you can "
"chose a tool below that has the features that you want and be done with "
"your decision!"
msgstr ""
"**Paquetes de Python puros:** son paquetes que solo dependen de Python para "
"funcionar. Construir un paquete de Python puro es más simple. Como tal, puede "
"elegir una herramienta a continuación que tenga las características que desea "
"sin tener que considerar muchos detalles."

#: ../../package-structure-code/complex-python-package-builds.md:16
msgid ""
"**Python packages with non-Python extensions:** These packages have "
"additional components called extensions written in other languages (such "
"as C or C++). If you have a package with non-Python extensions, then you "
"need to select a build backend tool that allows additional build steps "
"needed to compile your extension code. Further, if you wish to use a "
"frontend tool to support your workflow, you will need to select a tool "
"that supports additional build setups. We suggest that you chose build "
"tool that supports custom build steps like Hatch."
msgstr ""
"**Paquetes de Python con extensiones en otros lenguajes:** Estos paquetes tienen "
"componentes adicionales llamados extensiones escritas en otros lenguajes (como C o C++). "
"Si tiene un paquete con extensiones no escritas en otros lenguajes, debe seleccionar "
"una herramienta de backend de compilación que permita pasos de compilación adicionales "
"necesarios para compilar su código en estos lenguajes. Además, si desea utilizar una herramienta "
"de frontend para ayudar a su flujo de trabajo, deberá seleccionar una herramienta que admita "
"configuraciones de compilación adicionales. Sugerimos que elija una herramienta de compilación "
"que admita pasos de compilación personalizados como por ejemplo Hatch."

#: ../../package-structure-code/complex-python-package-builds.md:18
msgid ""
"**Python packages that have extensions written in different languages "
"(e.g. Fortran and C++) or that have non Python dependencies that are "
"difficult to install (e.g. GDAL):** These packages often have complex "
"build steps (more complex than a package with just a few C extensions for"
" instance). As such, these packages require tools such as [scikit-"
"build](https://scikit-build.readthedocs.io/en/latest/) or [meson-"
"python](https://mesonbuild.com/Python-module.html) to build. NOTE: you "
"can use meson-python with PDM."
msgstr ""
"**Paquetes de Python que tienen extensiones escritas en diferentes lenguajes "
"(por ejemplo, Fortran y C++) o que tienen dependencias no escritas en Python "
"que son difíciles de instalar (por ejemplo, GDAL):** Estos paquetes a menudo "
"tienen pasos de compilación complejos (más complejos que un paquete con solo "
"algunas extensiones en C, por ejemplo). Como tal, estos paquetes requieren "
"herramientas como [scikit-build](https://scikit-build.readthedocs.io/en/latest/) "
"o [meson-python](https://mesonbuild.com/Python-module.html) para construir. NOTA: "
"puede usar meson-python con PDM."

#: ../../package-structure-code/complex-python-package-builds.md:21
msgid "Mixing frontend and backend projects"
msgstr "Mezclar proyectos de frontend y backend"

#: ../../package-structure-code/complex-python-package-builds.md:23
msgid ""
"It is sometimes necessary or desirable to use a build frontend with an "
"alternative build-backend. This is because some frontends do not have a "
"default backend (`build`), and this choice is placed on the maintainer. "
"Other backends (`hatch`) have a preferred backend (`hatchling`) but allow"
" the maintainer to migrate to another, while some backends (`poetry`) "
"only work with a single backend (`poetry-core`). Refer to (#python-"
"package-build-tools) for more information about frontend and backend "
"compatibility."
msgstr ""
"A veces es necesario o deseable usar un frontend de compilación con un backend "
"de compilación alternativo. Esto se debe a que algunos frontends no tienen un "
"backend predeterminado (`build`), y esta elección recae en el mantenedor. Otros "
"backends (`hatch`) tienen un backend preferido (`hatchling`) pero permiten al "
"mantenedor migrar a otro, mientras que algunos backends (`poetry`) solo funcionan "
"con un solo backend (`poetry-core`). Consulte (#python-package-build-tools) para "
"obtener más información sobre la compatibilidad de frontend y backend."

#: ../../package-structure-code/complex-python-package-builds.md:29
msgid ""
"In this packaging guide we recommend using `hatch` along with its "
"preferred backend `hatchling`. While this will be suitable for most "
"packages, an alternate backend may be used with Hatch if needed when "
"creating an extension module. A Python extension module is one that is "
"made up, either in part or entirely, of compiled code. In this case the "
"backend chosen (such as `meson-python`) must know how to compile the "
"extension language and bind it to Python. `hatchling` does not know how "
"to do this all on its own and must either make use of "
"[plugins](https://hatch.pypa.io/1.9/plugins/about/) or be replaced by a "
"backend that is already capable of building extension modules."
msgstr ""
"En esta guía de empaquetado, recomendamos usar `hatch` junto con su backend "
"preferido `hatchling`. Si bien esto será adecuado para la mayoría de los paquetes, "
"se puede usar un backend alternativo con Hatch si es necesario al crear un módulo de "
"extensión. Un módulo de extensión de Python es uno que está compuesto, ya sea en parte "
"o en su totalidad, de código compilado en otro lenguaje. En este caso, el backend elegido (como `meson-python`) "
"debe saber cómo compilar el lenguaje de extensión y vincularlo a Python. `hatchling` no sabe "
"cómo hacer esto por sí solo y debe hacer uso de [plugins](https://hatch.pypa.io/1.9/plugins/about/) "
"o cambiar un backend que sea capaz de construir módulos de extensión."

#: ../../package-structure-code/complex-python-package-builds.md:37
msgid ""
"In order to use a different backend you will need to edit your project's "
"`pyproject.toml`. If you have a `pyproject.toml` generated by the `hatch`"
" command, or from following the packaging tutorial, you may have to make "
"a change like this"
msgstr ""
"Para usar un backend diferente, deberá editar el `pyproject.toml` de su proyecto. "
"Si tiene un `pyproject.toml` generado por el comando `hatch`, o siguiendo el tutorial "
"de empaquetado, probablemente tendrá hacer un cambio como este"

#: ../../package-structure-code/declare-dependencies.md:8
#: ../../package-structure-code/declare-dependencies.md:375
#: ../../package-structure-code/pyproject-toml-python-package-metadata.md:25
msgid "Todo"
msgstr ""

#: ../../package-structure-code/declare-dependencies.md:10
msgid ""
"keep this comment - https://github.com/pyOpenSci/python-package-"
"guide/pull/106#issuecomment-1844278487 in this file for now - jeremiah "
"did a nice inventory of common shells and whether they need quotes or "
"not. it's really comprehensive. but do we want it in the guide?? it's "
"really useful for more advanced users i think."
msgstr ""

#: ../../package-structure-code/declare-dependencies.md:12
msgid ""
"Following this comment: https://github.com/pyOpenSci/python-package-"
"guide/pull/106#pullrequestreview-1766663571"
msgstr ""

#: ../../package-structure-code/declare-dependencies.md:15
msgid "Jonny will add a section that talks about:"
msgstr ""

#: ../../package-structure-code/declare-dependencies.md:17
msgid ""
"Why you specify dependencies How to specify dependencies When you use "
"different specifiers"
msgstr ""

#: ../../package-structure-code/declare-dependencies.md:22
msgid "Python Package Dependencies"
msgstr ""

#: ../../package-structure-code/declare-dependencies.md:24
msgid "What is a package dependency?"
msgstr ""

#: ../../package-structure-code/declare-dependencies.md:26
msgid ""
"A Python package dependency refers to an external package or software "
"that your Python project:"
msgstr ""

#: ../../package-structure-code/declare-dependencies.md:29
msgid "needs to function properly."
msgstr ""

#: ../../package-structure-code/declare-dependencies.md:30
msgid ""
"requires if someone wants to develop / work on improving your package "
"locally or"
msgstr ""

#: ../../package-structure-code/declare-dependencies.md:31
msgid ""
"requires if a user wants to add additional functionality (that is not "
"core) to your package"
msgstr ""

#: ../../package-structure-code/declare-dependencies.md:33
msgid ""
"A dependency is not part of your project's codebase. It is a package or "
"software that is called within the code of your project or during "
"development of your package."
msgstr ""

#: ../../package-structure-code/declare-dependencies.md:37
msgid "Understanding optional vs. required dependencies"
msgstr ""

#: ../../package-structure-code/declare-dependencies.md:38
msgid ""
"You can think about dependencies as being either optional or required. If"
" they are required, they will be listed in the `[dependency] =` table of "
"your `pyproject.toml` file. If they are optional, they will be listed in "
"the `[optional.dependencies]` table of your `pyproject.toml`."
msgstr ""

#: ../../package-structure-code/declare-dependencies.md:40
msgid "You will learn about both below."
msgstr ""

#: ../../package-structure-code/declare-dependencies.md:46
msgid ""
"There are two broad groups of Python package dependencies: those that are"
" optional and those that are required. Required packages are those that a"
" user needs to use your package. Optional dependencies are packages a "
"user can chose to install to add functionality to your package. Within "
"those 2 groups, there are three use cases that you can think about. 1. "
"Core dependencies are **required** for a user to use your package. 2. "
"Development dependencies are optional and only needed if someone wants to"
" work on your package locally. 3. Finally feature dependencies are "
"optional and add additional functionality to your package. Not all "
"packages will have feature dependencies."
msgstr ""

#: ../../package-structure-code/declare-dependencies.md:51
msgid "Required (or core) dependencies"
msgstr ""

#: ../../package-structure-code/declare-dependencies.md:53
msgid ""
"Required dependencies are called directly within your package's code. On "
"this page we refer to these dependencies as **core dependencies** as they"
" are needed in order to run your package. You should place your core or "
"required dependencies in the `[dependency]=` table of your "
"`pyproject.toml` file."
msgstr ""

#: ../../package-structure-code/declare-dependencies.md:56
#: ../../package-structure-code/declare-dependencies.md:147
msgid "Optional dependencies"
msgstr ""

#: ../../package-structure-code/declare-dependencies.md:58
msgid ""
"Optional dependencies dependencies can be optionally installed by users "
"depending upon their needs. There are two broad groups of optional "
"dependencies:"
msgstr ""

#: ../../package-structure-code/declare-dependencies.md:61
msgid ""
"**Development dependencies**: These are dependencies that are required to"
" support development of your package. They include tools to run tests "
"such as `pytest`, linters (like `flake8` and `ruff`) and code formatters "
"such as `black` and even automation tools such as `nox` or `tox` that run"
" tasks."
msgstr ""

#: ../../package-structure-code/declare-dependencies.md:63
msgid ""
"**Feature dependencies:** These are dependencies that a user can chose to"
" install to add functionality to your package."
msgstr ""

#: ../../package-structure-code/declare-dependencies.md:65
msgid ""
"When a Python project is installed, the Python package manager (either "
"`pip` or `conda`) installs your package's dependencies automatically. "
"This ensures that when you call a function in a specific dependency, it "
"is available in your user's environment."
msgstr ""

#: ../../package-structure-code/declare-dependencies.md:70
msgid "Dependencies can be added to your pyproject.toml file"
msgstr ""

#: ../../package-structure-code/declare-dependencies.md:72
msgid ""
"In the [pyproject.toml overview page](pyproject-toml-python-package-"
"metadata), you learned how to set up a **pyproject.toml** file with basic"
" metadata for your package. On this page, you will learn how to specify "
"different types of dependencies in your `pyproject.toml`."
msgstr ""

#: ../../package-structure-code/declare-dependencies.md:79
msgid "How do you declare dependencies?"
msgstr ""

#: ../../package-structure-code/declare-dependencies.md:81
msgid ""
"We recommend that you declare your dependencies using your "
"`pyproject.toml` file. This ensures that all of the metadata associated "
"with your package is declared in a single place, making it simpler for "
"users and contributors to understand your package infrastructure."
msgstr ""

#: ../../package-structure-code/declare-dependencies.md:86
msgid ""
"Previously, it was common to use a `requirements.txt` file to declare "
"package dependencies. However in recent years, the ecosystem has moved to"
" storing this information in your **pyproject.toml** file. You may notice"
" however that some projects still maintain a `requirements.txt` file for "
"specific local development needs."
msgstr ""

#: ../../package-structure-code/declare-dependencies.md:92
msgid "Other ways you may see packages storing dependencies"
msgstr ""

#: ../../package-structure-code/declare-dependencies.md:95
msgid ""
"If a project contains extensions written in other languages, you may need"
" a `setup.py` file. Or you may contribute to a package that us using "
"`setup.cfg` for dependency declaration. [Learn more about this in the "
"setuptools "
"documentation](https://setuptools.pypa.io/en/latest/userguide/dependency_management.html"
"#declaring-required-dependency)"
msgstr ""

#: ../../package-structure-code/declare-dependencies.md:100
msgid "Add required dependencies to your pyproject.toml file"
msgstr ""

#: ../../package-structure-code/declare-dependencies.md:102
msgid ""
"Your core project dependencies need to be installed by a package manager "
"such as `pip` or `conda` when a user installs your package. You can add "
"those dependencies to the `dependencies` array located within the "
"`[project]` table of your **pyproject.toml** file. This looks something "
"like this:"
msgstr ""

#: ../../package-structure-code/declare-dependencies.md:121
msgid ""
"Ideally, you should only list the packages that are necessary to install "
"and use your package in the `[dependencies]` section. This minimizes the "
"number of additional packages that your users must install as well as the"
" number of packages that depend upon your package must also install."
msgstr ""

#: ../../package-structure-code/declare-dependencies.md:128
msgid ""
"Remember that fewer dependencies to install reduces the likelihood of "
"version mismatches in user environments."
msgstr ""

#: ../../package-structure-code/declare-dependencies.md:131
msgid "A dependency example"
msgstr ""

#: ../../package-structure-code/declare-dependencies.md:133
msgid ""
"Let's pretend you have a package called `plotMe` that creates beautiful "
"plots of data stored in `numpy` arrays. To create your plots in the "
"`plotMe` package, you use the `seaborn` package to stylize our plots and "
"also `numpy` to process array formatted data."
msgstr ""

#: ../../package-structure-code/declare-dependencies.md:135
msgid "In the example above, the plotMe package, depends upon two packages:"
msgstr ""

#: ../../package-structure-code/declare-dependencies.md:137
msgid "seaborn"
msgstr ""

#: ../../package-structure-code/declare-dependencies.md:138
msgid "numpy"
msgstr ""

#: ../../package-structure-code/declare-dependencies.md:140
msgid ""
"This means that in order for plotMe to work in a user's `environment` "
"when installed, you also need to ensure that they have both of those "
"required `dependencies` installed in their environment too."
msgstr ""

#: ../../package-structure-code/declare-dependencies.md:142
msgid ""
"Declaring a dependency in your `pyproject.toml` file will ensure that it "
"is listed as a required dependency when your package is published to PyPI"
" and that a package manager (`pip` or `conda`) will automatically install"
" it into a user's environment alongside your package:"
msgstr ""

#: ../../package-structure-code/declare-dependencies.md:144
msgid "`python -m pip install plotMe`"
msgstr ""

#: ../../package-structure-code/declare-dependencies.md:149
msgid ""
"Optional dependencies for building your documentation, running your tests"
" and building your package's distribution files are often referred to as "
"development dependencies. These are the dependencies that a user needs to"
" work on your package locally and perform tasks such as:"
msgstr ""

#: ../../package-structure-code/declare-dependencies.md:151
msgid "running your test suite"
msgstr ""

#: ../../package-structure-code/declare-dependencies.md:152
msgid "building your documentation"
msgstr ""

#: ../../package-structure-code/declare-dependencies.md:153
msgid "linting and other code cleanup tools"
msgstr ""

#: ../../package-structure-code/declare-dependencies.md:155
msgid ""
"These dependencies are considered optional, because they are not required"
" to install and use your package. Feature dependencies are considered "
"optional and should also be placed in the `[optional.dependencies]` "
"table."
msgstr ""

#: ../../package-structure-code/declare-dependencies.md:158
msgid ""
"Optional dependencies can be stored in an `[optional.dependencies]` table"
" in your **pyproject.toml** file."
msgstr ""

#: ../../package-structure-code/declare-dependencies.md:161
msgid ""
"It's important to note that within the `[optional.dependencies]` table, "
"you can store additional, optional dependencies within named sub-groups. "
"This is a different table than the dependencies array located within the "
"`[project]` table discussed above which contains a single array with a "
"single list of required packages."
msgstr ""

#: ../../package-structure-code/declare-dependencies.md:163
msgid "Create optional dependency groups"
msgstr ""

#: ../../package-structure-code/declare-dependencies.md:165
msgid "To declare optional dependencies in your **pyproject.toml** file:"
msgstr ""

#: ../../package-structure-code/declare-dependencies.md:167
msgid "Add a `[optional.dependencies]` table to your **pyproject.toml** file."
msgstr ""

#: ../../package-structure-code/declare-dependencies.md:168
msgid "Create named groups of dependencies using the syntax:"
msgstr ""

#: ../../package-structure-code/declare-dependencies.md:170
msgid "`group-name = [\"dep1\", \"dep2\"]`"
msgstr ""

#: ../../package-structure-code/declare-dependencies.md:172
msgid "Installing packages from GitHub / Gitlab"
msgstr ""

#: ../../package-structure-code/declare-dependencies.md:175
msgid ""
"If you have dependencies that need to be installed directly from GitHub "
"using a `git+https` installation approach, you can do so using the "
"pyproject.toml file like so:"
msgstr ""

#: ../../package-structure-code/declare-dependencies.md:185
msgid ""
"IMPORTANT: For security reasons, if your library depends on a GitHub-"
"hosted project, you will need to point to a specific commit/tag/hash of "
"that repository in order to upload your project to PyPI"
msgstr ""

#: ../../package-structure-code/declare-dependencies.md:190
msgid ""
"Below we've created three sets of optional development dependencies "
"named: tests, docs and lint. We've also added a set of feature "
"dependencies."
msgstr ""

#: ../../package-structure-code/declare-dependencies.md:213
msgid "Additional dependency resources"
msgstr ""

#: ../../package-structure-code/declare-dependencies.md:215
msgid ""
"[Learn more: View PyPA's overview of declaring optional "
"dependencies](https://packaging.python.org/en/latest/specifications"
"/declaring-project-metadata/#dependencies-optional-dependencies)"
msgstr ""

#: ../../package-structure-code/declare-dependencies.md:217
msgid ""
"[Dependency "
"specifiers](https://packaging.python.org/en/latest/specifications"
"/dependency-specifiers/)"
msgstr ""

#: ../../package-structure-code/declare-dependencies.md:221
msgid "Install dependency groups"
msgstr ""

#: ../../package-structure-code/declare-dependencies.md:226
msgid ""
"Diagram showing a ven diagram with three sections representing the "
"dependency groups listed above - docs feature and tests. In the center it"
" says your-package and lists the core dependencies of that package "
"seaborn and numpy. To the right are two arrows. The first shows the "
"command python - m pip install your-package. it them shows how installing"
" your package that way installs only the package and the two core "
"dependencies into a users environment. Below is a second arrow with "
"python -m pip install youPackage[tests]. This leads to an environment "
"with both the package dependencies - your-package, seaborn and numpy and "
"also the tests dependencies including pytest and pytest-cov"
msgstr ""

#: ../../package-structure-code/declare-dependencies.md:228
msgid ""
"When a user installs your package locally using python -m pip install "
"your-package only your package and it's core dependencies get installed. "
"When they install your package `[tests]` pip will install both your "
"package and its core dependencies plus any of the dependencies listed "
"within the tests array of your `[optional.dependencies]` table."
msgstr ""

#: ../../package-structure-code/declare-dependencies.md:231
msgid "Using `python -m pip install` vs. `pip install`"
msgstr ""

#: ../../package-structure-code/declare-dependencies.md:233
msgid ""
"In all of the examples in this guide, you will notice we are calling "
"`pip` using the syntax:"
msgstr ""

#: ../../package-structure-code/declare-dependencies.md:236
msgid "`python -m pip`"
msgstr ""

#: ../../package-structure-code/declare-dependencies.md:238
msgid ""
"Calling pip using `python -m` ensures that the `pip` that you are using "
"to install your package comes from your current active Python "
"environment. We strongly suggest that you use this approach whenever you "
"call `pip` to avoid installation conflicts."
msgstr ""

#: ../../package-structure-code/declare-dependencies.md:242
msgid ""
"To ensure this works as you want it to, activate your package's "
"development environment prior to installing anything using `pip`."
msgstr ""

#: ../../package-structure-code/declare-dependencies.md:246
msgid ""
"You can install development dependencies using the groups that you "
"defined above using the syntax:"
msgstr ""

#: ../../package-structure-code/declare-dependencies.md:249
msgid "`python -m pip install \".[docs]\"`"
msgstr ""

#: ../../package-structure-code/declare-dependencies.md:251
msgid "Above you install:"
msgstr ""

#: ../../package-structure-code/declare-dependencies.md:252
msgid "dependencies needed for your documentation (`docs`),"
msgstr ""

#: ../../package-structure-code/declare-dependencies.md:253
msgid "required package dependencies in the `dependency` array and"
msgstr ""

#: ../../package-structure-code/declare-dependencies.md:254
msgid "your package"
msgstr ""

#: ../../package-structure-code/declare-dependencies.md:256
msgid ""
"using pip. Below you install your package, required dependencies and "
"optional test dependencies."
msgstr ""

#: ../../package-structure-code/declare-dependencies.md:259
#: ../../package-structure-code/declare-dependencies.md:277
msgid "`python -m pip install \".[tests]\"`"
msgstr ""

#: ../../package-structure-code/declare-dependencies.md:261
msgid ""
"You can install multiple dependency groups in the "
"`[optional.dependencies]` table using:"
msgstr ""

#: ../../package-structure-code/declare-dependencies.md:263
msgid "`python -m pip install \".[docs, tests, lint]\"`"
msgstr ""

#: ../../package-structure-code/declare-dependencies.md:266
msgid "For zsh shell users"
msgstr ""

#: ../../package-structure-code/declare-dependencies.md:270
msgid ""
"There are different shell applications that you and your package "
"contributors might use."
msgstr ""

#: ../../package-structure-code/declare-dependencies.md:271
msgid "zsh is the shell that comes by default on newer Mac OS computers"
msgstr ""

#: ../../package-structure-code/declare-dependencies.md:272
msgid "Windows users may use a tool such as git bash"
msgstr ""

#: ../../package-structure-code/declare-dependencies.md:274
msgid ""
"Some shells don't support unquoted brackets (`[tests]`) which is why we "
"add quotes to the command in this guide like this:"
msgstr ""

#: ../../package-structure-code/declare-dependencies.md:279
msgid ""
"In some cases you may see commands without the quotes in guidebooks or "
"contributing guides like the example below:"
msgstr ""

#: ../../package-structure-code/declare-dependencies.md:282
msgid "`python -m pip install your-package[tests]`"
msgstr ""

#: ../../package-structure-code/declare-dependencies.md:284
msgid ""
"Calling your-package[tests] without the double quotes will work on some "
"shells *but not all*."
msgstr ""

#: ../../package-structure-code/declare-dependencies.md:287
msgid "Combining sets of dependencies"
msgstr ""

#: ../../package-structure-code/declare-dependencies.md:289
msgid ""
"Above we reviewed how to install dependencies from your `pyproject.toml`."
" In some cases you may want to group sets of dependencies like so:"
msgstr ""

#: ../../package-structure-code/declare-dependencies.md:302
msgid ""
"The above allows you to install both the tests and docs dependency lists "
"using the command:"
msgstr ""

#: ../../package-structure-code/declare-dependencies.md:305
msgid "`python -m pip install \".[dev]\"`"
msgstr ""

#: ../../package-structure-code/declare-dependencies.md:308
msgid "When you install dependencies using the above syntax:"
msgstr ""

#: ../../package-structure-code/declare-dependencies.md:310
msgid "`python -m pip install \".[tests, docs]\"`"
msgstr ""

#: ../../package-structure-code/declare-dependencies.md:312
msgid "`pip` will also install your package and its core dependencies."
msgstr ""

#: ../../package-structure-code/declare-dependencies.md:316
msgid "Where does conda fit in?"
msgstr ""

#: ../../package-structure-code/declare-dependencies.md:319
msgid ""
"The `pyproject.toml` file allows you to list any Python package published"
" on PyPI (or on GitHub/ GitLab) as a dependency. Once you create this "
"file, declare dependencies, [build your package](python-package-"
"distribution-files-sdist-wheel.md) and [publish your package to PyPI"
"](publish-python-package-pypi-conda.md), people can install both your "
"package and all of it's dependencies with one command."
msgstr ""

#: ../../package-structure-code/declare-dependencies.md:322
msgid "`python -m pip install your-package`"
msgstr ""

#: ../../package-structure-code/declare-dependencies.md:324
msgid "This works great if your package is pure-python (no other languages used)."
msgstr ""

#: ../../package-structure-code/declare-dependencies.md:326
msgid ""
"Some packages, particularly in the scientific Python ecosystem, require "
"dependencies that are not written in Python. Conda was created to support"
" distribution of tools that have code written in both Python and "
"languages other than Python."
msgstr ""

#: ../../package-structure-code/declare-dependencies.md:329
msgid "Support conda users with environment.yml files"
msgstr ""

#: ../../package-structure-code/declare-dependencies.md:331
msgid ""
"The above workflow assumes that you want to publish your package on PyPI."
" And then you plan to publish to conda-forge (optionally), [by submitting"
" a recipe using grayskull](https://www.pyopensci.org/python-package-guide"
"/package-structure-code/publish-python-package-pypi-conda.html)."
msgstr ""

#: ../../package-structure-code/declare-dependencies.md:333
msgid ""
"If you want to support conda users, you may want to also maintain a conda"
" environment that they can use to install your package. Maintaining a "
"conda environment will also help you test that your package installs as "
"you expect into a conda environment."
msgstr ""

#: ../../package-structure-code/declare-dependencies.md:336
msgid "A note for conda users"
msgstr ""

#: ../../package-structure-code/declare-dependencies.md:339
msgid ""
"If you use a conda environment for developing your tool, keep in mind "
"that when you install your package using `python -m pip install -e .` (or"
" using pip in general), dependencies will be installed from PyPI rather "
"than conda."
msgstr ""

#: ../../package-structure-code/declare-dependencies.md:341
msgid ""
"Thus, if you are running a conda environment, installing your package in "
"\"editable\" mode risks dependency conflicts. This is particularly "
"important if you have a spatial package that requires geospatial system "
"libraries like GDAL or another system-level dependency."
msgstr ""

#: ../../package-structure-code/declare-dependencies.md:343
msgid ""
"Alternatively, you can install your package using `python -m pip install "
"-e . --no-deps` to only install the package. And install the rest of your"
" dependencies using a conda environment file."
msgstr ""

#: ../../package-structure-code/declare-dependencies.md:346
msgid "Dependencies in Read the Docs"
msgstr ""

#: ../../package-structure-code/declare-dependencies.md:348
msgid ""
"Now that you have your dependencies specified in your project, you can "
"use them to support other workflows such as publishing to Read the Docs."
msgstr ""

#: ../../package-structure-code/declare-dependencies.md:350
msgid ""
"[Read the Docs](https://readthedocs.org) is a documentation platform with"
" a continuous integration / continuous deployment service that "
"automatically builds and publishes your documentation."
msgstr ""

#: ../../package-structure-code/declare-dependencies.md:352
msgid ""
"If you are using Read the Docs to build your documentation, then you may "
"need to install your dependencies using a **readthedocs.yaml** file."
msgstr ""

#: ../../package-structure-code/declare-dependencies.md:354
msgid ""
"Below is an example of installing the **docs** section of your dependency"
" table in the pyproject.toml file within a readthedocs.yaml file."
msgstr ""

#: ../../package-structure-code/declare-dependencies.md:366
msgid "Read the Docs and Python packages"
msgstr ""

#: ../../package-structure-code/declare-dependencies.md:370
msgid ""
"[Learn more about creating a `readthedocs.yaml` file here. "
"](https://docs.readthedocs.io/en/stable/config-file/index.html)"
msgstr ""

#: ../../package-structure-code/declare-dependencies.md:371
msgid ""
"If you want to install dependencies using Poetry in Read the Docs, [you "
"can learn more here.](https://docs.readthedocs.io/en/stable/build-"
"customization.html#install-dependencies-with-poetry)"
msgstr ""

#: ../../package-structure-code/declare-dependencies.md:376
msgid "This is hidden. TO"
msgstr ""

#: ../../package-structure-code/intro.md:163
msgid "Intro"
msgstr "Introducción"

#: ../../package-structure-code/intro.md:163
msgid "Python package structure"
msgstr "Estructura de paquetes de Python"

#: ../../package-structure-code/intro.md:163
msgid "pyproject.toml Package Metadata"
msgstr "Metadatos del paquete en pyproject.toml"

#: ../../package-structure-code/intro.md:163
msgid "Build Your Package"
msgstr "Monta tu paquete"

#: ../../package-structure-code/intro.md:163
msgid "Declare dependencies"
msgstr "Declara dependencias"

#: ../../package-structure-code/intro.md:163
msgid "Package Build Tools"
msgstr "Herramientas de construcción de paquetes"

#: ../../package-structure-code/intro.md:163
msgid "Complex Builds"
msgstr "Construcciones complejas"

#: ../../package-structure-code/intro.md:163
msgid "Package structure & code style"
msgstr "Estilo de código y estructura de paquetes"

#: ../../package-structure-code/intro.md:177
msgid "Publish with Conda / PyPI"
msgstr "Publicar con Conda / PyPI"

#: ../../package-structure-code/intro.md:177
msgid "Package versions"
msgstr "Versiones de paquetes"

#: ../../package-structure-code/intro.md:177
msgid "Code style"
msgstr "Estilo de código"

#: ../../package-structure-code/intro.md:177
msgid "Publishing a package"
msgstr "Publicar un paquete"

#: ../../package-structure-code/intro.md:1
msgid "Python package structure information"
msgstr "Información sobre la estructura de paquetes de Python"

#: ../../package-structure-code/intro.md:3
msgid ""
"This section provides guidance on your Python package's structure, code "
"formats and style. It also reviews the various packaging tools that you "
"can use to support building and publishing your package."
msgstr ""
"Esta sección proporciona orientación sobre la estructura de su paquete de Python, "
"los formatos de código y estilo. También revisa las diversas herramientas de empaquetado "
"que puede utilizar para admitir la construcción y publicación de su paquete."

#: ../../package-structure-code/intro.md:7
msgid ""
"If you are confused by Python packaging, you are not alone! The good news"
" is there are some great modern packaging tools that ensure that you're "
"following best practices. Here, we review tool features and suggest tools"
" that might be best fitted for your workflow."
msgstr ""
"Si está confundido por el empaquetado de Python, ¡no está solo! La buena noticia es "
"que hay algunas herramientas de empaquetado modernas excelentes que garantizan que "
"está siguiendo las mejores prácticas. Aquí, revisamos las características de las herramientas "
"y sugerimos las que podrían ser más adecuadas para su flujo de trabajo."

#: ../../package-structure-code/intro.md:19
msgid "✨ 1. Package file structure ✨"
msgstr "✨ 1. Estructura de archivos en el paquete ✨"

#: ../../package-structure-code/intro.md:23
msgid ""
"src layout, flat layout and where should tests folders live? No matter "
"what your level of packaging knowledge is, this page will help you decide"
" upon a package structure that follows modern python best practices."
msgstr ""
"¿Distribución con estructura 'src', distribución plana y dónde deben vivir las carpetas de tests? "
"Sin importar cuál sea su nivel de conocimiento sobre empaquetado, esta página le ayudará a decidir "
"sobre una estructura de paquete que siga las mejores prácticas modernas para paquetes de Python."

#: ../../package-structure-code/intro.md:28
msgid "✨ 2. Learn about building your package ✨"
msgstr "✨ 2. Aprende a construir tu paquete ✨"

#: ../../package-structure-code/intro.md:32
msgid ""
"To publish your Python package on PyPI, you will need to first build it. "
"The act of \"building\" refers to the process of placing your package "
"code and metadata into a format that can be published on PyPI. Learn more"
" about building your Python package."
msgstr ""
"Para publicar su paquete de Python en PyPI, primero deberá construirlo. El acto de \"construir\" "
"se refiere al proceso de colocar su código de paquete y metadatos en un formato que se pueda "
"publicar en PyPI. Aprenda más sobre cómo construir su paquete de Python."

#: ../../package-structure-code/intro.md:41
msgid "✨ 4. Add metadata ✨"
msgstr "✨ 4. Agregar metadatos ✨"

#: ../../package-structure-code/intro.md:45
msgid ""
"Learn how to add project metadata to your Python package to support both "
"filtering on PyPI and also the metadata that a package installer needs to"
" build and install your package."
msgstr ""
"Aprenda cómo agregar metadatos de proyecto a su paquete de Python para admitir tanto "
"los filtros en PyPI como los metadatos que un instalador de paquetes necesita para "
"construir e instalar su paquete."

#: ../../package-structure-code/intro.md:52
msgid "✨ 3. What Python package tool should you use? ✨"
msgstr "✨ 3. ¿Qué herramienta de empaquetado de Python debería usar? ✨"

#: ../../package-structure-code/intro.md:56
msgid ""
"Learn more about the suite of packaging tools out there. And learn which "
"tool might be best for you."
msgstr ""
"Aprenda más sobre la suite de herramientas de empaquetado disponibles. Y aprenda cuál "
"podría ser la mejor herramienta para usted."

#: ../../package-structure-code/intro.md:62
msgid "✨ 4. Publish to PyPI and Conda ✨"
msgstr "✨ 4. Publicar en PyPI y Conda ✨"

#: ../../package-structure-code/intro.md:66
msgid ""
"If you have a pure Python package, it's a straight forward process to "
"publish to both PyPI and then a Conda channel such as conda-forge. Learn "
"more here."
msgstr ""
"Si tiene un paquete de Python puro, publicar en PyPI y luego en "
"un canal de Conda como conda-forge es un proceso sencillo. Aprenda más aquí."

#: ../../package-structure-code/intro.md:73
msgid "✨ 5. Setup package versioning ✨"
msgstr "✨ 5. Configurar el versionado de paquetes ✨"

#: ../../package-structure-code/intro.md:77
msgid ""
"Semver (numeric versioning) and Calver (versioning using the date) are 2 "
"common ways to version a package. Which one should you pick? Learn more "
"here."
msgstr ""
"Semver (versionado numérico) y Calver (versionado usando la fecha) son 2 formas comunes "
"de versionar un paquete. ¿Cuál debería elegir? Aprenda más aquí."

#: ../../package-structure-code/intro.md:83
msgid "✨ 6. Code style & linters ✨"
msgstr "✨ 6. Estilo de código y linters ✨"

#: ../../package-structure-code/intro.md:87
msgid ""
"Black, blue, flake8, Ruff - which tools can help you ensure your package "
"follows best practices for code format? Learn more about the options and "
"why this is important here."
msgstr ""
"Black, blue, flake8, Ruff - ¿qué herramientas pueden ayudarlo a asegurarse de que su paquete "
"siga las mejores prácticas para el formato de código? Aprenda más sobre las opciones y por qué "
"esto es importante."

#: ../../package-structure-code/intro.md:95
msgid ""
"Figure showing a decision tree with the various packaging tool front-end "
"and back-end options."
msgstr ""
"Figura que muestra un árbol de decisiones con las diversas opciones de herramientas de empaquetado."

#: ../../package-structure-code/intro.md:97
msgid ""
"Diagram showing the various front-end build tools that you can select "
"from. See the packaging tools page to learn more about each tool."
msgstr ""
"Diagrama que muestra las diversas herramientas de construcción de front-end que puede seleccionar. "
"Consulte la página de herramientas de empaquetado para obtener más información sobre cada herramienta."

#: ../../package-structure-code/intro.md:102
msgid ""
"If you are considering submitting a package for peer review, have a look "
"at the bare-minimum [editor checks](https://www.pyopensci.org/software-"
"peer-review/how-to/editor-in-chief-guide.html#editor-checklist-template) "
"that pyOpenSci performs before a review begins. These checks are useful "
"to explore for both authors planning to submit a package to us for review"
" and for anyone who is just getting started with creating a Python "
"package."
msgstr ""
"Si está considerando enviar un paquete para revisión por pares, eche un vistazo a las [comprobaciones "
"mínimas del editor](https://www.pyopensci.org/software-"
"peer-review/how-to/editor-in-chief-guide.html#editor-checklist-template) que realiza pyOpenSci "
"antes de que comience una revisión. Estas comprobaciones son útiles para explorar tanto para los autores "
"que planean enviar un paquete para su revisión como para cualquier persona que esté comenzando "
"a crear un paquete de Python."

#: ../../package-structure-code/intro.md:109
msgid "What you will learn here"
msgstr "¿Qué aprenderás aquí?"

#: ../../package-structure-code/intro.md:111
msgid "In this section of our Python packaging guide, we:"
msgstr "En esta sección de nuestra guía de empaquetado de Python, nosotros:"

#: ../../package-structure-code/intro.md:113
msgid ""
"Provide an overview of the options available to you when packaging your "
"tool."
msgstr ""
"Proporcionamos una descripción general de las opciones disponibles para empaquetar su código."

#: ../../package-structure-code/intro.md:115
msgid ""
"Suggest tools and approaches that both meet your needs and also support "
"existing standards."
msgstr ""
"Sugerimos herramientas y enfoques que satisfacen sus necesidades y también respaldan los estándares existentes."

#: ../../package-structure-code/intro.md:117
msgid ""
"Suggest tools and approaches that will allow you to expand upon a "
"workflow that may begin as a pure Python tool and evolve into a tool that"
" requires addition layers of complexity in the packaging build."
msgstr ""
"Sugerimos herramientas y enfoques que le permitirán ampliar un flujo de trabajo que puede comenzar "
"como código en Python puro y evolucionar hacia un código con capas adicionales "
"de complejidad en la construcción de empaquetado."

#: ../../package-structure-code/intro.md:120
msgid ""
"Align our suggestions with the most current, accepted [PEPs (Python "
"Enhancement Protocols)](https://peps.python.org/pep-0000/) and the "
"[Scientific Python community SPECs](https://scientific-"
"python.org/specs/)."
msgstr ""
"Alineamos nuestras sugerencias con los [PEPs (Protocolos de Mejora de Python)](https://peps.python.org/pep-0000/) "
"más actuales y aceptados y las [especificaciones de la comunidad científica de Python (SPECs)](https://scientific-"
"python.org/specs/)."

#: ../../package-structure-code/intro.md:123
msgid ""
"In an effort to maintain consistency within our community, we also align "
"with existing best practices being implemented by developers of core "
"Scientific Python packages such as Numpy, SciPy and others."
msgstr ""
"En un esfuerzo por mantener la consistencia dentro de nuestra comunidad, también nos alineamos con las mejores "
"prácticas existentes que están siendo implementadas por los desarrolladores de paquetes científicos de Python "
"como Numpy, SciPy y otros."

#: ../../package-structure-code/intro.md:127
msgid "Guidelines for pyOpenSci's packaging recommendations"
msgstr "Directrices para las recomendaciones de empaquetado de pyOpenSci"

#: ../../package-structure-code/intro.md:129
msgid ""
"The flexibility of the Python programming language lends itself to a "
"diverse range of tool options for creating a Python package. Python is so"
" flexible that it is one of the few languages that can be used to wrap "
"around other languages. The ability of Python to wrap other languages is "
"one the reasons you will often hear Python described as a [\"glue\" "
"language](https://numpy.org/doc/stable/user/c-info.python-as-glue.html)\""
msgstr ""
"La flexibilidad del lenguaje de programación Python se presta a una amplia gama de opciones de herramientas "
"para crear un paquete de Python. Python es tan flexible que es uno de los pocos lenguajes que se pueden usar "
"para envolver otros lenguajes. La capacidad de Python para envolver otros lenguajes es una de las razones por "
"las que a menudo escuchará que Python se describe como un "
"[\"lenguaje de pegamento\"](https://numpy.org/doc/stable/user/c-info.python-as-glue.html)\""

#: ../../package-structure-code/intro.md:135
msgid ""
"If you are building a pure Python package, then your packaging setup can "
"be simple. However, some scientific packages have complex requirements as"
" they may need to support extensions or tools written in other languages "
"such as C or C++."
msgstr ""
"Si está construyendo un paquete de Python puro, entonces su configuración de empaquetado puede ser simple. "
"Sin embargo, algunos paquetes científicos tienen requisitos complejos, ya que pueden necesitar soportar "
"extensiones o herramientas escritas en otros lenguajes como C o C++."

#: ../../package-structure-code/intro.md:139
msgid ""
"To support the many different uses of Python, there are many ways to "
"create a Python package. In this guide, we suggest packaging approaches "
"and tools based on:"
msgstr ""
"Para satisfacer todos los usos posibles del lenguaje, hay muchas formas de crear un paquete de Python. "
"En esta guía, sugerimos enfoques y herramientas de empaquetado basados en:"

#: ../../package-structure-code/intro.md:142
msgid ""
"What we think will be best and easiest to adopt for those who are newer "
"to packaging."
msgstr ""
"Lo que creemos que será lo mejor y más fácil de adoptar para aquellos que son nuevos en el empaquetado."

#: ../../package-structure-code/intro.md:144
msgid "Tools that we think are well maintained and documented."
msgstr "Heramientas que creemos que están bien mantenidas y documentadas."

#: ../../package-structure-code/intro.md:145
msgid ""
"A shared goal of standardizing packaging approaches across this "
"(scientific) Python ecosystem."
msgstr ""
"Un objetivo compartido de estandarizar los enfoques de empaquetado en todo el ecosistema de Python científico."

#: ../../package-structure-code/intro.md:148
msgid ""
"Here, we also try to align our suggestions with the most current, "
"accepted [Python community](https://packaging.python.org/en/latest/) and "
"[scientific community](https://scientific-python.org/specs/)."
msgstr ""
"Aquí, también intentamos alinear nuestras sugerencias con las prácticas más actuales "
"y aceptadas [comunidad de Python](https://packaging.python.org/en/latest/) y "
"[comunidad científica](https://scientific-python.org/specs/)."

#: ../../package-structure-code/intro.md:151
msgid "Suggestions in this guide are not pyOpenSci review requirements"
msgstr "Las sugerencias en esta guía no son requisitos de revisión de pyOpenSci"

#: ../../package-structure-code/intro.md:154
msgid ""
"The suggestions for package layout in this section are made with the "
"intent of being helpful; they are not specific requirements for your "
"package to be reviewed and accepted into our pyOpenSci open source "
"ecosystem."
msgstr ""
"Las sugerencias para la distribución de paquetes en esta sección se hacen con la intención de ayudarle; "
"no son requisitos específicos para que su paquete sea revisado y aceptado en nuestro ecosistema de código "
"abierto de pyOpenSci."

#: ../../package-structure-code/intro.md:158
msgid ""
"Please check out our [package scope page](https://www.pyopensci.org"
"/software-peer-review/about/package-scope.html) and [review requirements "
"in our author guide](https://www.pyopensci.org/software-peer-review/how-"
"to/author-guide.html#) if you are looking for pyOpenSci's Python package "
"review requirements!"
msgstr ""
"¡Consulte nuestra [página con el scope que cubre PyOpenSci](https://www.pyopensci.org"
"/software-peer-review/about/package-scope.html) y [requisitos de revisión "
"en nuestra guía para autores](https://www.pyopensci.org/software-peer-review/how-"
"to/author-guide.html#) si está buscando los requisitos de revisión de paquetes "
"que aplica pyOpenSci!"

#: ../../package-structure-code/publish-python-package-pypi-conda.md:1
msgid "Publishing Your Package In A Community Repository: PyPI or Anaconda.org"
msgstr "Publicar su paquete en un repositorio comunitario: PyPI o Anaconda.org"

#: ../../package-structure-code/publish-python-package-pypi-conda.md:5
msgid ""
"pyOpenSci requires that your package has an distribution that can be "
"installed from a public community repository such as PyPI or a conda "
"channel such as `bioconda` or `conda-forge` on Anaconda.org."
msgstr ""
"pyOpenSci requiere que su paquete tenga una distribución que se pueda instalar desde un "
"repositorio comunitario público como PyPI o un canal de conda como "
"`bioconda` o `conda-forge` en Anaconda.org."

#: ../../package-structure-code/publish-python-package-pypi-conda.md:9
msgid ""
"Below you will learn more about the various publishing options for your "
"Python package."
msgstr ""
"A continuación, aprenderá más sobre las diversas opciones de publicación para su paquete de Python."

#: ../../package-structure-code/publish-python-package-pypi-conda.md:14
msgid ""
"Installing packages in the same environment using both pip and conda can "
"lead to package conflicts."
msgstr ""
"Instalar paquetes en el mismo entorno usando tanto pip como conda puede "
"dar lugar a conflictos entre paquetes."

#: ../../package-structure-code/publish-python-package-pypi-conda.md:16
msgid ""
"To minimize conflicts for users who may be using conda (or pip) to manage"
" local environments, consider publishing your package to both PyPI and "
"the conda-forge channel on Anaconda.org."
msgstr ""
"Para minimizar conflictos para los usuarios que pueden estar usando conda (o pip) para "
"administrar entornos locales, considere publicar su paquete tanto en PyPI como en el canal "
"conda-forge en Anaconda.org."

#: ../../package-structure-code/publish-python-package-pypi-conda.md:18
msgid ""
"Below you will learn more specifics about the differences between PyPI "
"and conda publishing of your Python package."
msgstr ""
"A continuación, aprenderá más sobre las diferencias específicas entre "
"la publicación de su paquete de Python en PyPI y conda."

#: ../../package-structure-code/publish-python-package-pypi-conda.md:24
#: ../../package-structure-code/python-package-distribution-files-sdist-wheel.md:6
msgid ""
"Image showing the progression of creating a Python package, building it "
"and then publishing to PyPI and conda-forge. You take your code and turn "
"it into distribution files (sdist and wheel) that PyPI accepts. then "
"there is an arrow towards the PyPI repository where ou publish both "
"distributions. From PyPI if you create a conda-forge recipe you can then "
"publish to conda-forge."
msgstr ""
"Imagen representando la progresión de crear un paquete de Python, construirlo"
" y luego publicarlo en PyPI y conda-forge. Convierte tu código en "
"archivos de distribución (sdist y wheel) que acepta PyPI. Luego hay una flecha "
"hacia el repositorio de PyPI donde publicas ambas distribuciones. Desde PyPI, "
"si creas una receta de conda-forge, puedes publicar en conda-forge."

#: ../../package-structure-code/publish-python-package-pypi-conda.md:26
msgid ""
"Once you have published both package distributions (the source "
"distribution and the wheel) to PyPI, you can then publish to conda-forge."
" conda-forge requires a source distribution on PyPI in order to build "
"your package on conda-forge. You do not need to rebuild your package to "
"publish to conda-forge."
msgstr ""
"Una vez que haya publicado ambas distribuciones de paquetes (la distribución de origen "
"y la wheel) en PyPI, puede publicar en conda-forge. conda-forge requiere una distribución de "
"origen en PyPI para construir su paquete en conda-forge. No necesita reconstruir su paquete para "
"publicar en conda-forge."

#: ../../package-structure-code/publish-python-package-pypi-conda.md:29
msgid "What is PyPI"
msgstr "¿Qué es PyPI?"

#: ../../package-structure-code/publish-python-package-pypi-conda.md:31
msgid ""
"[PyPI](https://pypi.org/) is an online Python package repository that you"
" can use to both find and install and publish your Python package. There "
"is also a test PyPI repository where you can test publishing your package"
" prior to the final publication on PyPI."
msgstr ""
"[PyPI](https://pypi.org/) es un repositorio de paquetes de Python en línea que puede "
"usar para encontrar, instalar y publicar su paquete de Python. También hay un repositorio "
"de prueba de PyPI donde puede probar la publicación de su paquete antes de la publicación final en PyPI."

#: ../../package-structure-code/publish-python-package-pypi-conda.md:36
msgid ""
"Many if not most Python packages can be found on PyPI and are thus "
"installable using `pip`."
msgstr ""
"Muchos, si no la mayoría, de los paquetes de Python se pueden encontrar en PyPI y, por lo tanto, "
"se pueden instalar usando `pip`."

#: ../../package-structure-code/publish-python-package-pypi-conda.md:38
msgid ""
"The biggest different between using pip and conda to install a package is"
" that conda can install any package regardless of the language(s) that it"
" is written in. Whereas `pip` can only install Python packages."
msgstr ""
"La mayor diferencia entre usar pip y conda para instalar un paquete es que conda puede instalar "
"cualquier paquete independientemente del lenguaje en el que esté escrito. Mientras que `pip` "
"solo puede instalar paquetes de Python."

#: ../../package-structure-code/publish-python-package-pypi-conda.md:43
msgid "Click here for a tutorial on publishing your package to PyPI."
msgstr "Haga clic aquí para un tutorial sobre cómo publicar su paquete en PyPI."

#: ../../package-structure-code/publish-python-package-pypi-conda.md:52
msgid ""
"On the package build page, we discussed the [two package distribution "
"types that you will create when making a Python package](python-package-"
"distribution-files-sdist-wheel): SDist (packaged as a .tar.gz or .zip) "
"and Wheel (.whl) which is really a zip file. Both of those file "
"\"bundles\" will be published on PyPI when you use [a standard build tool"
"](python-package-build-tools) to build your package."
msgstr ""
"En la página de construcción de paquetes, discutimos los [dos tipos de distribución de paquetes "
"que creará al hacer un paquete de Python](python-package-"
"distribution-files-sdist-wheel): SDist (empaquetado como .tar.gz o .zip) y Wheel (.whl) que es "
"realmente un archivo zip. Ambos de esos \"paquetes\" de archivos se publicarán en PyPI cuando use "
"[una herramienta de construcción estándar](python-package-build-tools) para construir su paquete."

#: ../../package-structure-code/publish-python-package-pypi-conda.md:60
msgid "What is conda and Anaconda.org?"
msgstr "¿Qué es conda y Anaconda.org?"

#: ../../package-structure-code/publish-python-package-pypi-conda.md:62
msgid ""
"conda is an open source package and environment management tool. conda "
"can be used to install tools from the [Anaconda "
"repository](https://repo.anaconda.com/)."
msgstr ""
"conda es una herramienta de gestión de paquetes y entornos de código abierto. conda se puede "
"usar para instalar herramientas desde el [repositorio de Anaconda](https://repo.anaconda.com/)."

#: ../../package-structure-code/publish-python-package-pypi-conda.md:66
msgid ""
"Anaconda.org contains public and private repositories for packages. These"
" repositories are known as channels (discussed below)."
msgstr ""
"Anaconda.org contiene repositorios públicos y privados para paquetes. Estos repositorios se conocen "
"como canales (discutidos a continuación)."

#: ../../package-structure-code/publish-python-package-pypi-conda.md:69
msgid "A brief history of conda's evolution"
msgstr "Una breve historia de la evolución de conda"

#: ../../package-structure-code/publish-python-package-pypi-conda.md:72
msgid ""
"The conda ecosystem evolved years ago to provide support for, and "
"simplify the process of, managing software dependencies in scientific "
"Python projects."
msgstr ""
"El ecosistema de conda evolucionó hace años para proporcionar soporte y simplificar el proceso de "
"gestión de dependencias de software en proyectos científicos de Python."

#: ../../package-structure-code/publish-python-package-pypi-conda.md:76
msgid ""
"Many of the core scientific Python projects depend upon or wrap around "
"tools and extensions that are written in other languages, such as C++. In"
" the early stages of the scientific ecosystem's development, these non-"
"Python extensions and tools were not well supported on PyPI, making "
"publication difficult. In recent years there is more support for complex "
"builds that allow developers to bundle non-Python code into a Python "
"distribution using the [wheel distribution format](python-wheel)."
msgstr ""
"Muchos de los proyectos científicos de Python dependen de o envuelven herramientas y extensiones "
"escritas en otros lenguajes, como C++. En las primeras etapas del desarrollo del ecosistema científico, "
"estas extensiones y herramientas no escritas en Python no eran compatibles en PyPI, lo que hacía "
"que la publicación fuera difícil. En los últimos años, hay más soporte para construcciones complejas "
"que permiten a los desarrolladores empaquetar código no escrito en Python en una distribución de Python "
"usando el [formato de distribución de rueda](python-wheel)."

#: ../../package-structure-code/publish-python-package-pypi-conda.md:78
msgid ""
"Conda provides a mechanism to manage these dependencies and ensure that "
"the required packages are installed correctly."
msgstr ""
"Conda proporciona un mecanismo para gestionar estas dependencias y asegurar que los paquetes requeridos "
"se instalen correctamente."

#: ../../package-structure-code/publish-python-package-pypi-conda.md:82
msgid ""
"While conda was originally created to support Python packages, it is now "
"used across all languages. This cross-language support makes it easier "
"for some packages to include and have access to tools written in other "
"languages, such as C/C++ (gdal), Julia, or R. Creating an environment "
"that mixes all of these packages is usually easier and more consistent "
"with full-fledged package managers like conda."
msgstr ""
"Si bien conda se creó originalmente para admitir paquetes de Python, ahora se usa en todos los lenguajes. "
"Este soporte entre lenguajes facilita que algunos paquetes incluyan y tengan acceso a herramientas escritas "
"en otros lenguajes, como C/C++ (gdal), Julia o R. Crear un entorno que mezcle todos estos paquetes suele ser "
"más fácil y más consistente con herramientas de administración de paquetes como conda."

#: ../../package-structure-code/publish-python-package-pypi-conda.md:90
msgid "conda channels"
msgstr "Canales de conda"

#: ../../package-structure-code/publish-python-package-pypi-conda.md:92
msgid ""
"conda built packages are housed within repositories that are called "
"channels. The conda package manager can install packages from different "
"channels."
msgstr ""
"Los paquetes construidos con conda se alojan en repositorios que se llaman canales. "
"El administrador de paquetes conda puede instalar paquetes de diferentes canales."

#: ../../package-structure-code/publish-python-package-pypi-conda.md:95
msgid ""
"There are several core public channels that most people use to install "
"packages using conda, including:"
msgstr ""
"Existen varios canales públicos principales que la mayoría de las personas utilizan para instalar "
"paquetes con conda, incluidos:"

#: ../../package-structure-code/publish-python-package-pypi-conda.md:98
msgid ""
"**defaults:** this is a channel managed by Anaconda. It is the version of"
" the Python packages that you will install if you install the Anaconda "
"Distribution. Anaconda (the company) decides what packages live on the "
"`defaults` channel."
msgstr ""
"**defaults:** este es un canal administrado por Anaconda. Es la versión de los paquetes de Python "
"que instalará si instala la Distribución de Anaconda. Anaconda (la empresa) decide qué paquetes "
"viven en el canal `defaults`."

#: ../../package-structure-code/publish-python-package-pypi-conda.md:99
msgid ""
"[**conda-forge:**](https://anaconda.org/conda-forge) this is a community-"
"driven channel that focuses on scientific packages. This channel is ideal"
" for tools that support geospatial data. Anyone can publish a package to "
"this channel."
msgstr ""
"[**conda-forge:**](https://anaconda.org/conda-forge) este es un canal impulsado por la comunidad "
"que se enfoca en paquetes científicos. Este canal es ideal para herramientas que admiten datos "
"geoespaciales. Cualquiera puede publicar un paquete en este canal."

#: ../../package-structure-code/publish-python-package-pypi-conda.md:100
msgid ""
"[**bioconda**](https://anaconda.org/bioconda): this channel focuses on "
"biomedical tools."
msgstr ""
"[**bioconda**](https://anaconda.org/bioconda): este canal se enfoca en herramientas biomédicas."

#: ../../package-structure-code/publish-python-package-pypi-conda.md:102
msgid ""
"**conda-forge** emerged as many of the scientific packages did not exist "
"in the `defaults` Anaconda channel."
msgstr ""
"**conda-forge** surgió motivado por que muchos de los paquetes científicos "
"no existían en el canal `defaults` de Anaconda."

#: ../../package-structure-code/publish-python-package-pypi-conda.md:107
msgid ""
"Graphic with the title Python package repositories. Below it says "
"Anything hosted on PyPI can be installed using pip install. Packaging "
"hosted on a conda channel can be installed using conda install. Below "
"that there are two rows. the top row says conda channels. next to it are "
"three boxes one with conda-forge, community maintained; bioconda and then"
" default - managed by the anaconda team. Below that there is a row that "
"says PyPI servers. PyPI - anyone can publish to PyPI. and test PyPI. a "
"testbed server for you to practice."
msgstr ""
"Gráfico con el título Repositorios de paquetes de Python. Debajo dice "
"Cualquier cosa alojada en PyPI se puede instalar usando pip install. Los paquetes alojados en un "
"canal de conda se pueden instalar usando conda install. Debajo de eso hay dos filas. La fila superior "
"dice canales de conda. Al lado hay tres cuadros uno con conda-forge, mantenido por la comunidad; bioconda "
"y luego defaults - administrado por el equipo de Anaconda. Debajo de eso hay una fila que dice "
"Servidores de PyPI. PyPI - cualquiera puede publicar en PyPI; y test PyPI - un servidor de pruebas"
" para que practiques."

#: ../../package-structure-code/publish-python-package-pypi-conda.md:109
msgid ""
"Conda channels represent various repositories that you can install "
"packages from. Because conda-forge is community maintained, anyone can "
"submit a recipe there. PyPI is also a community maintained repository. "
"Anyone can submit a package to PyPI and test PyPI. Unlike conda-forge "
"there are no manual checks of packages submitted to PyPI."
msgstr ""
"Los canales de conda representan varios repositorios desde los que puede instalar paquetes. "
"Dado que conda-forge es mantenido por la comunidad, cualquiera puede enviar una receta allí. "
"PyPI también es un repositorio mantenido por la comunidad. Cualquiera puede enviar un paquete a PyPI "
"y a test PyPI. A diferencia de conda-forge, no hay comprobaciones manuales de los paquetes enviados a PyPI."

#: ../../package-structure-code/publish-python-package-pypi-conda.md:113
msgid "conda channels, PyPI, conda, pip - Where to publish your package"
msgstr "Canal de conda, PyPI, conda, pip - Dónde publicar su paquete"

#: ../../package-structure-code/publish-python-package-pypi-conda.md:115
msgid ""
"You might be wondering why there are different package repositories that "
"can be used to install Python packages."
msgstr ""
"Es posible que se pregunte por qué hay diferentes repositorios de paquetes que se pueden usar para instalar "
"paquetes de Python."

#: ../../package-structure-code/publish-python-package-pypi-conda.md:118
msgid ""
"And more importantly you are likely wondering how to pick the right "
"repository to publish your Python package."
msgstr ""
"Y, lo que es más importante, es probable que se esté preguntando cómo elegir el repositorio adecuado "
"para publicar su paquete de Python."

#: ../../package-structure-code/publish-python-package-pypi-conda.md:121
msgid "The answer to both questions relates dependency conflicts."
msgstr "La respuesta a ambas preguntas se relaciona con conflictos de dependencias."

#: ../../package-structure-code/publish-python-package-pypi-conda.md:125
msgid ""
"Image showing an XKCD comic that shows a web of Python environments and "
"tools and installations. At the bottom is says -  My python environment "
"has become so degraded that my laptop has been declared a superfund site."
msgstr ""
"Imagen que muestra un cómic de XKCD que muestra una red de entornos y herramientas de Python e instalaciones. "
"En la parte inferior dice - Mi entorno de Python se ha degradado tanto que mi ordenador portátil ha sido "
"declarado un sitio de superfinanciación."

#: ../../package-structure-code/publish-python-package-pypi-conda.md:127
msgid ""
"Installing Python and Python packages from different repositories can "
"lead to environment conflicts where a version of on package doesn't work "
"with a version of another package. To keep your environments clean and "
"working, it's best to install packages from the same repository. So use "
"pip to install everything. Or use conda. If you can, try to avoid "
"installing package from both pip and conda into the same environment."
msgstr ""
"Instalar Python y paquetes de Python desde diferentes repositorios puede "
"llevar a conflictos de entorno donde una versión de un paquete no funciona con una versión de otro paquete. "
"Para mantener sus entornos limpios y funcionando, es mejor instalar paquetes desde el mismo repositorio. "
"Por lo tanto, use pip para instalar todo. O use conda. Si puede, intente evitar instalar paquetes tanto "
"de pip como de conda en el mismo entorno."

#: ../../package-structure-code/publish-python-package-pypi-conda.md:135
msgid "Managing Python package dependency conflicts"
msgstr "Gestión de conflictos de dependencias de paquetes de Python"

#: ../../package-structure-code/publish-python-package-pypi-conda.md:137
msgid ""
"Python environments can encounter conflicts because Python tools can be "
"installed from different repositories. Broadly speaking, Python "
"environments have a smaller chance of dependency conflicts when the tools"
" are installed from the same package repository. Thus environments that "
"contain packages installed from both pip and conda are more likely to "
"yield dependency conflicts."
msgstr ""
"Los entornos de Python pueden encontrar conflictos porque las herramientas de Python se pueden instalar "
"desde diferentes repositorios. En términos generales, los entornos de Python tienen una menor probabilidad "
"de conflictos de dependencias cuando las herramientas se instalan desde el mismo repositorio de paquetes. "
"Por lo tanto, los entornos que contienen paquetes instalados tanto desde pip como desde conda tienen más "
"probabilidades de generar conflictos de dependencias."

#: ../../package-structure-code/publish-python-package-pypi-conda.md:144
msgid ""
"Similarly installing packages from the default anaconda package mixed "
"with the conda-forge channel can also lead to dependency conflicts."
msgstr ""
"De manera similar, instalar paquetes del canal predeterminado (`defaults`) de Anaconda mezclado con el canal conda-forge "
"también puede llevar a conflictos de dependencias."

#: ../../package-structure-code/publish-python-package-pypi-conda.md:146
msgid ""
"Many install packages directly from conda `defaults` channel. However, "
"because this channel is managed by Anaconda, the packages available on it"
" are limited to those that Anaconda decides should be core to a stable "
"installation. The conda-forge channel was created to complement the "
"`defaults` channel. It allows anyone to submit a package to be published "
"in the channel . Thus, `conda-forge` channel ensures that a broad suite "
"of user-developed community packages can be installed from conda."
msgstr ""
"Muchos instalan paquetes directamente desde el canal `defaults` de conda. Sin embargo, debido a que este "
"canal es administrado por Anaconda, los paquetes disponibles en él están limitados a aquellos que Anaconda "
"decide que deben ser fundamentales para una instalación estable. El canal conda-forge se creó para complementar "
"el canal `defaults`. Permite a cualquiera enviar un paquete para ser publicado en el canal. Por lo tanto, el canal "
"`conda-forge` garantiza que se puedan instalar una amplia gama de paquetes de la comunidad desarrollados por el usuario "
"desde conda."

#: ../../package-structure-code/publish-python-package-pypi-conda.md:150
msgid ""
"Take-aways: If you can, publish on both PyPI and conda-forge to "
"accommodate more users of your package"
msgstr ""
"Conclusión: Si puede, publique tanto en PyPI como en conda-forge "
"para acomodar a más usuarios de su paquete"

#: ../../package-structure-code/publish-python-package-pypi-conda.md:152
msgid ""
"The take-away here for maintainers is that if you anticipate users "
"wanting to use conda to manage their local environments (which many do), "
"you should consider publishing to both PyPI and the conda-forge channel "
"(_more on that below_)."
msgstr ""
"La conclusión aquí para los mantenedores es que si anticipa que los usuarios querrán usar conda para "
"administrar sus entornos locales (lo cual muchos hacen), debería considerar publicar tanto en PyPI como en "
"el canal conda-forge (_más sobre eso a continuación_)."

#: ../../package-structure-code/publish-python-package-pypi-conda.md:157
msgid "Additional resources"
msgstr "Recursos adicionales"

#: ../../package-structure-code/publish-python-package-pypi-conda.md:158
msgid ""
"[learn more about why conda-forge was created, here](https://conda-"
"forge.org/docs/user/introduction.html)"
msgstr ""
"[aprende más sobre por qué se creó conda-forge, aquí](https://conda-"
"forge.org/docs/user/introduction.html)"

#: ../../package-structure-code/publish-python-package-pypi-conda.md:160
msgid ""
"[To learn more about conda terminology, check out their "
"glossary.](https://docs.conda.io/projects/conda/en/latest/glossary.html )"
msgstr ""
"[Para aprender más sobre la terminología de conda, consulte su "
"glosario.](https://docs.conda.io/projects/conda/en/latest/glossary.html )"

#: ../../package-structure-code/publish-python-package-pypi-conda.md:165
msgid "How to submit to conda-forge"
msgstr "Como publicar en conda-forge"

#: ../../package-structure-code/publish-python-package-pypi-conda.md:167
msgid ""
"While pyOpenSci doesn't require you to add your package to conda-forge, "
"we encourage you to consider doing so!"
msgstr ""
"¡Si bien pyOpenSci no requiere que agregue su paquete a conda-forge, le "
"sugerimos que lo considere!"

#: ../../package-structure-code/publish-python-package-pypi-conda.md:170
msgid ""
"Once your package is on PyPI, the process to add your package to conda-"
"forge is straight forward to do. [You can follow the detailed steps "
"provided by the conda-forge maintainer team.](https://conda-"
"forge.org/docs/maintainer/adding_pkgs.html)."
msgstr ""
"Una vez que su paquete esté en PyPI, el proceso para agregar su paquete a conda-forge es sencillo de hacer. "
"[Puede seguir los pasos detallados proporcionados por el equipo de mantenimiento de conda-forge.](https://conda-"
"forge.org/docs/maintainer/adding_pkgs.html)."

#: ../../package-structure-code/publish-python-package-pypi-conda.md:175
msgid "Click here for a tutorial on adding your package to conda-forge."
msgstr "Haga clic aquí para un tutorial sobre cómo agregar su paquete a conda-forge."

#: ../../package-structure-code/publish-python-package-pypi-conda.md:182
msgid "If you want a step by step tutorial, click here."
msgstr "Si desea un tutorial paso a paso, haga clic aquí."

#: ../../package-structure-code/publish-python-package-pypi-conda.md:185
msgid ""
"Once your package is added, you will have a feedstock repository on "
"GitHub with your packages name"
msgstr ""
"Una vez que se agregue su paquete, tendrá un repositorio de feedstock en "
"GitHub con el nombre de su paquete"

#: ../../package-structure-code/publish-python-package-pypi-conda.md:188
msgid ""
"[Here is an example conda-forge feedstock for the pyOpenSci approved "
"package - movingpandas](https://github.com/conda-forge/movingpandas-"
"feedstock)"
msgstr ""
"[Aquí hay un ejemplo de feedstock de conda-forge para el paquete aprobado "
"por pyOpenSci - movingpandas](https://github.com/conda-forge/movingpandas-"
"feedstock)"

#: ../../package-structure-code/publish-python-package-pypi-conda.md:191
msgid "Maintaining your conda-forge package repository"
msgstr "Mantenimiento de su repositorio de paquetes conda-forge"

#: ../../package-structure-code/publish-python-package-pypi-conda.md:193
msgid ""
"Once your package is on the conda-forge channel, maintaining it is "
"simple. Every time that you push a new version of your package to PyPI, "
"it will kick off a continuous integration build that updates your package"
" in the conda-forge repository. Once that build is complete, you will get"
" a notification to review the update."
msgstr ""
"Una vez que su paquete esté en el canal conda-forge, mantenerlo es simple. "
"Cada vez que envíe una nueva versión de su paquete a PyPI, se iniciará una "
"compilación de integración continua que actualizará su paquete en el repositorio "
"conda-forge. Una vez que se complete esa compilación, recibirá una notificación "
"para revisar la actualización."

#: ../../package-structure-code/publish-python-package-pypi-conda.md:199
msgid ""
"You can merge the pull request for that update once you are happy with "
"it. A ready-to-merge PR usually means ensuring that your project's "
"dependencies (known as runtime requirements) listed in the updated YAML "
"file found in the pull request match the PyPI metadata of the new "
"release."
msgstr ""
"Puede hacer merge de la pull request para esa actualización una vez que esté "
"contento con ella. Una pull request lista para hacer merge generalmente "
"significa asegurarse de que las dependencias de su proyecto (conocidas como "
"requisitos en tiempo de ejecución) enumeradas en el archivo YAML actualizado "
"en la solicitud de cambio coincidan con los metadatos de PyPI de la nueva versión."

#: ../../package-structure-code/pyproject-toml-python-package-metadata.md:1
msgid "Use a pyproject.toml file for your package configuration & metadata"
msgstr ""

#: ../../package-structure-code/pyproject-toml-python-package-metadata.md:12
msgid "Important pyproject.toml take aways"
msgstr ""

#: ../../package-structure-code/pyproject-toml-python-package-metadata.md:16
msgid ""
"There are only two tables that are required for an installable Python "
"package: **[build-system]** and **[project]**. The **[project]** table "
"stores your package's metadata."
msgstr ""

#: ../../package-structure-code/pyproject-toml-python-package-metadata.md:17
msgid ""
"There are only two _required_ fields in the **[project]** table: "
"**name=** and **version=**."
msgstr ""

#: ../../package-structure-code/pyproject-toml-python-package-metadata.md:18
msgid ""
"We suggest you add additional metadata to your `pyproject.toml` file as "
"it will make it easier for users to find your project on PyPI."
msgstr ""

#: ../../package-structure-code/pyproject-toml-python-package-metadata.md:19
msgid ""
"When you are adding classifiers to the [project] table, only use valid "
"values from [PyPI’s classifier page](https://PyPI.org/classifiers/). An "
"invalid value here will raise an error when you build your package or "
"publish to PyPI."
msgstr ""

#: ../../package-structure-code/pyproject-toml-python-package-metadata.md:20
msgid ""
"There is no specific order for tables in the `pyproject.toml` file. "
"However fields need to be placed within the correct table sections. For "
"example `requires =` always need to be associated with the **[build-"
"system]** table."
msgstr ""

#: ../../package-structure-code/pyproject-toml-python-package-metadata.md:21
msgid ""
"**python-requires**: is important to have in your `pyproject.toml` file "
"as it helps pip install your package."
msgstr ""

#: ../../package-structure-code/pyproject-toml-python-package-metadata.md:27
msgid "when these are published, remove this todo"
msgstr ""

#: ../../package-structure-code/pyproject-toml-python-package-metadata.md:36
msgid ""
"Need help creating your pyproject.toml file?  This tutorial will walk you"
" through the process."
msgstr ""

#: ../../package-structure-code/pyproject-toml-python-package-metadata.md:50
msgid ""
"Click here if need help migrating from setup.py/setup.cfg to "
"pyproject.toml"
msgstr ""

#: ../../package-structure-code/pyproject-toml-python-package-metadata.md:60
msgid "About the pyproject.toml file"
msgstr ""

#: ../../package-structure-code/pyproject-toml-python-package-metadata.md:62
msgid ""
"Every modern Python package should include a `pyproject.toml` file. If "
"your project is pure Python and you're using a `setup.py` or `setup.cfg` "
"file to describe its metadata, you should consider migrating your "
"metadata and build information to a `pyproject.toml` file."
msgstr ""

#: ../../package-structure-code/pyproject-toml-python-package-metadata.md:64
msgid ""
"If your project isn’t pure-python, you might still require a `setup.py` "
"file to build the non Python extensions. However, a `pyproject.toml` file"
" should still be used to store your project’s metadata."
msgstr ""

#: ../../package-structure-code/pyproject-toml-python-package-metadata.md:66
msgid "What happened to setup.py & how do i migrate to pyproject.toml?"
msgstr ""

#: ../../package-structure-code/pyproject-toml-python-package-metadata.md:68
msgid ""
"Prior to August 2017, Python package metadata was stored either in the "
"`setup.py` file or a `setup.cfg` file. In recent years, there has been a "
"shift to storing Python package metadata in a much more user-readable "
"`pyproject.toml` format. Having all metadata in a single file:"
msgstr ""

#: ../../package-structure-code/pyproject-toml-python-package-metadata.md:70
msgid "simplifies package management,"
msgstr ""

#: ../../package-structure-code/pyproject-toml-python-package-metadata.md:71
msgid ""
"allows you to use a suite of different [build "
"backends](https://www.pyopensci.org/python-package-guide/package-"
"structure-code/python-package-build-tools.html#build-back-ends) such as "
"(flit-core, hatchling, pdm-build), and"
msgstr ""

#: ../../package-structure-code/pyproject-toml-python-package-metadata.md:72
msgid "aligns with modern best practices."
msgstr ""

#: ../../package-structure-code/pyproject-toml-python-package-metadata.md:79
msgid ""
"The standard file that Python packages use to [specify build requirements"
" and metadata is called a "
"**pyproject.toml**](https://packaging.python.org/en/latest/specifications"
"/declaring-project-metadata/). Adding metadata, build requirements and "
"package dependencies to a **pyproject.toml** file replaces storing that "
"information in a setup.py or setup.cfg file."
msgstr ""

#: ../../package-structure-code/pyproject-toml-python-package-metadata.md:84
msgid "About the .toml format"
msgstr ""

#: ../../package-structure-code/pyproject-toml-python-package-metadata.md:86
msgid ""
"The **pyproject.toml** file is written in [TOML (Tom's Obvious, Minimal "
"Language) format](https://toml.io/en/). TOML is an easy-to-read structure"
" that is founded on key/value pairs. Each section in the "
"**pyproject.toml** file contains a `[table identifier]`. Below that table"
" identifier are key/value pairs that support configuration for that "
"particular table."
msgstr ""

#: ../../package-structure-code/pyproject-toml-python-package-metadata.md:90
msgid "Below `[build-system]` is considered a table in the toml language."
msgstr ""

#: ../../package-structure-code/pyproject-toml-python-package-metadata.md:91
msgid "Within the `build-system` table below `requires =` is a key."
msgstr ""

#: ../../package-structure-code/pyproject-toml-python-package-metadata.md:92
msgid ""
"The associated value for `requires` is an array containing the value "
"`\"hatchling\"`."
msgstr ""

#: ../../package-structure-code/pyproject-toml-python-package-metadata.md:100
msgid "How the pyproject.toml is used when you build a package"
msgstr ""

#: ../../package-structure-code/pyproject-toml-python-package-metadata.md:104
#: ../../package-structure-code/python-package-distribution-files-sdist-wheel.md:81
msgid ""
"When you publish to PyPI, you will notice that each package has metadata "
"listed. Let’s have a look at [xclim](https://pypi.org/project/xclim/), "
"one of our [pyOpenSci packages](https://www.pyopensci.org/python-"
"packages.html). Notice that on the PyPI landing page you see some "
"metadata about the package including python, maintainer information and "
"more. PyPI is able to populate this metadata because it was defined using"
" correct syntax and classifiers by Xclim's maintainers, [pyproject.toml "
"file](https://github.com/Ouranosinc/xclim/blob/master/pyproject.toml). "
"This metadata when the xclim package is built, is translated into a "
"distribution file that allows PyPI to read the metadata and print it out "
"on their website."
msgstr ""

#: ../../package-structure-code/pyproject-toml-python-package-metadata.md:106
#: ../../package-structure-code/python-package-distribution-files-sdist-wheel.md:83
msgid ""
"Image showing the left side bar of PyPI for the package xclim. The "
"section at the top says Classifier. Below there is a list of items "
"including Development status, intended audience, License, natural "
"language, operating system, programming language and topic. Below each of"
" those sections are various classifier options.\" width=\"300px\">"
msgstr ""

#: ../../package-structure-code/pyproject-toml-python-package-metadata.md:111
#: ../../package-structure-code/python-package-distribution-files-sdist-wheel.md:88
msgid ""
"When you add the classifier section to your pyproject.toml and your "
"package is built, the build tool organizes the metadata into a format "
"that PyPI can understand and represent on your PyPI landing page. These "
"classifiers also allow users to sort through packages by version of "
"python they support, categories and more."
msgstr ""

#: ../../package-structure-code/pyproject-toml-python-package-metadata.md:116
msgid "Benefits of using a pyproject.toml file"
msgstr ""

#: ../../package-structure-code/pyproject-toml-python-package-metadata.md:118
msgid ""
"Including your package's metadata in a separate human-readable "
"**pyproject.toml** format also allows someone to view the project's "
"metadata in a GitHub repository."
msgstr ""

#: ../../package-structure-code/pyproject-toml-python-package-metadata.md:126
msgid "Setup.py is still useful for complex package builds"
msgstr ""

#: ../../package-structure-code/pyproject-toml-python-package-metadata.md:130
msgid ""
"Using **setup.py** to manage package builds and metadata [can cause "
"problems with package "
"development](https://blog.ganssle.io/articles/2021/10/setup-py-"
"deprecated.html). In some cases where a Python package build is complex, "
"a **setup.py** file may be required. While this guide will not cover "
"complex builds, we will provide resources working with complex builds in "
"the future."
msgstr ""

#: ../../package-structure-code/pyproject-toml-python-package-metadata.md:136
msgid "Optional vs. Required pyproject.toml file fields"
msgstr ""

#: ../../package-structure-code/pyproject-toml-python-package-metadata.md:138
msgid ""
"When you create your `pyproject.toml` file, there are numerous metadata "
"fields that you can use. Below we suggest specific fields to get you "
"started that support publication on PyPI and users finding your package."
msgstr ""

#: ../../package-structure-code/pyproject-toml-python-package-metadata.md:140
msgid ""
"[An overview of all of the project metadata elements can be found "
"here.](https://packaging.python.org/en/latest/specifications/core-"
"metadata/#project-url-multiple-use)"
msgstr ""

#: ../../package-structure-code/pyproject-toml-python-package-metadata.md:142
msgid "Required fields for the [project] table"
msgstr ""

#: ../../package-structure-code/pyproject-toml-python-package-metadata.md:144
msgid ""
"As mentioned above, your pyproject.toml file needs to have a **name** and"
" **version** field in order to properly build your package:"
msgstr ""

#: ../../package-structure-code/pyproject-toml-python-package-metadata.md:146
msgid "Name: This is the name of your project provided as a string"
msgstr ""

#: ../../package-structure-code/pyproject-toml-python-package-metadata.md:147
msgid ""
"Version: This is the version of your project. If you are using a scm tool"
" for versioning (using git tags to determine versions), then the version "
"may be dynamic (more on that below)."
msgstr ""

#: ../../package-structure-code/pyproject-toml-python-package-metadata.md:149
msgid "Optional fields to include in the `[project]` table"
msgstr ""

#: ../../package-structure-code/pyproject-toml-python-package-metadata.md:151
msgid ""
"We strongly suggest that you also add the metadata keys below as they "
"will help users finding your package on PyPI. These fields will make it "
"clear how your package is structured, what platforms you support and what"
" dependencies your package requires."
msgstr ""

#: ../../package-structure-code/pyproject-toml-python-package-metadata.md:156
msgid "**Description:** this is a short one-line description of your package."
msgstr ""

#: ../../package-structure-code/pyproject-toml-python-package-metadata.md:157
msgid ""
"**Readme:** A link to your README.md file is used for the long long-"
"description. This information will be published on your packages PyPI "
"landing page."
msgstr ""

#: ../../package-structure-code/pyproject-toml-python-package-metadata.md:158
msgid ""
"**Requires-python** (used by pip): this is a field that is used by pip. "
"Here you tell the installer whether you are using Python 2.x or 3.x. Most"
" projects will be using 3.x."
msgstr ""

#: ../../package-structure-code/pyproject-toml-python-package-metadata.md:159
msgid "**License:** the license you are using"
msgstr ""

#: ../../package-structure-code/pyproject-toml-python-package-metadata.md:160
msgid ""
"**Authors:** these are the original authors of the package. Sometimes the"
" authors are different from the maintainers. Other times they might be "
"the same."
msgstr ""

#: ../../package-structure-code/pyproject-toml-python-package-metadata.md:161
msgid ""
"**Maintainers:** you can choose to populate this or not. You can populate"
" this using a list with a sub element for each author or maintainer name,"
" email"
msgstr ""

#: ../../package-structure-code/pyproject-toml-python-package-metadata.md:169
msgid ""
"**dependencies:** dependencies are optional but we strongly suggest you "
"include them in your pyproject.toml. Dependencies will be installed by "
"pip when your project is installed creating a better user-experience."
msgstr ""

#: ../../package-structure-code/pyproject-toml-python-package-metadata.md:171
msgid ""
"**`[project.optional-dependencies]`:** the optional or development "
"dependencies will be installed if someone runs `python -m pip install "
"projectname[dev]`. This is a nice way to include your development "
"dependencies for users who may wish to contribute to your project."
msgstr ""

#: ../../package-structure-code/pyproject-toml-python-package-metadata.md:173
msgid ""
"**keywords:** These are the keywords that will appear on your PyPI "
"landing page. Think of them as words that people might use to search for "
"your package."
msgstr ""

#: ../../package-structure-code/pyproject-toml-python-package-metadata.md:174
msgid ""
"**classifiers:** The classifiers section of your metadata is also "
"important for the landing page of your package in PyPI and for filtering "
"of packages in PyPI. A list of [all options for classifiers can be found "
"her](https://PyPI.org/classifiers/)e. Some of the classifiers that you "
"should consider including"
msgstr ""

#: ../../package-structure-code/pyproject-toml-python-package-metadata.md:175
msgid "Development Status"
msgstr ""

#: ../../package-structure-code/pyproject-toml-python-package-metadata.md:176
msgid "Intended Audience"
msgstr ""

#: ../../package-structure-code/pyproject-toml-python-package-metadata.md:177
msgid "Topic"
msgstr ""

#: ../../package-structure-code/pyproject-toml-python-package-metadata.md:178
msgid "LIcense"
msgstr ""

#: ../../package-structure-code/pyproject-toml-python-package-metadata.md:179
msgid "Programming language"
msgstr ""

#: ../../package-structure-code/pyproject-toml-python-package-metadata.md:181
msgid "Advanced options in the pyproject.toml file"
msgstr ""

#: ../../package-structure-code/pyproject-toml-python-package-metadata.md:183
msgid "The examples at the bottom of this page contain ..."
msgstr ""

#: ../../package-structure-code/pyproject-toml-python-package-metadata.md:185
msgid ""
"**`[project.scripts]` (Entry points):** Entry points are optional. If you"
" have a command line tool that runs a specific script hosted in your "
"package, you may include an entry point to call that script directly at "
"the command line (rather than at the Python shell)."
msgstr ""

#: ../../package-structure-code/pyproject-toml-python-package-metadata.md:186
msgid ""
"Here is an example of[ a package that has entry point "
"script](https://github.com/pyOpenSci/update-web-"
"metadata/blob/main/pyproject.toml#L60)s. Notice that there are several "
"core scripts defined in that package that perform sets of tasks. "
"pyOpenSci is using those scripts to process their metadata."
msgstr ""

#: ../../package-structure-code/pyproject-toml-python-package-metadata.md:187
msgid ""
"**Dynamic Fields:** if you have fields that are dynamically populated. "
"One example of this is if you are using scm / version control based "
"version with tools like `setuptooms_scm`, then you might use the dynamic "
"field. such as version (using scm) **dynamic = [\"version\"]**"
msgstr ""

#: ../../package-structure-code/pyproject-toml-python-package-metadata.md:189
#: ../../package-structure-code/python-package-build-tools.md:392
msgid "Add dependencies to your pyproject.toml file"
msgstr ""

#: ../../package-structure-code/pyproject-toml-python-package-metadata.md:191
msgid ""
"The pyproject.toml file can also be used as a replacement for the "
"requirements.txt file which has been traditionally used to store "
"development dependencies such as pytest, code formatters such as Black "
"and documentation tools such as sphinx."
msgstr ""

#: ../../package-structure-code/pyproject-toml-python-package-metadata.md:193
msgid ""
"To add dependencies to your build, add a `[project.optional-"
"dependencies]` table to your pyproject.toml file."
msgstr ""

#: ../../package-structure-code/pyproject-toml-python-package-metadata.md:195
msgid "Then specify dependency groups as follows:"
msgstr ""

#: ../../package-structure-code/pyproject-toml-python-package-metadata.md:202
msgid "Following the above example, you install dependencies like this:"
msgstr ""

#: ../../package-structure-code/pyproject-toml-python-package-metadata.md:204
msgid "`python -m pip install -e .[tests]`"
msgstr ""

#: ../../package-structure-code/pyproject-toml-python-package-metadata.md:206
msgid ""
"The above will install both your package in editable mode and all of the "
"dependencies declared in the tests section of your `[project.optional-"
"dependencies]` table."
msgstr ""

#: ../../package-structure-code/pyproject-toml-python-package-metadata.md:208
msgid "To install all dependencies and also your package, you'd use:"
msgstr ""

#: ../../package-structure-code/pyproject-toml-python-package-metadata.md:210
msgid "`python -m pip install -e .[tests,lint,docs]`"
msgstr ""

#: ../../package-structure-code/pyproject-toml-python-package-metadata.md:212
msgid "Recursive dependencies"
msgstr ""

#: ../../package-structure-code/pyproject-toml-python-package-metadata.md:216
msgid ""
"You can also setup sets of recursive dependencies. [See this blog post "
"for more.](https://hynek.me/articles/python-recursive-optional-"
"dependencies/)"
msgstr ""

#: ../../package-structure-code/pyproject-toml-python-package-metadata.md:219
msgid "Example pyproject.toml for building using hatchling"
msgstr ""

#: ../../package-structure-code/pyproject-toml-python-package-metadata.md:221
msgid ""
"Below is an example build configuration for a Python project. This "
"example package setup uses **hatchling** to build the [package's sdist "
"and wheels](python-package-distribution-files-sdist-wheel)."
msgstr ""

#: ../../package-structure-code/pyproject-toml-python-package-metadata.md:229
msgid "Notice that dependencies are specified in this file."
msgstr ""

#: ../../package-structure-code/pyproject-toml-python-package-metadata.md:231
msgid "Example pyproject.toml for building using setuptools"
msgstr ""

#: ../../package-structure-code/pyproject-toml-python-package-metadata.md:233
msgid ""
"The package metadata including authors, keywords, etc is also easy to "
"read. Below you can see the same TOML file that uses a different build "
"system (setuptools). Notice how simple it is to swap out the tools needed"
" to build this package!"
msgstr ""

#: ../../package-structure-code/pyproject-toml-python-package-metadata.md:237
msgid "In this example package setup you use:"
msgstr ""

#: ../../package-structure-code/pyproject-toml-python-package-metadata.md:239
msgid ""
"**setuptools** to build the [package's sdist and wheels](python-package-"
"distribution-files-sdist-wheel)"
msgstr ""

#: ../../package-structure-code/pyproject-toml-python-package-metadata.md:240
msgid ""
"**setuptools_scm** to manage package version updates using version "
"control tags"
msgstr ""

#: ../../package-structure-code/pyproject-toml-python-package-metadata.md:242
msgid ""
"In the example below `[build-system]` is the first table of values. It "
"has two keys that specify the build backend API and containing package:"
msgstr ""

#: ../../package-structure-code/pyproject-toml-python-package-metadata.md:245
msgid "`requires =`"
msgstr ""

#: ../../package-structure-code/pyproject-toml-python-package-metadata.md:246
msgid "`build-back-end =`"
msgstr ""

#: ../../package-structure-code/pyproject-toml-python-package-metadata.md:253
msgid ""
"[Click here to read about our packaging build tools including PDM, "
"setuptools, Poetry and Hatch.](/package-structure-code/python-package-"
"build-tools)"
msgstr ""

#: ../../package-structure-code/python-package-build-tools.md:1
msgid "Python Packaging Tools"
msgstr "Herramientas de empaquetado de Python"

#: ../../package-structure-code/python-package-build-tools.md:3
msgid "Tools for building your package"
msgstr "Herramientas para construir su paquete"

#: ../../package-structure-code/python-package-build-tools.md:5
msgid ""
"There are a several different build tools that you can use to [create "
"your Python package's _sdist_ and _wheel_ distributions](python-package-"
"distribution-files-sdist-wheel). Below, we discuss the features, benefits"
" and limitations of the most commonly used Python packaging tools. We "
"focus on pure-python packages in this guide. However, we also highlight "
"tools that currently support packages with C/C++ and other language "
"extensions."
msgstr ""
"Hay varias herramientas de construcción diferentes que puede utilizar "
"para [crear las distribuciones _sdist_ y _wheel_ de su paquete de Python](python-package-"
"distribution-files-sdist-wheel). A continuación, discutimos las características, beneficios "
"y limitaciones de las herramientas de empaquetado de Python más comúnmente utilizadas. "
"Nos enfocamos en paquetes de Python puro en esta guía. Sin embargo, también destacamos "
"herramientas que actualmente admiten paquetes con extensiones en C/C++ y otros lenguajes."

#: ../../package-structure-code/python-package-build-tools.md:13
msgid ""
"Decision tree diagram showing the various front and back end packaging "
"tools. You can decide what packaging tool to use by thinking about what "
"features you need. PDM and Hatch are  currently the most flexible tools "
"as they also using different build back-ends. As such currently PDM and "
"Hatch are the tools we think beginners might appreciate most with Poetry "
"being a close second. Poetry is nice for pure Python projects."
msgstr ""
"Diagrama de árbol de decisión que muestra las diversas herramientas de empaquetado "
"frontend y backend. Puede decidir qué herramienta de empaquetado utilizar pensando en "
"qué características necesita. PDM y Hatch son actualmente las herramientas más flexibles "
"ya que también utilizan diferentes backends de construcción. Por lo tanto, actualmente "
"PDM y Hatch son las herramientas que creemos que los principiantes podrían apreciar más, "
"con Poetry siendo un segundo cercano. Poetry es agradable para proyectos de Python puro."

#: ../../package-structure-code/python-package-build-tools.md:15
msgid ""
"Diagram showing the different front end build tools available to use in "
"the Python package ecosystem that you can select from. We selected tools "
"to include in this diagram based upon the PyPI survey which helped us "
"understand the most populate tools in the ecosystem. Each tool has "
"different features as highlighted below."
msgstr ""
"Diagrama que muestra las diferentes herramientas de construcción de frontend disponibles "
"para usar en el ecosistema de paquetes de Python que puede seleccionar. Seleccionamos "
"herramientas para incluir en este diagrama basándonos en la encuesta de PyPI que nos ayudó "
"a comprender las herramientas más populares en el ecosistema. Cada herramienta tiene "
"características diferentes como se destaca a continuación."

#: ../../package-structure-code/python-package-build-tools.md:18
msgid ""
"If you want to know more about Python packages that have extensions "
"written in other languages, [check out the page on complex package builds"
".](complex-python-package-builds)"
msgstr ""
"Si desea saber más sobre paquetes de Python que tienen extensiones escritas en otros lenguajes, "
"[consulte la página sobre construcciones de paquetes complejas.](complex-python-package-builds)"

#: ../../package-structure-code/python-package-build-tools.md:21
msgid "Tools that we review here"
msgstr "Herramientas que revisamos aquí"

#: ../../package-structure-code/python-package-build-tools.md:23
msgid ""
"In this section we have selected tools that were returned as the most "
"popular packaging tools in the PyPA survey. You will learn more about the"
" following tools on this page:"
msgstr ""
"En esta sección hemos seleccionado las herramientas de "
"empaquetado más populares en la encuesta de PyPA. Aprenderá más sobre las siguientes herramientas "
"en esta página:"


#: ../../package-structure-code/python-package-build-tools.md:27
msgid ""
"[Twine](https://twine.readthedocs.io/en/stable/), [Build](https://pypa-"
"build.readthedocs.io/en/stable/) + "
"[setuptools](https://setuptools.pypa.io/en/latest/)"
msgstr ""
"[Twine](https://twine.readthedocs.io/en/stable/), [Build](https://pypa-"
"build.readthedocs.io/en/stable/) + "
"[setuptools](https://setuptools.pypa.io/en/latest/)"

#: ../../package-structure-code/python-package-build-tools.md:28
msgid "[Flit](https://flit.pypa.io/en/stable/)"
msgstr "[Flit](https://flit.pypa.io/en/stable/)"

#: ../../package-structure-code/python-package-build-tools.md:29
msgid "[Hatch](https://hatch.pypa.io/latest/)"
msgstr "[Hatch](https://hatch.pypa.io/latest/)"

#: ../../package-structure-code/python-package-build-tools.md:30
msgid "[PDM](https://pdm.fming.dev/latest/)"
msgstr "[PDM](https://pdm.fming.dev/latest/)"

#: ../../package-structure-code/python-package-build-tools.md:31
msgid "[Poetry](https://python-poetry.org/docs/)"
msgstr "[Poetry](https://python-poetry.org/docs/)"

#: ../../package-structure-code/python-package-build-tools.md:33
msgid "Summary of tools Hatch vs. PDM vs. Poetry (and setuptools)"
msgstr "Resumen de herramientas Hatch vs. PDM vs. Poetry (y setuptools)"

#: ../../package-structure-code/python-package-build-tools.md:35
msgid "If you are looking for a quick summary, read below."
msgstr "Si está buscando un resumen rápido, lea a continuación."

#: ../../package-structure-code/python-package-build-tools.md:37
msgid ""
"In general, any modern tool that you select from this page will be great "
"to build your package. Selecting a tool comes down to the features that "
"you are looking for in your workflow."
msgstr ""
"En general, cualquier herramienta moderna que seleccione de esta página será "
"excelente para construir su paquete. La selección de que herramienta usar depende de las características "
"de su flujo de trabajo."

#: ../../package-structure-code/python-package-build-tools.md:38
msgid ""
"We suggest that beginners start with a modern workflow tool like PDM as "
"opposed to navigating the complexities of setuptools."
msgstr ""
"Sugerimos que los principiantes comiencen con una herramienta de flujo de trabajo moderna como PDM "
"en lugar de navegar por las complejidades de setuptools."

#: ../../package-structure-code/python-package-build-tools.md:39
msgid ""
"If you are going to use Poetry (it is the most popular tool and does have"
" the best documentation) beware of the upper bounds dependency additions "
"and consider overriding dependencies when you add them. If you do that "
"Poetry will work well for pure-python builds! Poetry also has an active "
"discord where you can ask questions."
msgstr ""
"Si va a utilizar Poetry (es la herramienta más popular y tiene la mejor "
"documentación), tenga en cuenta que la herramienta asume automáticamente una dependencia "
"a la versión mayor actual y considere eliminar estas dependencias cuando la herramienta las agregue. ¡Si hace "
"eso, Poetry funcionará bien para construcciones de Python puro! Poetry también "
"tiene un discord activo donde puede hacer preguntas."

#: ../../package-structure-code/python-package-build-tools.md:41
msgid "Below are some features that Hatch and PDM offer that Poetry does not."
msgstr "Abajo hay algunas características que Hatch y PDM ofrecen que Poetry no."

#: ../../package-structure-code/python-package-build-tools.md:43
msgid "PDM:"
msgstr "PDM:"

#: ../../package-structure-code/python-package-build-tools.md:45
msgid ""
"Supports other back-ends making it ideal for builds that are not pure "
"Python. This means PDM is a great option for both pure python and more "
"complex Python builds as it supports meson-python and other build "
"backends."
msgstr ""
"Admite otros backends, lo que lo hace ideal para construcciones que no son de Python puro. "
"Esto significa que PDM es una excelente opción tanto para Python puro como para construcciones "
"de Python más complejas, ya que admite meson-python y otros backends de construcción."

#: ../../package-structure-code/python-package-build-tools.md:46
msgid "Offers flexibility in dependency management which we like"
msgstr "Ofrece flexibilidad en la gestión de dependencias que nos gusta"

#: ../../package-structure-code/python-package-build-tools.md:47
msgid "Offers lock files if you need them"
msgstr "Ofrece archivos de bloqueo si los necesita"

#: ../../package-structure-code/python-package-build-tools.md:49
msgid "Hatch:"
msgstr "Hatch:"

#: ../../package-structure-code/python-package-build-tools.md:51
msgid ""
"Offers matrix environment management that allows you to run tests across "
"Python versions. If this feature is important to you, then Hatch is a "
"clear winner."
msgstr ""
"Ofrece gestión de entornos que le permite ejecutar pruebas en "
"versiones de Python. Si esta característica es importante, "
"Hatch es el claro ganador."

#: ../../package-structure-code/python-package-build-tools.md:52
msgid ""
"Offers a Nox / Make file like tool to streamline your build workflow. If "
"you are looking to reduce the number of tools in your workflow, Hatch "
"might be for you."
msgstr ""
"Ofrece una herramienta Nox / Make file para optimizar su flujo de trabajo de construcción. "
"Si está buscando reducir el número de herramientas en su flujo de trabajo, Hatch podría ser una buena opción."

#: ../../package-structure-code/python-package-build-tools.md:55
msgid "Build front-end vs. build back-end tools"
msgstr "Constructores frontend vs. constructores backend"

#: ../../package-structure-code/python-package-build-tools.md:57
msgid ""
"To better understand your options, when it comes to building a Python "
"package, it's important to first understand the difference between a "
"build tool front-end and build back-end."
msgstr ""
"Para comprender mejor sus opciones, cuando se trata de construir un paquete de Python, "
"es importante primero comprender la diferencia entre un constructor de frontend y un constructor de backend."

#: ../../package-structure-code/python-package-build-tools.md:62
msgid "Build back-ends"
msgstr "Constructores backend"

#: ../../package-structure-code/python-package-build-tools.md:64
msgid ""
"Most packaging tools have a back-end build tool that builds you package "
"and creates associated [(sdist and wheel) distribution files](python-"
"package-distribution-files-sdist-wheel). Some tools, such as **Flit**, "
"only support pure-Python package builds. A pure-Python build refers to a "
"package build that does not have extensions that are written in another "
"programming language (such as `C` or `C++`)."
msgstr ""
"La mayoría de las herramientas de empaquetado tienen una herramienta de construcción de backend "
"que construye su paquete y crea archivos de distribución [(sdist y wheel)](python-"
"package-distribution-files-sdist-wheel) asociados. Algunas herramientas, como **Flit**, "
"solo admiten construcciones de paquetes de Python puro. Una construcción de Python puro se refiere "
"a una construcción de paquete que no tiene extensiones escritas en otro lenguaje de programación "
"(como `C` o `C++`)."

#: ../../package-structure-code/python-package-build-tools.md:71
msgid ""
"Other packages that have C and C++ extensions (or that wrap other "
"languages such as fortran) require additional code compilation steps when"
" built. Back-ends such as **setuptools.build**, **meson.build** and "
"**scikit-build** support complex builds with custom steps. If your build "
"is particularly complex (i.e. you have more than a few `C`/`C++` "
"extensions), then we suggest you use **meson.build** or **scikit-build**."
msgstr ""
"Otros paquetes que tienen extensiones en C y C++ (o que envuelven otros lenguajes como Fortran) "
"requieren pasos adicionales de compilación de código cuando se construyen. Backends como **setuptools.build**, "
"**meson.build** y **scikit-build** admiten construcciones complejas con pasos personalizados. "
"Si su construcción es particularmente compleja (es decir, tiene varias extensiones `C`/`C++`), "
"entonces le sugerimos que use **meson.build** o **scikit-build**."

#: ../../package-structure-code/python-package-build-tools.md:77
msgid "Python package build front-ends"
msgstr "Constructores frontend de paquetes de Python"

#: ../../package-structure-code/python-package-build-tools.md:79
msgid ""
"A packaging front-end tool refers to a tool that makes it easier for you "
"to perform common packaging tasks using similar commands. These tasks "
"include:"
msgstr ""
"Una herramienta de frontend de empaquetado se refiere a una herramienta que "
"facilita la realización de tareas de empaquetado comunes utilizando comandos similares. "
"Estas tareas incluyen:"

#: ../../package-structure-code/python-package-build-tools.md:82
msgid ""
"[Build your packages (create the sdist and wheel distributions)](python-"
"package-distribution-files-sdist-wheel)"
msgstr ""
"[Construir sus paquetes (crear las distribuciones sdist y wheel)](python-"
"package-distribution-files-sdist-wheel)"

#: ../../package-structure-code/python-package-build-tools.md:83
msgid ""
"Installing your package in a development mode (so it updates when you "
"update your code)"
msgstr ""
"Instalar su paquete en un modo de desarrollo (para que se actualice cuando actualice su código)"

#: ../../package-structure-code/python-package-build-tools.md:84
msgid "Publishing to PyPI"
msgstr "Publicar en PyPI"

#: ../../package-structure-code/python-package-build-tools.md:85
msgid "Running tests"
msgstr "Ejecutar tests"

#: ../../package-structure-code/python-package-build-tools.md:86
msgid "Building documentation"
msgstr "Construir documentación"

#: ../../package-structure-code/python-package-build-tools.md:87
msgid ""
"Managing an environment or multiple environments in which you need to run"
" tests and develop your package"
msgstr ""
"Gestionar uno o varios entornos de desarrollo en los que necesita ejecutar tests y desarrollar su paquete"

#: ../../package-structure-code/python-package-build-tools.md:89
msgid ""
"There are several Python packaging tools that you can use for pure Python"
" builds. Each front-end tool discussed below supports a slightly "
"different set of Python packaging tasks."
msgstr ""
"Hay varias herramientas de empaquetado de Python que puede utilizar para construcciones de Python puro. "
"Cada herramienta de frontend discutida a continuación admite un conjunto "
"ligeramente diferente de tareas de empaquetado de Python."

#: ../../package-structure-code/python-package-build-tools.md:93
msgid ""
"For instance, you can use the packaging tools **Flit**, **Hatch** or "
"**PDM** to both build and publish your package to PyPI. However while "
"**Hatch** and **PDM** support versioning and environment management, "
"**Flit** does not. If you want a tool that supports dependency locking, "
"you can use **PDM** or **Poetry** but not **Hatch**. If you only need to "
"build your package's sdist and wheel distribution files, then you can "
"stick with PyPA's Build. You'd then use Twine to publish to PyPI."
msgstr ""
"Por ejemplo, puede utilizar las herramientas de empaquetado **Flit**, **Hatch** o **PDM** "
"tanto para construir como publicar su paquete en PyPI. Sin embargo, mientras **Hatch** y **PDM** "
"admite el versionado y la gestión de entornos, **Flit** no lo hace. Si desea una herramienta "
"que admita el bloqueo de dependencias, puede utilizar **PDM** o **Poetry** pero no **Hatch**. "
"Si solo necesita construir los archivos de distribución sdist y wheel de su paquete, "
"entonces puede quedarse con Build de PyPA. Luego usaría Twine para publicar en PyPI."

#: ../../package-structure-code/python-package-build-tools.md:100
msgid ""
"If you are using **Setuptools**, there is no default user-friendly build "
"front-end that performs multiple tasks. You will need to use **build** to"
" build your package and **twine** to publish to PyPI."
msgstr ""
"Si está utilizando **Setuptools**, no hay un frontend de construcción predeterminado fácil de usar "
"que realice múltiples tareas. Necesitará usar **build** para construir su paquete y **twine** para "
"publicar en PyPI."

#: ../../package-structure-code/python-package-build-tools.md:103
msgid "Example build steps that can be simplified using a front-end tool"
msgstr "Ejemplo de pasos de construcción que se pueden simplificar utilizando una herramienta de frontend"

#: ../../package-structure-code/python-package-build-tools.md:105
msgid ""
"Below, you can see how a build tool streamlines your packaging "
"experience. Example to build your package with **Hatch**:"
msgstr ""
"A continuación, puede ver cómo una herramienta de construcción simplifica su experiencia de empaquetado. "
"Ejemplo para construir su paquete con **Hatch**:"

#: ../../package-structure-code/python-package-build-tools.md:115
msgid "Example build steps using the **setuptools** back-end and **build**:"
msgstr "Ejemplo de pasos de construcción utilizando el backend de **setuptools** y **build**:"

#: ../../package-structure-code/python-package-build-tools.md:125
msgid "Choosing a build back-end"
msgstr "Eligiendo un backend de construcción"

#: ../../package-structure-code/python-package-build-tools.md:127
msgid ""
"Most front-end packaging tools have their own back-end build tool. The "
"build tool creates your package's (sdist and wheel) distribution files. "
"For pure Python packages, the main difference between the different build"
" back-ends discussed below is:"
msgstr ""
"La mayoría de las herramientas de empaquetado de frontend tienen su propia "
"herramienta de construcción de backend. La herramienta de construcción crea los archivos de "
"distribución (sdist y wheel) de su paquete. Para paquetes de Python puro, la principal diferencia "
"entre los diferentes backends de construcción discutidos a continuación es:"

#: ../../package-structure-code/python-package-build-tools.md:132
msgid ""
"How configurable they are - for example, do they allow you to add build "
"steps that support non python extensions?"
msgstr ""
"Qué tan configurables son - por ejemplo, ¿le permiten agregar pasos "
"de construcción que admitan extensiones no Python?"

#: ../../package-structure-code/python-package-build-tools.md:133
msgid ""
"How much you need to configure them to ensure the correct files are "
"included in your sdist and wheel distributions."
msgstr ""
"Cuánto necesita configurarlos para asegurarse de que los archivos correctos "
"se incluyan en sus distribuciones sdist y wheel."

#: ../../package-structure-code/python-package-build-tools.md:135
msgid "Build back-end support for non pure-python packages"
msgstr "Construcción de soporte de backend para paquetes no puros de Python"

#: ../../package-structure-code/python-package-build-tools.md:137
msgid ""
"It is important to note that some build back-ends, such as **Flit-core**,"
" only support pure Python builds. Other back-ends support C and C++ "
"extensions as follows:"
msgstr ""
"Es importante tener en cuenta que algunos backends de construcción, como **Flit-core**, solo admiten "
"construcciones de Python puro. Otros backends admiten extensiones en C y C++ de la siguiente manera:"

#: ../../package-structure-code/python-package-build-tools.md:140
msgid "setuptools supports builds using C / C++ extensions"
msgstr "setuptools admite construcciones utilizando extensiones en C / C++"

#: ../../package-structure-code/python-package-build-tools.md:141
msgid ""
"Hatchling (hatch's back-end) supports C / C++ extensions via plugins that"
" the developer creates to customize a build"
msgstr ""
"Hatchling (backend de hatch) admite extensiones en C / C++ a través de "
"complementos que el desarrollador crea para personalizar una construcción"

#: ../../package-structure-code/python-package-build-tools.md:142
msgid "PDM's back-end supports C / C++ extensions by using setuptools"
msgstr "El backend de PDM admite extensiones en C / C++ utilizando setuptools"

#: ../../package-structure-code/python-package-build-tools.md:143
msgid ""
"Poetry's back-end supports C/C++ extensions however this functionality is"
" currently undocumented. As such we don't recommend using Poetry for "
"complex or non pure Python builds until it is documented."
msgstr ""
"El backend de Poetry admite extensiones en C/C++ sin embargo esta funcionalidad "
"actualmente no está documentada. Por lo tanto, no recomendamos usar Poetry para construcciones "
"complejas o no puras de Python hasta que esté documentada."

#: ../../package-structure-code/python-package-build-tools.md:145
msgid ""
"While we won't discuss more complex builds below, we will identify which "
"tools have documented support for C / C++ extensions."
msgstr ""
"Si bien no discutiremos construcciones más complejas a continuación, identificaremos qué herramientas "
"tienen soporte documentado para extensiones en C / C++."

#: ../../package-structure-code/python-package-build-tools.md:148
msgid "An ecosystem of Python build tools"
msgstr "Un ecosistema de herramientas de construcción de Python"

#: ../../package-structure-code/python-package-build-tools.md:150
msgid ""
"Below we introduce several of the most commonly used Python packaging "
"build front-end tools. We highlight the features that each tool offers as"
" a way to help you decide what tool might be best for your workflow."
msgstr ""
"A continuación, presentamos varias de las herramientas de frontend de construcción de paquetes de Python "
"más comúnmente utilizadas. Destacamos las características que ofrece cada herramienta como una forma de "
"ayudarlo a decidir qué herramienta podría ser la mejor para su flujo de trabajo."

#: ../../package-structure-code/python-package-build-tools.md:154
msgid "We do not suggest using setuptools"
msgstr "No sugerimos usar setuptools"

#: ../../package-structure-code/python-package-build-tools.md:157
msgid ""
"We suggest that you pick one of the modern tools listed above rather than"
" setuptools because setuptools will require some additional knowledge to "
"set up correctly."
msgstr ""
"Sugerimos que elija una de las herramientas modernas discutidas anteriormente en lugar de setuptools "
"porque setuptools requerirá algunos conocimientos adicionales para configurarse correctamente."

#: ../../package-structure-code/python-package-build-tools.md:161
msgid ""
"We review setuptools as a back-end because it is still popular. However "
"it is not the most user friendly option."
msgstr ""
"Revisamos setuptools como backend porque todavía es popular. Sin embargo, "
"no es la opción más amigable para el usuario."

#: ../../package-structure-code/python-package-build-tools.md:165
msgid ""
"The most commonly used tools in the ecosystem are setuptools back-end "
"(with build) and Poetry (a front end tool with numerous features and "
"excellent documentation)."
msgstr ""
"Las herramientas más utilizadas en el ecosistema son el backend de setuptools "
"(con build) y Poetry (una herramienta de frontend con numerosas características y excelente documentación)."

#: ../../package-structure-code/python-package-build-tools.md:171
msgid ""
"Graph showing the results of the 2022 PyPA survey of Python packaging "
"tools. On the x axis is percent response and on the y axis are the tools."
msgstr ""
"Gráfico que muestra los resultados de la encuesta de PyPA 2022 de herramientas de empaquetado de Python. "
"En el eje x está la respuesta porcentual y en el eje y están las herramientas."

#: ../../package-structure-code/python-package-build-tools.md:173
msgid ""
"The Python developers survey results (n=>8,000 PyPI users) show "
"setuptools and poetry as the most commonly used Python packaging tools. "
"The core tools that we've seen being used in the scientific community are"
" included here. [You can view the full survey results by clicking "
"here.](https://drive.google.com/file/d/1U5d5SiXLVkzDpS0i1dJIA4Hu5Qg704T9/view)"
" NOTE: this data represent maintainers across domains and is likely "
"heavily represented by those in web development. So this represents a "
"snapshot across the broader Python ecosystem."
msgstr ""
"Los resultados de la encuesta de desarrolladores de Python (n => 8,000 usuarios de PyPI) muestran "
"setuptools y poetry como las herramientas de empaquetado de Python más utilizadas. Las herramientas "
"centrales que hemos visto que se utilizan en la comunidad científica están incluidas aquí. "
"[Puede ver los resultados completos de la encuesta haciendo clic aquí.](https://drive.google.com/file/d/1U5d5SiXLVkzDpS0i1dJIA4Hu5Qg704T9/view) "
"NOTA: estos datos representan a los mantenedores en todos los dominios y es probable que estén "
"fuertemente representados por aquellos en desarrollo web. Por lo tanto, esto representa una instantánea "
"de todo el ecosistema de Python."

#: ../../package-structure-code/python-package-build-tools.md:176
msgid "Chose a build workflow tool"
msgstr "Elige una herramienta de flujo de trabajo de construcción"

#: ../../package-structure-code/python-package-build-tools.md:178
msgid "The tools that we review below include:"
msgstr "Las herramientas que revisamos a continuación incluyen:"

#: ../../package-structure-code/python-package-build-tools.md:180
msgid "Twine, Build + setuptools"
msgstr "Twine, Build + setuptools"

#: ../../package-structure-code/python-package-build-tools.md:181
#: ../../package-structure-code/python-package-build-tools.md:291
msgid "Flit"
msgstr "Flit"

#: ../../package-structure-code/python-package-build-tools.md:182
#: ../../package-structure-code/python-package-build-tools.md:331
msgid "Hatch"
msgstr "Hatch"

#: ../../package-structure-code/python-package-build-tools.md:183
#: ../../package-structure-code/python-package-build-tools.md:215
#: ../../package-structure-code/python-package-build-tools.md:230
msgid "PDM"
msgstr "PDM"

#: ../../package-structure-code/python-package-build-tools.md:184
#: ../../package-structure-code/python-package-build-tools.md:374
msgid "Poetry"
msgstr "Poetry"

#: ../../package-structure-code/python-package-build-tools.md:186
msgid ""
"When you are selecting a tool, you might consider this general workflow "
"of questions:"
msgstr ""
"Cuando esté seleccionando una herramienta, puede considerar este flujo de preguntas:"

#: ../../package-structure-code/python-package-build-tools.md:189
msgid ""
"**Is your tool pure python? Yes?** You can use any tool that you wish! "
"Pick the tool that has the features that you want to use in your build "
"workflow. We suggest:"
msgstr ""
"**¿Es su herramienta de Python puro? ¿Sí?** ¡Puede usar la herramienta que desee! Elija la herramienta "
"que tenga las características que desea utilizar en su flujo de trabajo de construcción. Sugerimos:"

#: ../../package-structure-code/python-package-build-tools.md:191
msgid "Flit, Hatch, PDM or Poetry (read below for more)"
msgstr "Flit, Hatch, PDM or Poetry (read below for more)"

#: ../../package-structure-code/python-package-build-tools.md:193
msgid ""
"**Does your tool have a few C or C++ extensions?** Great, we suggest "
"using **PDM** for the time being. It is the only tool in the list below "
"that has both documented workflow to support such extensions and support "
"for other back-ends in the case that build hooks are not enough for your "
"workflow. PDM supports other back-ends such as scikit-build and meson-"
"python that will allow you to fully customize your package's build."
msgstr ""
"**¿Tiene su herramienta unas pocas extensiones en C o C++?** Genial, sugerimos usar **PDM** por el momento. "
"Es la única herramienta en la lista a continuación que tiene tanto un flujo de trabajo documentado para "
"apoyar tales extensiones como soporte para otros backends en el caso de que los hooks de construcción no sean "
"suficientes para su flujo de trabajo. PDM admite otros backends como scikit-build y meson-python que le permitirán "
"personalizar completamente la construcción de su paquete."

#: ../../package-structure-code/python-package-build-tools.md:197
msgid ""
"NOTE: You can also use Hatch for non pure python builds. Hatch, similar "
"to PDM, allows you to write your own build hooks or plugins to support "
"custom build steps. But currently, hatch does not support other build "
"back ends. Many of the core scientific packages are moving to meson-"
"python to build their packages. Thus, we appreciate that PDM can work "
"with meson-python specifically."
msgstr ""
"NOTA: También puede usar Hatch para construcciones no puras de Python. Hatch, similar a PDM, le permite "
"escribir sus propios hooks de construcción o complementos para admitir pasos de construcción personalizados. "
"Pero actualmente, hatch no admite otros backends de construcción. Muchos de los paquetes científicos principales "
"se están cambiando a meson-python para construir sus paquetes. Por lo tanto, apreciamos que PDM pueda trabajar "
"con meson-python específicamente."

#: ../../package-structure-code/python-package-build-tools.md:199
msgid "Python packaging tools summary"
msgstr "Resumen de herramientas de empaquetado de Python"

#: ../../package-structure-code/python-package-build-tools.md:201
msgid ""
"Below, we summarize features offered by the most popular build front end "
"tools. It is important to keep in mind that these front-end tools remove "
"the need to use other core tools in your workflow. For example if you use"
" setuptools, you will need to also use Build and Twine to build your "
"package and publish to PyPI. But if you use Poetry, Hatch or PDM you can "
"do all of those things using the same tool (e.g. `hatch build`, `hatch "
"publish` or `pdm build`, `pdm publish`)."
msgstr ""
"A continuación, resumimos las características ofrecidas por las herramientas de frontend de construcción "
"más populares. Es importante tener en cuenta que estas herramientas de frontend eliminan la necesidad de "
"usar otras herramientas centrales en su flujo de trabajo. Por ejemplo, si usa setuptools, también necesitará "
"usar Build y Twine para construir su paquete y publicar en PyPI. Pero si usa Poetry, Hatch o PDM, puede hacer "
"todas esas cosas con la misma herramienta (por ejemplo, `hatch build`, `hatch publish` o `pdm build`, `pdm publish`)."

#: ../../package-structure-code/python-package-build-tools.md:204
msgid ""
"Note that because setuptools does not offer a front-end interface, it is "
"not included in the table."
msgstr ""
"Note que debido a que setuptools no ofrece una interfaz de frontend, no se incluye en la tabla."

#: ../../package-structure-code/python-package-build-tools.md:208
msgid "Package tool features table"
msgstr "Tabla de características de las herramientas de empaquetado"

#: ../../package-structure-code/python-package-build-tools.md:215
msgid "Feature, Flit, Hatch, PDM, Poetry"
msgstr "Feature, Flit, Hatch, PDM, Poetry"

#: ../../package-structure-code/python-package-build-tools.md:215
msgid "Default Build Back-end"
msgstr "Backend de construcción predeterminado"

#: ../../package-structure-code/python-package-build-tools.md:215
msgid "Flit-core"
msgstr ""

#: ../../package-structure-code/python-package-build-tools.md:215
msgid "hatchling"
msgstr ""

#: ../../package-structure-code/python-package-build-tools.md:215
msgid "Poetry-core"
msgstr ""

#: ../../package-structure-code/python-package-build-tools.md:215
#: ../../package-structure-code/python-package-build-tools.md:251
#: ../../package-structure-code/python-package-build-tools.md:348
msgid "Use Other Build Backends"
msgstr "Usar otros backends de construcción"

#: ../../package-structure-code/python-package-build-tools.md:215
#: ../../package-structure-code/python-package-build-tools.md:348
msgid "✖"
msgstr ""

#: ../../package-structure-code/python-package-build-tools.md:215
#: ../../package-structure-code/python-package-build-tools.md:251
#: ../../package-structure-code/python-package-build-tools.md:304
#: ../../package-structure-code/python-package-build-tools.md:348
#: ../../package-structure-code/python-package-build-tools.md:392
msgid "✅"
msgstr ""

#: ../../package-structure-code/python-package-build-tools.md:215
#: ../../package-structure-code/python-package-build-tools.md:348
msgid "Dependency management"
msgstr "Gestión de dependencias"

#: ../../package-structure-code/python-package-build-tools.md:215
#: ../../package-structure-code/python-package-build-tools.md:251
msgid "Publish to PyPI"
msgstr "Publicar en PyPI"

#: ../../package-structure-code/python-package-build-tools.md:215
msgid "Version Control based versioning (using `git tags`)"
msgstr "Versionado basado en control de versiones (usando `git tags`)"

#: ../../package-structure-code/python-package-build-tools.md:215
#: ../../package-structure-code/python-package-build-tools.md:251
#: ../../package-structure-code/python-package-build-tools.md:348
#: ../../package-structure-code/python-package-build-tools.md:392
msgid "Version bumping"
msgstr "Incremento de versión"

#: ../../package-structure-code/python-package-build-tools.md:215
#: ../../package-structure-code/python-package-build-tools.md:348
msgid "Environment Management"
msgstr "Gestión de entornos"

#: ../../package-structure-code/python-package-build-tools.md:215
msgid "More than one maintainer? (bus factor)"
msgstr "¿Más de un mantenedor? (factor bus)"

#: ../../package-structure-code/python-package-build-tools.md:225
msgid "Notes:"
msgstr "Notas:"

#: ../../package-structure-code/python-package-build-tools.md:227
msgid "_Hatch plans to support dependency management in the future_"
msgstr "_Hatch planea admitir la gestión de dependencias en el futuro_"

#: ../../package-structure-code/python-package-build-tools.md:228
msgid ""
"Poetry supports semantic versioning. Thus, it will support version "
"bumping following commit messages if you use a tool such as Python "
"Semantic Release"
msgstr ""
"Poetry admite versionado semántico. Por lo tanto, admitirá el incremento"
" de versión siguiendo los mensajes de confirmación "
"si utiliza una herramienta como Python Semantic Release"

#: ../../package-structure-code/python-package-build-tools.md:232
msgid ""
"[PDM is a Python packaging and dependency management "
"tool](https://pdm.fming.dev/latest/). PDM supports builds for pure Python"
" projects. It also provides multiple layers of support for projects that "
"have C and C++ extensions."
msgstr ""
"[PDM es una herramienta de empaquetado y gestión de dependencias de Python](https://pdm.fming.dev/latest/). "
"PDM admite construcciones para proyectos de Python puro. También proporciona múltiples capas de soporte "
"para proyectos que tienen extensiones en C y C++."

#: ../../package-structure-code/python-package-build-tools.md:236
msgid "PDM support for C and C++ extensions"
msgstr "PDM admite extensiones en C y C++"

#: ../../package-structure-code/python-package-build-tools.md:238
msgid ""
"PDM supports using the PDM-back-end and setuptools at the same time. This"
" means that you can run setuptools to compile and build C extensions. "
"PDM's build back-end receives the compiled extension files (.so, .pyd) "
"and packages them with the pure Python files."
msgstr ""
"PDM admite el uso del backend de PDM y setuptools al mismo tiempo. Esto significa que puede ejecutar "
"setuptools para compilar y construir extensiones en C. El backend de construcción de PDM recibe los archivos "
"de extensión compilados (.so, .pyd) y los empaqueta con los archivos de Python puro."

#: ../../package-structure-code/python-package-build-tools.md:244
msgid "PDM Features"
msgstr "Características de PDM"

#: ../../package-structure-code/python-package-build-tools.md:251
msgid "Feature, PDM, Notes"
msgstr "Característica, PDM, Notas"

#: ../../package-structure-code/python-package-build-tools.md:251
msgid ""
"When you setup PDM it allows you to select one of several build back ends"
" including: PDM-core, flit-core and hatchling. PDM also can work with "
"Meson-Python which supports move complex python builds."
msgstr ""
"Cuando configura PDM, le permite seleccionar uno de varios backends de construcción, incluidos: PDM-core, "
"flit-core y hatchling. PDM también puede trabajar con Meson-Python que admite construcciones de Python más complejas."

#: ../../package-structure-code/python-package-build-tools.md:251
msgid "Dependency specifications"
msgstr "Especificaciones de dependencias"

#: ../../package-structure-code/python-package-build-tools.md:251
msgid ""
"PDM has flexible support for  managing dependencies. PDM defaults to "
"using an open bound (e.g. `requests >=1.2`) approach to dependencies. "
"However you can  [customize how you want to add dependencies in case you "
"prefer another approach such as that of Poetry which uses an upper bound "
"limit](https://pdm.fming.dev/latest/usage/dependency/#about-update-"
"strategy).**"
msgstr ""
"PDM tiene un soporte flexible para la gestión de dependencias. PDM por defecto utiliza un enfoque de límite "
"abierto (por ejemplo, `requests >=1.2`) para las dependencias. Sin embargo, puede [personalizar cómo desea "
"agregar dependencias en caso de que prefiera otro enfoque como el de Poetry que utiliza un límite superior]"
"(https://pdm.fming.dev/latest/usage/dependency/#about-update-strategy)."

#: ../../package-structure-code/python-package-build-tools.md:251
msgid "Environment lock files"
msgstr "Archivos de bloqueo de entorno"

#: ../../package-structure-code/python-package-build-tools.md:251
msgid ""
"PDM and Poetry are currently the only tools that create environment lock "
"files. Lock files are often most useful to developers creating web apps "
"where locking the environment is critical for consistent user experience."
" For community-used packages, you will likely never want to use a lock "
"file."
msgstr ""
"PDM y Poetry son actualmente las únicas herramientas que crean archivos de bloqueo de entorno. "
"Los archivos de bloqueo son más útiles para los desarrolladores que crean aplicaciones web donde "
"bloquear el entorno es crítico para una experiencia de usuario consistente. Para paquetes utilizados "
"por la comunidad, es probable que nunca desee usar un archivo de bloqueo."

#: ../../package-structure-code/python-package-build-tools.md:251
#: ../../package-structure-code/python-package-build-tools.md:392
msgid "Environment management"
msgstr "Gestión de entornos"

#: ../../package-structure-code/python-package-build-tools.md:251
msgid ""
"PDM provides environment management support. It supports Python virtual "
"environments, conda and a local `__pypackages__` environment which is a "
"newer option in the Python ecosystem. No extensions are needed for this "
"support."
msgstr ""
"PDM proporciona soporte de gestión de entornos. Admite entornos virtuales de Python, conda y un entorno "
"local `__pypackages__` que es una opción más nueva en el ecosistema de Python. No se necesitan extensiones "
"para este soporte."

#: ../../package-structure-code/python-package-build-tools.md:251
msgid "Select your environment type on install"
msgstr "Seleccione su tipo de entorno en la instalación"

#: ../../package-structure-code/python-package-build-tools.md:251
msgid ""
"When you run `PDM init`, PDM will discover environments that are already "
"on your system and allow you to select one to use for your project."
msgstr ""
"Cuando ejecuta `PDM init`, PDM descubrirá los entornos que ya están en su sistema y le permitirá seleccionar "
"uno para usar en su proyecto."

#: ../../package-structure-code/python-package-build-tools.md:251
msgid "PDM supports publishing to both test PyPI and PyPI"
msgstr "PDM admite la publicación tanto en test PyPI como en PyPI"

#: ../../package-structure-code/python-package-build-tools.md:251
#: ../../package-structure-code/python-package-build-tools.md:348
#: ../../package-structure-code/python-package-build-tools.md:392
msgid "Version Control based versioning"
msgstr "Versionado basado en control de versiones"

#: ../../package-structure-code/python-package-build-tools.md:251
msgid ""
"PDM has a setuptools_scm like tool built into it which allows you to use "
"dynamic versioning that rely on git tags."
msgstr ""
"PDM tiene una herramienta similar a setuptools_scm integrada en ella "
"que le permite usar versiones dinámicas "

#: ../../package-structure-code/python-package-build-tools.md:251
msgid ""
"PDM supports you bumping the version of your package using standard "
"semantic version terms patch; minor; major"
msgstr ""
"PDM le permite incrementar la versión de su paquete utilizando términos"
" de versión semántica estándar patch; minor; major"

#: ../../package-structure-code/python-package-build-tools.md:251
#: ../../package-structure-code/python-package-build-tools.md:304
#: ../../package-structure-code/python-package-build-tools.md:348
#: ../../package-structure-code/python-package-build-tools.md:392
msgid "Follows current packaging standards"
msgstr "Sigue los estándares de empaquetado actuales"

#: ../../package-structure-code/python-package-build-tools.md:251
msgid ""
"PDM supports current packaging standards for adding metadata to the "
"**pyproject.toml** file."
msgstr ""
"PDM admite los estándares de empaquetado actuales para agregar metadatos "
"al archivo **pyproject.toml**."

#: ../../package-structure-code/python-package-build-tools.md:251
#: ../../package-structure-code/python-package-build-tools.md:304
#: ../../package-structure-code/python-package-build-tools.md:348
#: ../../package-structure-code/python-package-build-tools.md:392
msgid "Install your package in editable mode"
msgstr "Instalar su paquete en modo editable"

#: ../../package-structure-code/python-package-build-tools.md:251
msgid "PDM supports installing your package in editable mode."
msgstr "PDM admite instalar su paquete en modo editable."

#: ../../package-structure-code/python-package-build-tools.md:251
#: ../../package-structure-code/python-package-build-tools.md:304
#: ../../package-structure-code/python-package-build-tools.md:348
#: ../../package-structure-code/python-package-build-tools.md:392
msgid "Build your sdist and wheel distributions"
msgstr "Construir sus distribuciones sdist y wheel"

#: ../../package-structure-code/python-package-build-tools.md:251
msgid ""
"Similar to all of the other tools PDM builds your packages sdist and "
"wheel files for you."
msgstr ""
"Al igual que todas las demás herramientas, PDM también construye los archivos sdist "
"y wheel de sus paquetes."

#: ../../package-structure-code/python-package-build-tools.md:264
msgid "PDM vs. Poetry"
msgstr "PDM vs. Poetry"

#: ../../package-structure-code/python-package-build-tools.md:265
msgid ""
"The functionality of PDM is similar to Poetry. However, PDM also offers "
"additional, documented support for C extensions and version control based"
" versioning. As such, PDM is preferred for those working on non pure-"
"Python packages."
msgstr ""
"La funcionalidad de PDM es similar a la de Poetry. Sin embargo, PDM también "
"ofrece soporte adicional y documentado para extensiones en C y versionado basado en control de versiones. "
"Por lo tanto, PDM es preferido para aquellos que trabajan en paquetes no puros de Python."

#: ../../package-structure-code/python-package-build-tools.md:269
msgid ""
"If you are deciding between the Poetry and PDM, a smaller  difference is "
"the default way that dependencies are added to your pyproject.toml file."
msgstr ""
"Sí está decidiendo entre Poetry y PDM, una diferencia más pequeña es la forma predeterminada en que se "
"agregan las dependencias a su archivo pyproject.toml."

#: ../../package-structure-code/python-package-build-tools.md:271
msgid ""
"Poetry by default follows strict semantic versioning adding dependencies "
"to your pyproject.toml file [using an upper bounds constraint "
"(`^`)](https://python-poetry.org/docs/dependency-specification/#version-"
"constraints). Upper bounds lock means that Poetry will never bump a "
"dependency to the next major version (i.e. from 1.2 to 2.0). However, you"
" can tell Poetry to use an open bound approach by explicitly adding the "
"package like this: `poetry add requests >= 1.2` rather than just using "
"`poetry add requests` which will result in a upper bound locked (ie Upper"
" bound locks means that requests 2.0 could never be installed even if it "
"came out and your package could benefit from it)."
msgstr ""
"Poetry por defecto sigue un versionado semántico estricto agregando dependencias a su archivo pyproject.toml "
"[usando una restricción de límite superior (`^`)](https://python-poetry.org/docs/dependency-specification/#version-constraints). "
"El bloqueo de límite superior significa que Poetry nunca incrementará una dependencia a la siguiente versión "
"principal (es decir, de 1.2 a 2.0). Sin embargo, puede indicarle a Poetry que use un enfoque de límite abierto "
"agregando explícitamente el paquete de esta manera: `poetry add requests >= 1.2` en lugar de simplemente usar "
"`poetry add requests` que resultará en un bloqueo de límite superior (es decir, los bloqueos de límite superior "
"significan que requests 2.0 nunca se podría instalar incluso si saliera y su paquete pudiera beneficiarse de ello)."

#: ../../package-structure-code/python-package-build-tools.md:272
msgid ""
"PDM defaults to open-bounds (`>=`) dependency additions which is the "
"preferred approach in the scientific python ecosystem. However, PDM also "
"allows you to specify the way dependencies are added by default. As such,"
" you can also specify upper-bounds (`^`) using PDM if require that "
"approach."
msgstr ""
"PDM por defecto utiliza la adición de dependencias de límites "
"abiertos (`>=`) que es el enfoque preferido en el "
"ecosistema de Python científico. Sin embargo, PDM también le permite "
"especificar la forma en que se agregan las dependencias de forma predeterminada. Por lo tanto, también puede "
"especificar límites superiores (`^`) utilizando PDM si requiere ese enfoque."

#: ../../package-structure-code/python-package-build-tools.md:274
msgid ""
"Finally there are some nuanced differences in how both tools create lock "
"files which we will not go into detail about here."
msgstr ""
"Finalmente, hay algunas diferencias matizadas en cómo ambas herramientas crean archivos de bloqueo de los que "
"no entraremos en detalles aquí."

#: ../../package-structure-code/python-package-build-tools.md:277
msgid "Challenges with PDM"
msgstr "Dificultades con PDM"

#: ../../package-structure-code/python-package-build-tools.md:279
msgid ""
"PDM is a full-featured packaging tool. However it is not without "
"challenges:"
msgstr ""
"PDM es una herramienta de empaquetado completa. Sin embargo, no está exenta de dificultades:"

#: ../../package-structure-code/python-package-build-tools.md:281
msgid ""
"Its documentation can be confusing, especially if you are new to "
"packaging. For example, PDM doesn't provide an end to end beginning "
"workflow in its documentation."
msgstr ""
"Su documentación puede ser confusa, especialmente si eres nuevo en el "
"empaquetado. Por ejemplo, PDM no proporciona "
"un flujo de trabajo de principio a fin en su documentación."

#: ../../package-structure-code/python-package-build-tools.md:283
msgid ""
"PDM also only has one maintainer currently. We consider individual "
"maintainer teams to be a potential risk. If the maintainer finds they no "
"longer have time to work on the project, it leaves users with a gap in "
"support. Hatch and Flit also have single maintainer teams."
msgstr ""
"PDM solo tiene un mantenedor actualmente. Consideramos que los equipos de mantenedores con una sola persona "
"son un riesgo potencial. Si el mantenedor decide que ya no tiene tiempo para trabajar en el proyecto, "
"deja a los usuarios sin soporte. Hatch y Flit también tienen equipos de un solo mantenedor."

#: ../../package-structure-code/python-package-build-tools.md:288
msgid ""
"[You can view an example of a package that uses PDM "
"here](https://github.com/pyOpenSci/examplePy/tree/main/example4_pdm). The"
" README file for this directly provides you with an overview of what the "
"PDM command line interface looks like when you use it."
msgstr ""
"[Puede ver un ejemplo de un paquete que usa PDM aquí]("
"https://github.com/pyOpenSci/examplePy/tree/main/example4_pdm)."
" El archivo README de este le proporciona directamente una descripción "
"general de cómo se ve la interfaz de línea de comandos de PDM cuando la usa."

#: ../../package-structure-code/python-package-build-tools.md:293
msgid ""
"[Flit is a no-frills, streamlined packaging "
"tool](https://flit.pypa.io/en/stable/) that supports modern Python "
"packaging standards. Flit is a great choice if you are building a basic "
"package to use in a local workflow that doesn't require any advanced "
"features. And if your package structure is already created. More on that "
"below."
msgstr ""
"[Flit es una herramienta de empaquetado sin adornos y simplificada](https://flit.pypa.io/en/stable/) "
"que admite los estándares de empaquetado de Python modernos. Flit es una excelente opción si está construyendo "
"un paquete básico para usar en un flujo de trabajo local que no requiere ninguna característica avanzada. "
"Y si su estructura de paquete ya está creada. Más sobre eso a continuación."

#: ../../package-structure-code/python-package-build-tools.md:297
msgid "Flit Features"
msgstr "Características de Flit"

#: ../../package-structure-code/python-package-build-tools.md:304
msgid "Feature, Flit, Notes"
msgstr "Feature, Flit, Notes"

#: ../../package-structure-code/python-package-build-tools.md:304
#: ../../package-structure-code/python-package-build-tools.md:348
#: ../../package-structure-code/python-package-build-tools.md:392
msgid "Publish to PyPI and test PyPI"
msgstr "Publicar en PyPI y test PyPI"

#: ../../package-structure-code/python-package-build-tools.md:304
msgid "Flit supports publishing to both test PyPI and PyPI"
msgstr "Flit admite la publicación tanto en test PyPI como en PyPI"

#: ../../package-structure-code/python-package-build-tools.md:304
msgid "Helps you add metadata to your **pyproject.toml** file"
msgstr "Ayuda a agregar metadatos a su archivo **pyproject.toml**"

#: ../../package-structure-code/python-package-build-tools.md:304
msgid ""
"Flit does support adding metadata to your **pyproject.toml** file "
"following modern packaging standards."
msgstr ""
"Flit admite agregar metadatos a su archivo **pyproject.toml** "
"siguiendo los estándares de empaquetado modernos."

#: ../../package-structure-code/python-package-build-tools.md:304
msgid ""
"Flit supports current packaging standards for adding metadata to the "
"**pyproject.toml** file."
msgstr ""
"Flit admite los estándares de empaquetado actuales para agregar metadatos "
"al archivo **pyproject.toml**."

#: ../../package-structure-code/python-package-build-tools.md:304
msgid "Flit supports installing your package in editable mode.**"
msgstr "Flit admite instalar su paquete en modo editable."

#: ../../package-structure-code/python-package-build-tools.md:304
msgid "Flit can be used to build your packages sdist and wheel distributions."
msgstr "Flit se puede usar para construir las distribuciones sdist y wheel de sus paquetes."

#: ../../package-structure-code/python-package-build-tools.md:311
msgid ""
"NOTE: _If you are using the most current version of pip, it supports both"
" a symlink approach `flit install -s` and `python -m pip install -e .`_"
msgstr ""
"NOTA: _Si está utilizando la versión más actual de pip, admite tanto un "
"enfoque de enlace simbólico `flit install -s` "

#: ../../package-structure-code/python-package-build-tools.md:313
msgid "Learn more about flit"
msgstr "Aprende más sobre flit"

#: ../../package-structure-code/python-package-build-tools.md:314
msgid "[Why use flit?](https://flit.pypa.io/en/stable/rationale.html)"
msgstr "[¿Por qué usar flit?](https://flit.pypa.io/en/stable/rationale.html)"

#: ../../package-structure-code/python-package-build-tools.md:317
msgid "Why you might not want to use Flit"
msgstr "¿Por qué no querrías usar Flit"

#: ../../package-structure-code/python-package-build-tools.md:319
msgid ""
"Because Flit is no frills, it is best for basic, quick builds. If you are"
" a beginner you may want to select Hatch or PDM which will offer you more"
" support in common operations."
msgstr ""
"Debido a que Flit no tiene adornos, es mejor para construcciones básicas y rápidas. Si eres un principiante, "
"puede que quieras seleccionar Hatch o PDM que te ofrecerán más soporte en operaciones comunes."

#: ../../package-structure-code/python-package-build-tools.md:323
msgid "You may NOT want to use flit if:"
msgstr "Quizás NO quieras usar flit si:"

#: ../../package-structure-code/python-package-build-tools.md:325
msgid ""
"You want to setup more advanced version tracking and management (using "
"version control for version bumping)"
msgstr ""
"Quieres configurar un seguimiento y gestión de versiones más avanzado"
" (usando control de versiones para incrementar versiones)"

#: ../../package-structure-code/python-package-build-tools.md:326
msgid ""
"You want a tool that handles dependency versions (use PDM or Poetry "
"instead)"
msgstr ""
"Quieres una herramienta que maneje las versiones de las"
" dependencias (usa PDM o Poetry en su lugar)"

#: ../../package-structure-code/python-package-build-tools.md:327
msgid "You have a project that is not pure Python (Use Hatch, PDM or setuptools)"
msgstr "Tienes un proyecto que no es Python puro (Usa Hatch, PDM o setuptools)"

#: ../../package-structure-code/python-package-build-tools.md:328
msgid "You want environment management (use PDM, Hatch or Poetry)"
msgstr "Quieres gestión de entornos (usa PDM, Hatch o Poetry)"

#: ../../package-structure-code/python-package-build-tools.md:333
msgid ""
"[**Hatch**](https://hatch.pypa.io/latest/), similar to Poetry and PDM, "
"provides a unified command line interface. To separate Hatch from Poetry "
"and PDM, it also provides an environment manager for testing that will "
"make it easier for you to run tests locally across different versions of "
"Python. It also offers a nox / makefile like feature that allows you to "
"create custom build workflows such as building your documentation "
"locally. This means that you could potentially drop a tool like **Make** "
"or **Nox** from your workflow and use Hatch instead."
msgstr ""
"[**Hatch**](https://hatch.pypa.io/latest/), similar a Poetry y PDM, "
"proporciona una interfaz de línea de comandos unificada. Para contrastar Hatch con Poetry y PDM, este también "
"proporciona un gestor de entornos para tests que le facilitará la ejecución de tests localmente en "
"diferentes versiones de Python. También ofrece una característica similar a nox / makefile que le permite "
"crear flujos de trabajo de construcción personalizados como construir su documentación localmente. Esto "
"significa que potencialmente podría eliminar una herramienta como **Make** o **Nox** de su flujo de trabajo "
"y usar Hatch en su lugar."

#: ../../package-structure-code/python-package-build-tools.md:340
msgid "Hatch features"
msgstr "Características de Hatch"

#: ../../package-structure-code/python-package-build-tools.md:348
msgid "Feature, Hatch, Notes"
msgstr "Característica, Hatch, Notas"

#: ../../package-structure-code/python-package-build-tools.md:348
msgid ""
"Hatch is used with the backend Hatchling by default, but allows you to "
"use another backend by switching the declaration in pyproject.toml."
msgstr ""
"Hatch utiliza el backend Hatchling de forma predeterminada, pero le"
" permite usar otro backend cambiando "
"la declaración en pyproject.toml."

#: ../../package-structure-code/python-package-build-tools.md:348
msgid ""
"Currently you have to add dependencies manually with Hatch. However a "
"feature to support dependencies management may be added in a future "
"release."
msgstr ""
"Actualmente, tiene que agregar dependencias manualmente con Hatch. Sin embargo, una característica para "
"soportar la gestión de dependencias puede ser agregada en una versión futura."

#: ../../package-structure-code/python-package-build-tools.md:348
msgid ""
"Hatch supports Python virtual environments. If you wish to use other "
"types of environments such as Conda, you will need to [install a plugin "
"such as hatch-conda for conda support](https://github.com/OldGrumpyViking"
"/hatch-conda)."
msgstr ""
"Hatch admite entornos virtuales de Python. Si desea usar otros tipos de entornos como Conda, necesitará "
"[instalar un plugin como hatch-conda para soporte de conda](https://github.com/OldGrumpyViking"
"/hatch-conda)."

#: ../../package-structure-code/python-package-build-tools.md:348
msgid "Hatch supports publishing to both test PyPI and PyPI"
msgstr "Hatch admite la publicación tanto en test PyPI como en PyPI"

#: ../../package-structure-code/python-package-build-tools.md:348
msgid ""
"Hatch offers `hatch_vcs` which is a plugin that uses setuptools_scm to "
"support versioning using git tags. The workflow with `hatch_vcs` is the "
"same as that with `setuptools_scm`."
msgstr ""
"Hatch ofrece `hatch_vcs` que es un plugin que utiliza setuptools_scm para "
"soportar el versionado utilizando etiquetas de git. El flujo de trabajo con "
"`hatch_vcs` es el mismo que con `setuptools_scm`."

#: ../../package-structure-code/python-package-build-tools.md:348
msgid ""
"Hatch supports you bumping the version of your package using standard "
"semantic version terms patch; minor; major"
msgstr ""
"Hatch le permite incrementar la versión de su paquete utilizando términos "
"de versión semántica estándar patch; minor; major"

#: ../../package-structure-code/python-package-build-tools.md:348
msgid ""
"Hatch supports current packaging standards for adding metadata to the "
"**pyproject.toml** file."
msgstr ""
"Hatch admite los estándares de empaquetado actuales para agregar metadatos "
"al archivo **pyproject.toml**."

#: ../../package-structure-code/python-package-build-tools.md:348
msgid ""
"Hatch will install your package into any of its environments by default "
"in editable mode. You can install your package in editable mode manually "
"using `python -m pip install -e .` Hatch mentions [editable "
"installs](https://hatch.pypa.io/latest/config/build/#dev-mode) but refers"
" to pip in its documentation."
msgstr ""
"Hatch instalará su paquete en cualquiera de sus entornos de forma predeterminada en modo editable. "
"Puede instalar su paquete en modo editable manualmente utilizando `python -m pip install -e .` Hatch menciona "
"[instalaciones en modo editable](https://hatch.pypa.io/latest/config/build/#dev-mode) pero se refiere a pip en su documentación."

#: ../../package-structure-code/python-package-build-tools.md:348
msgid "Hatch will build the sdist and wheel distributions"
msgstr "Hatch construirá las distribuciones sdist y wheel"

#: ../../package-structure-code/python-package-build-tools.md:348
msgid "✨Matrix environment creation to support testing across Python versions✨"
msgstr "✨Creación de entorno de matriz para soportar testing en diferentes versiones de Python✨"

#: ../../package-structure-code/python-package-build-tools.md:348
msgid ""
"The matrix environment creation is a feature that is unique to Hatch in "
"the packaging ecosystem. This feature is useful if you wish to test your "
"package locally across Python versions (instead of using a tool such as "
"tox)."
msgstr ""
"La creación de entorno de matriz es una característica única de Hatch en el ecosistema de empaquetado. "
"Esta característica es útil si desea probar su paquete localmente en diferentes versiones de Python (en lugar de "
"usar una herramienta como tox)."

#: ../../package-structure-code/python-package-build-tools.md:348
msgid ""
"✨[Nox / MAKEFILE like "
"functionality](https://hatch.pypa.io/latest/environment/#selection)✨"
msgstr ""
"✨[Funcionalidad similar a Nox / MAKEFILE](https://hatch.pypa.io/latest/environment/#selection)✨"

#: ../../package-structure-code/python-package-build-tools.md:348
msgid ""
"This feature is also unique to Hatch. This functionality allows you to "
"create workflows in the **pyproject.toml** configuration to do things "
"like serve docs locally and clean your package build directory. This "
"means you may have one less tool in your build workflow."
msgstr ""
"Esta característica también es única de Hatch. Esta funcionalidad le permite crear flujos de trabajo en la "
"configuración **pyproject.toml** para hacer cosas como servir documentos localmente y limpiar el directorio de "
"construcción de su paquete. Esto significa que puede tener una herramienta menos en su flujo de trabajo de construcción."

#: ../../package-structure-code/python-package-build-tools.md:348
msgid "✨A flexible build backend: **hatchling**✨"
msgstr "✨Un backend de construcción flexible: **hatchling**✨"

#: ../../package-structure-code/python-package-build-tools.md:348
msgid ""
"**The hatchling build backend offered by the maintainer of Hatch allows "
"developers to easily build plugins to support custom build steps when "
"packaging."
msgstr ""
"**El backend de construcción hatchling ofrecido por el mantenedor "
"de Hatch permite a los desarrolladores construir fácilmente plugins para "
"soportar pasos de construcción personalizados al empaquetar."

#: ../../package-structure-code/python-package-build-tools.md:362
msgid ""
"_There is some argument about this approach placing a burden on "
"maintainers to create a custom build system. But others appreciate the "
"flexibility. The Hatch build hook approach is also comparable with the "
"features offered by PDM._"
msgstr ""
"_Hay algunos argumentos sobre este enfoque que coloca una carga en los "
"mantenedores para crear un sistema de construcción personalizado. Pero "
"otros aprecian la flexibilidad. El enfoque de hooks de construcción de "
"Hatch también es comparable con las características ofrecidas por PDM._"

#: ../../package-structure-code/python-package-build-tools.md:364
msgid "Why you might not want to use Hatch"
msgstr "¿Por qué no querría usar Hatch?"

#: ../../package-structure-code/python-package-build-tools.md:366
msgid ""
"There are a few features that hatch is missing that may be important for "
"some. These include:"
msgstr ""
"Hay algunas características que Hatch no tiene y que pueden ser importantes para algunos. Estas incluyen:"

#: ../../package-structure-code/python-package-build-tools.md:369
msgid ""
"Hatch doesn't support adding dependencies. You will have to add them "
"manually."
msgstr ""
"Hatch no admite agregar dependencias. Tendrá que agregarlas manualmente."

#: ../../package-structure-code/python-package-build-tools.md:370
msgid "Hatch won't by default recognize Conda environments without a plugin."
msgstr "Hatch no reconocerá por defecto los entornos de Conda sin un plugin."

#: ../../package-structure-code/python-package-build-tools.md:371
msgid ""
"Similar to PDM, Hatch's documentation can difficult to work through, "
"particularly if you are just getting started with creating a package."
msgstr ""
"Al igual que PDM, la documentación de Hatch puede ser difícil de utilizar,"
" especialmente si eres nuevo en la construcción de paquete."

#: ../../package-structure-code/python-package-build-tools.md:372
msgid "Hatch, similar to PDM and Flit currently only has one maintainer."
msgstr "Hatch, al igual que PDM y Flit, actualmente solo tiene un mantenedor."

#: ../../package-structure-code/python-package-build-tools.md:376
msgid ""
"[Poetry is a full-featured build tool.](https://python-poetry.org/) It is"
" also the second most popular front-end packaging tool (based upon the "
"PyPA survey). Poetry is user-friendly and has clean and easy-to-read "
"documentation."
msgstr ""
"[Poetry es una herramienta de construcción completa.](https://python-poetry.org/) También es la segunda "
"herramienta de empaquetado de frontend más popular (según la encuesta de PyPA). Poetry es fácil de usar y tiene "
"documentación limpia y fácil de leer."

#: ../../package-structure-code/python-package-build-tools.md:381
msgid ""
"While some have used Poetry for Python builds with C/C++ extensions, this"
" support is currently undocumented. Thus, we don't recommend using Poetry"
" for more complex builds."
msgstr ""
"Aunque algunos han usado Poetry para construcciones de Python con extensiones C/C++, este soporte no está "
"documentado actualmente. Por lo tanto, no recomendamos usar Poetry para construcciones más complejas."

#: ../../package-structure-code/python-package-build-tools.md:385
msgid "Poetry features"
msgstr "Características de Poetry"

#: ../../package-structure-code/python-package-build-tools.md:392
msgid "Feature, Poetry, Notes"
msgstr "Característica, Poetry, Notas"

#: ../../package-structure-code/python-package-build-tools.md:392
msgid ""
"Poetry helps you add dependencies to your `pyproject.toml` metadata. "
"_NOTE: currently Poetry adds dependencies using an approach that is "
"slightly out of alignment with current Python peps - however there is a "
"plan to fix this in an upcoming release._ Poetry also allows you to "
"organize dependencies in groups such as  documentation, packaging and "
"tests."
msgstr ""
"Poetry le ayuda a agregar dependencias a sus metadatos `pyproject.toml`. "
"_NOTA: actualmente Poetry agrega dependencias utilizando un enfoque que está "
"ligeramente desalineado con los PEPs de Python actuales - sin embargo, hay un plan para solucionar esto en una "
"próxima versión._ Poetry también le permite organizar dependencias en grupos como documentación, empaquetado y "
"tests."

#: ../../package-structure-code/python-package-build-tools.md:392
msgid "Dependency specification"
msgstr "Especificación de dependencias"

#: ../../package-structure-code/python-package-build-tools.md:392
msgid ""
"Poetry allows you to be specific about version of dependencies that you "
"add to your package's pyproject.toml file. However, it's default upper "
"bound approach can be problematic for some packages (We suggest you "
"override the default setting when adding dependencies). Read below for "
"more."
msgstr ""
"Poetry le permite ser específico sobre la versión de las dependencias que "
"agrega al archivo pyproject.toml de su paquete. Sin embargo, su enfoque de límite superior predeterminado "
"puede ser problemático para algunos paquetes (le sugerimos que anule la configuración predeterminada al agregar "
"dependencias). Lea a continuación para más información."

#: ../../package-structure-code/python-package-build-tools.md:392
msgid ""
"Poetry allows you to either use its built in environment or you can "
"select the environment type that you want to use for managing your "
"package. [Read more about its built in environment management "
"options](https://python-poetry.org/docs/basic-usage/#using-your-virtual-"
"environment)."
msgstr ""
"Poetry le permite usar su entorno integrado o puede seleccionar el tipo de entorno que desea usar para "
"administrar su paquete. [Lea más sobre sus opciones de gestión de entornos integrados]"
"(https://python-poetry.org/docs/basic-usage/#using-your-virtual-environment)."

#: ../../package-structure-code/python-package-build-tools.md:392
msgid "Lock files"
msgstr "Archivos de bloqueo"

#: ../../package-structure-code/python-package-build-tools.md:392
msgid ""
"Poetry creates a **poetry.lock** file that you can use if you need a lock"
" file for your build."
msgstr ""
"Poetry crea un archivo **poetry.lock** que puede usar si necesita un archivo de bloqueo para su construcción."

#: ../../package-structure-code/python-package-build-tools.md:392
msgid "Poetry supports publishing to both test PyPI and PyPI"
msgstr "Poetry admite la publicación tanto en PyPI Test como en PyPI"

#: ../../package-structure-code/python-package-build-tools.md:392
msgid ""
"The plugin [Poetry dynamic versioning](https://github.com/mtkennerly"
"/poetry-dynamic-versioning) supports versioning using git tags with "
"Poetry."
msgstr ""
"El plugin [Poetry dynamic versioning](https://github.com/mtkennerly"
"/poetry-dynamic-versioning) admite versionado utilizando etiquetas de git con Poetry."

#: ../../package-structure-code/python-package-build-tools.md:392
msgid ""
"Poetry supports you bumping the version of your package using standard "
"semantic version terms patch; minor; major"
msgstr ""
"Poetry le permite incrementar la versión de su paquete utilizando "
"términos de versión semántica estándar patch; minor; major"

#: ../../package-structure-code/python-package-build-tools.md:392
msgid "✖✅"
msgstr ""

#: ../../package-structure-code/python-package-build-tools.md:392
msgid ""
"Poetry does not quite support current packaging standards for adding "
"metadata to the **pyproject.toml** file but plans to fix this in an "
"upcoming release."
msgstr ""
"Poetry no admite completamente los estándares de empaquetado actuales para "
"agregar metadatos al archivo **pyproject.toml** pero planea solucionar esto en una próxima versión."

#: ../../package-structure-code/python-package-build-tools.md:392
msgid ""
"Poetry supports installing your package in editable mode using "
"`--editable`"
msgstr "Poetry admite instalar su paquete en modo editable usando `--editable`"

#: ../../package-structure-code/python-package-build-tools.md:392
msgid "Poetry will build your sdist and wheel distributions using `poetry build`"
msgstr "Poetry construirá sus distribuciones sdist y wheel usando `poetry build`"

#: ../../package-structure-code/python-package-build-tools.md:407
msgid "Challenges with Poetry"
msgstr "Desafíos con Poetry"

#: ../../package-structure-code/python-package-build-tools.md:409
msgid "Some challenges of Poetry include:"
msgstr "Algunos desafíos de Poetry incluyen:"

#: ../../package-structure-code/python-package-build-tools.md:411
msgid ""
"Poetry, by default, pins dependencies using an \"upper bound\" limit "
"specified with the `^` symbol by default. However, this behavior can be "
"over-written by specifying the dependency when you use `Poetry add` as "
"follows: `poetry add \"requests>=2.1\"` See breakout below for more "
"discussion on issues surrounding upper-bounds pinning."
msgstr ""
"Poetry, por defecto, fija las dependencias utilizando un valor de \"límite superior\" de versión especificado con el "
"símbolo `^` por defecto. Sin embargo, este comportamiento puede ser eliminado especificando la dependencia "
"cuando use `Poetry add` de la siguiente manera: `poetry add \"requests>=2.1\"` Vea el desglose a continuación "
"para más discusión sobre los problemas que rodean el fijado de límites superiores."

#: ../../package-structure-code/python-package-build-tools.md:412
msgid ""
"_Minor Challenge:_ The way Poetry currently adds metadata to your "
"pyproject.toml file does not follow current Python standards. However, "
"this is going to be addressed with Poetry release version 2.0."
msgstr ""
"_Desafío menor:_ La forma en que Poetry actualmente agrega metadatos a su archivo pyproject.toml no sigue los "
"estándares actuales de Python. Sin embargo, esto se abordará con la versión 2.0 de Poetry."

#: ../../package-structure-code/python-package-build-tools.md:414
msgid ""
"Poetry is an excellent tool. Use caution when using it to pin "
"dependencies as Poetry's approach to pinning can be problematic for many "
"builds. If you use Poetry, we strongly suggest that you override the "
"default upper bound dependency option."
msgstr ""
"Poetry es una excelente herramienta. Tome precaución al usarla para fijar dependencias ya que el enfoque de "
"Poetry para fijar puede ser problemático para muchas construcciones. Si usa Poetry, le sugerimos encarecidamente "
"que anule la opción de dependencia de límite superior predeterminada."

#: ../../package-structure-code/python-package-build-tools.md:420
msgid "Challenges with Poetry dependency pinning"
msgstr "Desafíos con el fijado de dependencias de Poetry"

#: ../../package-structure-code/python-package-build-tools.md:423
msgid ""
"By default, Poetry pins dependencies using `^` by default. This `^` "
"symbol means that there is an \"upper bound\" to the dependency. Thus "
"poetry won't bump a dependency version to a new major version. Thus, if "
"your package uses a dependency that is at version 1.2.3, Poetry will "
"never bump the dependency to 2.0 even if there is a new major version of "
"the package. Poetry will instead bump up to 1.9.x."
msgstr ""
"Por defecto, Poetry fija las dependencias utilizando `^` por defecto. Este símbolo `^` significa que hay un "
"\"límite superior\" en la dependencia. Por lo tanto, Poetry no incrementará la versión de una dependencia a una "
"nueva versión mayor. Por lo tanto, si su paquete usa una dependencia que está en la versión 1.2.3, Poetry nunca "
"incrementará la dependencia a 2.0 incluso si hay una nueva versión mayor del paquete. En su lugar, Poetry incrementará "
"hasta 1.9.x."

#: ../../package-structure-code/python-package-build-tools.md:429
msgid ""
"Poetry does this because it adheres to strict semantic versioning which "
"states that a major version bump (from 1.0 to 2.0 for example) means "
"there are breaking changes in the tool. However, not all tools follow "
"strict semantic versioning. [This approach has been found to be "
"problematic by many of our core scientific "
"packages.](https://iscinumpy.dev/post/bound-version-constraints/)"
msgstr ""
"Poetry hace esto porque se adhiere a la versión semántica estricta que establece que un incremento de versión "
"mayor (de 1.0 a 2.0 por ejemplo) significa que hay cambios de ruptura en la herramienta. Sin embargo, no todas "
"las herramientas siguen la versión semántica estricta. [Este enfoque se ha encontrado problemático por muchos de "
"nuestros paquetes científicos principales.](https://iscinumpy.dev/post/bound-version-constraints/)"

#: ../../package-structure-code/python-package-build-tools.md:434
msgid ""
"This approach also won't support others ways of versioning tools, for "
"instance, some tools use [calver](https://calver.org/) which creates new "
"versions based on the date."
msgstr ""
"Este enfoque tampoco soportará otras formas de versionar herramientas, por ejemplo, algunas herramientas usan "
"[calver](https://calver.org/) que crea nuevas versiones basadas en la fecha."

#: ../../package-structure-code/python-package-build-tools.md:438
msgid "Using Setuptools Back-end for Python Packaging with Build Front-end"
msgstr "Usando el backend de Setuptools para el empaquetado de Python con el frontend de Build"

#: ../../package-structure-code/python-package-build-tools.md:440
msgid ""
"[Setuptools](https://setuptools.pypa.io/en/latest/) is the most mature "
"Python packaging build tool with [development dating back to 2009 and "
"earlier](https://setuptools.pypa.io/en/latest/history.html#). Setuptools "
"also has the largest number of community users (according to the PyPA "
"survey). Setuptools does not offer a user front-end like Flit, Poetry and"
" Hatch offer. As such you will need to use other tools such as **build** "
"to create your package distributions and **twine** to publish to PyPI."
msgstr ""
"[Setuptools](https://setuptools.pypa.io/en/latest/) es la herramienta de construcción de empaquetado de Python más "
"madura con [desarrollo que data de 2009 y antes](https://setuptools.pypa.io/en/latest/history.html#). Setuptools "
"también tiene el mayor número de usuarios de la comunidad (según la encuesta de PyPA). Setuptools no ofrece un "
"frontend de usuario como Flit, Poetry y Hatch ofrecen. Como tal, necesitará usar otras herramientas como **build** "
"para crear las distribuciones de su paquete y **twine** para publicar en PyPI."

#: ../../package-structure-code/python-package-build-tools.md:448
msgid ""
"While setuptools is the most commonly used tool, we encourage package "
"maintainers to consider using a more modern tool for packaging such as "
"Poetry, Hatch or PDM."
msgstr ""
"Aunque setuptools es la herramienta más comúnmente utilizada, sugerimos a los mantenedores de paquetes a considerar "
"usar una herramienta más moderna para el empaquetado como Poetry, Hatch o PDM."

#: ../../package-structure-code/python-package-build-tools.md:451
msgid ""
"We discuss setuptools here because it's commonly found in the ecosystem "
"and contributors may benefit from understanding it."
msgstr ""
"Discutimos setuptools aquí porque se encuentra muy a menudo en el ecosistema y entenderlo "
"puede beneficiarle."

#: ../../package-structure-code/python-package-build-tools.md:454
msgid "Setuptools Features"
msgstr "Características de Setuptools"

#: ../../package-structure-code/python-package-build-tools.md:456
msgid "Some of features of setuptools include:"
msgstr "Algunas de las características de setuptools incluyen:"

#: ../../package-structure-code/python-package-build-tools.md:458
msgid "Fully customizable build workflow"
msgstr "Flujo de trabajo de construcción completamente personalizable"

#: ../../package-structure-code/python-package-build-tools.md:459
msgid "Many scientific Python packages use it."
msgstr "Muchos paquetes científicos de Python lo utilizan."

#: ../../package-structure-code/python-package-build-tools.md:460
msgid ""
"It offers version control based package versioning using "
"**setuptools_scm**"
msgstr "Ofrece versionado de paquetes basado en control de versiones utilizando **setuptools_scm**"

#: ../../package-structure-code/python-package-build-tools.md:461
msgid "It supports modern packaging using **pyproject.toml** for metadata"
msgstr "Admite empaquetado moderno utilizando **pyproject.toml** para metadatos"

#: ../../package-structure-code/python-package-build-tools.md:462
msgid "Supports backwards compatibly for older packaging approaches."
msgstr "Admite compatibilidad con versiones anteriores para enfoques de empaquetado antiguos."

#: ../../package-structure-code/python-package-build-tools.md:464
msgid "Challenges using setuptools"
msgstr "Desafíos al usar setuptools"

#: ../../package-structure-code/python-package-build-tools.md:468
msgid "Setuptools has a few challenges:"
msgstr "Setuptools tiene algunos desafíos:"

#: ../../package-structure-code/python-package-build-tools.md:470
msgid ""
"Setuptools does not support interactive features such as auto / tab "
"completion by default if you are working in an IDE like VSCODE and using "
"an editable install for development. [See notes here about pylance "
"support](https://github.com/microsoft/pylance-"
"release/blob/main/TROUBLESHOOTING.md#editable-install-modules-not-found)."
" In comparison, tools such as flit, hatch, PDM support interactive "
"features such as tab / auto completion when using an IDE like VSCODE or "
"pycharm (as long as your version of pip is current!)."
msgstr ""
"Setuptools no admite características interactivas como la detección automática "
"de la API por defecto si está trabajando en un IDE como VSCODE y está utilizando una instalación editable para "
"desarrollo. [Vea las notas aquí sobre el soporte de pylance](https://github.com/microsoft/pylance-"
"release/blob/main/TROUBLESHOOTING.md#editable-install-modules-not-found). En comparación, herramientas como flit, "
"hatch, PDM admiten características interactivas como la detección automática de la API cuando se utiliza un IDE "
"como VSCODE o pycharm (¡siempre que su versión de pip esté actualizada!)."

#: ../../package-structure-code/python-package-build-tools.md:471
msgid ""
"Because **setuptools** has to maintain backwards compatibility across a "
"range of packages, it is not as flexible in its adoption of modern Python"
" packaging standards."
msgstr ""
"Debido a que **setuptools** tiene que mantener la compatibilidad con versiones anteriores en una gama de paquetes, "
"no es tan flexible en su adopción de los estándares de empaquetado de Python modernos."

#: ../../package-structure-code/python-package-build-tools.md:474
msgid ""
"The above-mentioned backwards compatibility makes for a more complex "
"code-base."
msgstr ""
"La compatibilidad con versiones anteriores mencionada anteriormente"
" hace que la base de código sea más compleja."

#: ../../package-structure-code/python-package-build-tools.md:475
msgid ""
"Your experience as a user will be less streamlined and simple using "
"setuptools compared to other tools discussed on this page."
msgstr ""
"Su experiencia como usuario será más compleja utilizando "
"setuptools en comparación con otras herramientas discutidas en esta página."


#: ../../package-structure-code/python-package-build-tools.md:477
msgid ""
"There are also some problematic default settings that users should be "
"aware of when using setuptools. For instance:"
msgstr ""
"También hay algunas configuraciones predeterminadas problemáticas de las que los usuarios deben ser conscientes "
"cuando usan setuptools. Por ejemplo:"

#: ../../package-structure-code/python-package-build-tools.md:480
msgid ""
"setuptools will build a project without a name or version if you are not "
"using a **pyproject.toml** file to store metadata."
msgstr ""
"setuptools construirá un proyecto sin nombre o versión si no está "
"utilizando un archivo **pyproject.toml** para almacenar metadatos."

#: ../../package-structure-code/python-package-build-tools.md:482
msgid ""
"setuptools also will include all of the files in your package repository "
"if you do not explicitly tell it to exclude files using a **MANIFEST.in**"
" file"
msgstr ""
"setuptools también incluirá todos los archivos en el repositorio de su "
"paquete si no le dice explícitamente que excluya archivos utilizando un "
"archivo **MANIFEST.in**"

#: ../../package-structure-code/python-package-distribution-files-sdist-wheel.md:1
msgid "Learn about Building a Python Package"
msgstr "Aprenda sobre la construcción de un paquete de Python"

#: ../../package-structure-code/python-package-distribution-files-sdist-wheel.md:8
msgid ""
"Once you have published both package distributions (the source "
"distribution and the wheel) to PyPI, you can then publish to conda-forge."
" conda-forge requires an source distribution on PyPI in order to build "
"your package on conda-forge. You do not need to rebuild your package to "
"publish to conda-forge."
msgstr ""
"Una vez que haya publicado ambas distribuciones de paquetes (la distribución del código fuente y la distribución construida o wheel) en PyPI, "
"entonces puede publicar en conda-forge. conda-forge requiere una distribución de origen en PyPI para construir su "
"paquete en conda-forge. No necesita reconstruir su paquete para publicar en conda-forge."

#: ../../package-structure-code/python-package-distribution-files-sdist-wheel.md:11
msgid ""
"You need to build your Python package in order to publish it to PyPI (or "
"a conda channel). The build process organizes your code and metadata into"
" a distribution format that can be uploaded to PyPI and subsequently "
"downloaded and installed by users. NOTE: you need to publish a sdist to "
"PyPI in order for conda-forge to properly build your package "
"automatically."
msgstr ""
"Necesita construir su paquete de Python para publicarlo en PyPI "
"(o en un canal de conda). El proceso de construcción organiza su código "
"y metadatos en un formato de distribución que puede ser subido a PyPI y "
"posteriormente descargado e instalado por los usuarios. NOTA: necesita "
"publicar un sdist (distribución del código fuente) en PyPI para que conda-forge pueda construir su paquete "
"automáticamente."

#: ../../package-structure-code/python-package-distribution-files-sdist-wheel.md:14
msgid "What is building a Python package?"
msgstr "¿Qué es construir un paquete de Python?"

#: ../../package-structure-code/python-package-distribution-files-sdist-wheel.md:16
msgid ""
"To [publish your Python package](publish-python-package-pypi-conda) and "
"make it easy for anyone to install, you first need to build it."
msgstr ""
"Para [publicar su paquete de Python](publish-python-package-pypi-conda) y "
"hacer que sea fácil de instalar para cualquiera, primero necesita construirlo."

#: ../../package-structure-code/python-package-distribution-files-sdist-wheel.md:18
msgid "But, what does it mean to build a Python package?"
msgstr "Pero, ¿qué significa construir un paquete de Python?"

#: ../../package-structure-code/python-package-distribution-files-sdist-wheel.md:20
msgid ""
"[As shown in the figure above](#pypi-conda-channels), when you build your"
" Python package, you convert the source files into something called a "
"distribution package. A distribution package contains your source code "
"and metadata about the package, in the format required by the Python "
"Package Index, so that it can be installed by tools like pip."
msgstr ""
"[Como se muestra en la figura de arriba](#pypi-conda-channels), cuando construye su paquete de Python, convierte "
"los archivos de código fuente en algo llamado paquete de distribución."
" Un paquete de distribución contiene su código fuente "
"y metadatos sobre el paquete, en el formato requerido por el Python Package Index (PyPI), para que pueda ser "
"instalado por herramientas como pip."

#: ../../package-structure-code/python-package-distribution-files-sdist-wheel.md:23
msgid ""
"The term package used to mean many different things in Python and other "
"languages. On this page, we adapt the convention of the [Python Packaging"
" Authority](https://www.pypa.io/en/latest/) and refer to the product of "
"the build step as a **distribution package**."
msgstr ""
"El término paquete solía significar muchas cosas diferentes en Python y otros lenguajes. En esta página, "
"adaptamos la convención de la [Autoridad de Empaquetado de Python](https://www.pypa.io/en/latest/) y nos referimos "
"al producto del paso de construcción como un **paquete de distribución**."

#: ../../package-structure-code/python-package-distribution-files-sdist-wheel.md:27
msgid ""
"This process of organizing and formatting your code, documentation, tests"
" and metadata into a format that both pip and PyPI can use, is called a "
"build step."
msgstr ""
"Este proceso de organizar y formatear su código, documentación, pruebas y metadatos en un formato que tanto pip "
"como PyPI pueden usar, se llama paso de construcción."

#: ../../package-structure-code/python-package-distribution-files-sdist-wheel.md:31
msgid "Project metadata and PyPI"
msgstr "Metadatos del proyecto y PyPI"

#: ../../package-structure-code/python-package-distribution-files-sdist-wheel.md:33
msgid ""
"The metadata that both build tools and PyPI uses to describe and "
"understand your package is generally stored in a [pyproject.toml file"
"](pyproject-toml-python-package-metadata). This metadata is used for "
"several purposes:"
msgstr ""
"Los metadatos que tanto las herramientas de construcción como PyPI utilizan para describir y entender su paquete "
"generalmente se almacenan en un [archivo pyproject.toml](pyproject-toml-python-package-metadata). Estos metadatos "
"se utilizan para varios propósitos:"

#: ../../package-structure-code/python-package-distribution-files-sdist-wheel.md:35
msgid ""
"It helps whatever tool you use to build your package (pip, [pypa's "
"Build](https://pypi.org/project/build/) or an end-to-end tool such as "
"poetry, PDM or Hatch) understand how to build your package. Information "
"it provides to your build tool includes:"
msgstr ""
"Ayuda a la herramienta que use para construir su paquete (pip, [Build de pypa](https://pypi.org/project/build/) o "
"una herramienta de extremo a extremo como poetry, PDM o Hatch) a entender cómo construir su paquete. La información "
"que proporciona a su herramienta de construcción incluye:"

#: ../../package-structure-code/python-package-distribution-files-sdist-wheel.md:37
msgid ""
"The `[build-system]` table in your pyproject.toml file tells pip what "
"[build backend tool](build_backends) you wish to use for creating your "
"sdist and wheel distributions."
msgstr ""
"La tabla `[build-system]` en su archivo pyproject.toml le dice a pip qué [herramienta de backend de construcción]"
"(build_backends) desea usar para crear sus distribuciones sdist (distribución del código fuente) y wheel (distribución construida)."

#: ../../package-structure-code/python-package-distribution-files-sdist-wheel.md:45
msgid ""
"And the dependencies section of your project table tells the build tool "
"and PyPI what dependencies your project requires."
msgstr ""
"Y la sección de dependencias de su tabla de proyecto le dice a la herramienta de construcción y a PyPI qué "
"dependencias requiere su proyecto."

#: ../../package-structure-code/python-package-distribution-files-sdist-wheel.md:54
msgid ""
"When the build tool creates your package distribution file (the file that"
" you publish on PyPI), it also creates a METADATA file which PyPI can "
"read and use to help users find your package. For example:"
msgstr ""
"Cuando la herramienta de construcción crea el archivo de distribución de su paquete (el archivo que publica en "
"PyPI), también crea un archivo METADATA que PyPI puede leer y usar para ayudar a los usuarios a encontrar su paquete. "
"Por ejemplo:"

#: ../../package-structure-code/python-package-distribution-files-sdist-wheel.md:56
msgid ""
"The `classifiers = ` section of your `[project]` table in the "
"pyproject.toml file provides information that users on PyPI can use to "
"filter for packages that contain specific licenses or that support "
"specific versions of python."
msgstr ""
"La sección `classifiers = ` de su tabla `[project]` en el archivo pyproject.toml proporciona información que los "
"usuarios en PyPI pueden usar para filtrar paquetes que contienen licencias específicas o que admiten versiones "
"específicas de Python."

#: ../../package-structure-code/python-package-distribution-files-sdist-wheel.md:73
msgid "What happened to setup.py and setup.cfg for metadata?"
msgstr "¿Qué pasó con setup.py y setup.cfg para almacenar metadatos?"

#: ../../package-structure-code/python-package-distribution-files-sdist-wheel.md:76
msgid ""
"Project metadata used to be stored in either a setup.py file or a "
"setup.cfg file. The current recommended practice for storing package "
"metadata is to use a pyproject.toml file. [Learn more about the "
"pyproject.toml file here.](pyproject-toml-python-package-metadata)"
msgstr ""
"Los metadatos del proyecto solían almacenarse en un archivo setup.py o en un archivo setup.cfg. La práctica "
"recomendada actual para almacenar metadatos de paquetes es utilizar un archivo pyproject.toml. [Aprenda más sobre el "
"archivo pyproject.toml aquí.](pyproject-toml-python-package-metadata)"

#: ../../package-structure-code/python-package-distribution-files-sdist-wheel.md:79
msgid "An example - xclim"
msgstr "Un ejemplo - xclim"

#: ../../package-structure-code/python-package-distribution-files-sdist-wheel.md:94
msgid ""
"Graphic showing the high level packaging workflow. On the left you see a "
"graphic with code, metadata and tests in it. those items all go into your"
" package. Documentation and data are below that box because they aren't "
"normally published in your packaging wheel distribution. an arrow to the "
"right takes you to a build distribution files box. that box leads you to "
"either publishing to TestPyPI or the real PyPI. from PyPI you can then "
"connect to conda-forge for an automated build that sends distributions "
"from PyPI to conda-forge."
msgstr ""
"Gráfico que muestra el flujo de trabajo de empaquetado de alto nivel."
" A la izquierda se ve un gráfico con código, metadatos y tests en él. "
"Esos elementos van todos en su paquete. La documentación y los datos "
"están debajo de ese recuadro porque normalmente no se publican en su "
"distribución construida (wheel). Una flecha a la derecha lo lleva a "
"un cuadro de archivos de distribución de construcción. Ese cuadro lo lleva "
"a publicar en TestPyPI o en el verdadero PyPI. Desde PyPI, puede conectarse "
"a conda-forge para una construcción automatizada que envía distribuciones "
"de PyPI a conda-forge."

#: ../../package-structure-code/python-package-distribution-files-sdist-wheel.md:96
msgid ""
"You need to build your Python package in order to publish it to PyPI (or "
"Conda). The build process organizes your code and metadata into a "
"distribution format that can be uploaded to PyPI and subsequently "
"downloaded and installed by users. NOTE: you need to publish a sdist to "
"PyPI in order for conda-forge to properly build your package "
"automatically."
msgstr ""
"Necesita construir su paquete de Python para publicarlo en PyPI (o Conda). "
"El proceso de construcción organiza su código y metadatos en un formato de "
"distribución que puede ser subido a PyPI y posteriormente descargado e "
"instalado por los usuarios. NOTA: necesita publicar distribución del código fuente (sdist) en PyPI para "
"que conda-forge pueda construir su paquete automáticamente."

#: ../../package-structure-code/python-package-distribution-files-sdist-wheel.md:101
msgid ""
"This screenshot shows the metadata on PyPI for the xclim package. on it "
"you can see the name of the license, the author and maintainer names "
"keywords associated with the package and the base python version it "
"requires which is 3.8."
msgstr ""
"Esta captura de pantalla muestra los metadatos en PyPI para el paquete xclim. "
"En ella puede ver el nombre de la licencia, los nombres del autor y del "
"mantenedor, palabras clave asociadas con el paquete y la versión base de "
"Python que requiere, que es 3.8."

#: ../../package-structure-code/python-package-distribution-files-sdist-wheel.md:103
msgid "PyPI screenshot showing metadata for the xclim package."
msgstr "Captura de pantalla de PyPI que muestra metadatos para el paquete xclim."

#: ../../package-structure-code/python-package-distribution-files-sdist-wheel.md:110
msgid ""
"Here you see the maintainer metadata as it is displayed on PyPI. for "
"xclim there are three maintainers listed with their profile pictures and "
"github user names to the right."
msgstr ""
"Aquí ve los metadatos del mantenedor tal como se muestran en PyPI. Para "
"xclim hay tres mantenedores listados con sus fotos de perfil y nombres de "
"usuario de GitHub a la derecha."

#: ../../package-structure-code/python-package-distribution-files-sdist-wheel.md:112
msgid ""
"Maintainer names and GitHub usernames for the xclim package as they are "
"displayed on PyPI. This information is recorded in your pyproject.toml "
"and then processed by your build tool and stored in your packages sdist "
"and wheel distributions."
msgstr ""
"Nombres de los mantenedores y nombres de usuario de GitHub para el paquete "
"xclim tal como se muestran en PyPI. Esta información se registra en su "
"pyproject.toml y luego es procesada por su herramienta de construcción y "
"almacenada en las distribuciones sdist y wheel de sus paquetes."

#: ../../package-structure-code/python-package-distribution-files-sdist-wheel.md:115
msgid "How to create the distribution format that PyPI and Pip expects?"
msgstr "¿Cómo crear el formato de distribución que PyPI y Pip esperan?"

#: ../../package-structure-code/python-package-distribution-files-sdist-wheel.md:117
msgid ""
"You could in theory create your own scripts to organize your code the way"
" PyPI wants it to be. However, just like there are packages that handle "
"known structures such as Pandas for data frames and Numpy for arrays, "
"there are packages and tools that help you create package build "
"distribution files."
msgstr ""
"En teoría, podría crear sus propios scripts para organizar su código "
"de la manera que PyPI quiere que sea. Sin embargo, al igual que hay "
"paquetes que manejan estructuras conocidas como dataframes de Pandas "
"y arrays de Numpy, hay paquetes y herramientas que le "
"ayudan a crear archivos de distribución de construcción de paquetes."

#: ../../package-structure-code/python-package-distribution-files-sdist-wheel.md:121
msgid ""
"There are a suite of packaging tools that can either help you with the "
"entire packaging process or just one step of the process. For instance "
"setuptools is a commonly used build back end that can be used to create "
"your sdist and wheel. Whereas tools like Hatch, PDM, Poetry and flit help"
" with other parts of the packaging process."
msgstr ""
"Existen una serie de herramientas de empaquetado que pueden ayudarle con "
"todo el proceso de empaquetado o solo con un paso del proceso. Por ejemplo, "
"setuptools es un backend de construcción comúnmente utilizado que se puede "
"usar para crear su sdist y wheel. Mientras que herramientas como "
"Hatch, PDM, Poetry y flit ayudan con otras partes del proceso de empaquetado."

#: ../../package-structure-code/python-package-distribution-files-sdist-wheel.md:127
msgid ""
"While this can cause some confusion and complexity in the packaging "
"ecosystem - for the most part, each tool provides the same distribution "
"output (with minor differences that most users may not care about). Learn"
" more about those tools on this page."
msgstr ""
"Si bien esto puede causar cierta confusión y complejidad en el ecosistema "
"de empaquetado, en su mayor parte, cada herramienta proporciona la misma "
"salida de distribución (con diferencias menores que a la mayoría de los "
"usuarios pueden no importarles). Aprenda más sobre esas herramientas en "
"esta página."

#: ../../package-structure-code/python-package-distribution-files-sdist-wheel.md:133
msgid ""
"Below, you will learn about the two distribution files that PyPI expects "
"you to publish: sdist and wheel. You will learn about their structure and"
" what files belong in each."
msgstr ""
"A continuación, aprenderá sobre los dos archivos de distribución que PyPI "
"espera que publique: sdist y wheel. Aprenderá sobre su estructura "
"y qué archivos pertenecen a cada uno."

#: ../../package-structure-code/python-package-distribution-files-sdist-wheel.md:136
msgid ""
"There are two core distribution files that you need to create to publish "
"your Python package to PyPI source distribution (often called an sdist) "
"and wheel. The sdist contains the raw source code for your package. The "
"wheel (.whl) contains the built / compiled files that can be directly "
"installed onto anyones' computer."
msgstr ""
"Hay dos archivos de distribución principales que necesita crear para "
"publicar su paquete de Python en PyPI: la distribución de origen (a menudo "
"llamada sdist) y la distribución construida (wheel). El sdist contiene el código fuente "
"sin procesar de su paquete. La wheel (.whl) contiene los archivos "
"construidos / compilados que se pueden instalar directamente en el "
"ordenador de cualquier persona."

#: ../../package-structure-code/python-package-distribution-files-sdist-wheel.md:142
msgid "Learn more about both distributions below."
msgstr "Aprenda más sobre ambas distribuciones a continuación."

#: ../../package-structure-code/python-package-distribution-files-sdist-wheel.md:145
msgid ""
"If your package is a pure python package with no additional build / "
"compilation steps then the sdist and wheel distributions will have "
"similar content. However if your package has extensions in other "
"languages or is more complex in its build, the two distributions will be "
"very different."
msgstr ""
"Si su paquete es un paquete de Python puro sin pasos adicionales de "
"construcción / compilación, entonces las distribuciones sdist y wheel "
"tendrán contenido similar. Sin embargo, si su paquete tiene extensiones en "
"otros lenguajes o es más complejo en su construcción, las dos distribuciones "
"serán muy diferentes."

#: ../../package-structure-code/python-package-distribution-files-sdist-wheel.md:150
msgid ""
"Also note that we are not discussing conda build workflows in this "
"section. [You can learn more about conda builds "
"here.](https://conda.io/projects/conda-build/en/latest/user-"
"guide/tutorials/index.html)"
msgstr ""
"También tenga en cuenta que no estamos discutiendo flujos de trabajo de "
"construcción de conda en esta sección. [Puede aprender más sobre las "
"construcciones de conda aquí.](https://conda.io/projects/conda-build/en/"
"latest/user-guide/tutorials/index.html)"

#: ../../package-structure-code/python-package-distribution-files-sdist-wheel.md:155
msgid "Source Distribution (sdist)"
msgstr "Distribución de código fuente (sdist)"

#: ../../package-structure-code/python-package-distribution-files-sdist-wheel.md:157
msgid ""
"**Source files** are the unbuilt files needed to build your package. "
"These are the \"raw / as-is\" files that you store on GitHub or whatever "
"platform you use to manage your code."
msgstr ""
"Los **archivos de código fuente** son los archivos sin construir necesarios para "
"construir su paquete. Estos son los archivos \"originales / sin procesar\" "
"que almacena en GitHub o en cualquier plataforma que utilice para gestionar "
"su código."

#: ../../package-structure-code/python-package-distribution-files-sdist-wheel.md:161
msgid ""
"Source Distributions (**S** + **Dist**) are referred to as sdist. As the "
"name implies, a SDIST contains the source code; it has not been built or "
"compiled in any way. Thus, when a user installs your source distribution "
"using pip, pip needs to run a build step first. For this reason, you "
"could define a source distribution as a compressed archive that contains "
"everything required to build a wheel (except for project dependencies) "
"without network access."
msgstr ""
"Las distribuciones de código fuente (del inglés, _source distribution_) se denominan sdist. Como "
"su nombre indica, una distribución sdist contiene el código fuente; no ha sido construido ni"
" compilado de ninguna manera. Por lo tanto, cuando un usuario instala su distribución de código fuente "
"usando pip, pip necesita ejecutar un paso de construcción primero. Por esta razón, "
"podría definir una distribución sdist como un archivo comprimido que contiene todo lo "
"necesario para construir una wheel (excepto las dependencias del proyecto) sin acceso a la red."

#: ../../package-structure-code/python-package-distribution-files-sdist-wheel.md:165
msgid ""
"Sdist is normally stored as a `.tar.gz` archive (often called a "
"\"tarball\"). Thus, when a user installs your source distribution using "
"pip, pip needs to run a build step first."
msgstr ""
"Normalmente, sdist se almacena como un archivo `.tar.gz` (a menudo llamado "
"un \"tarball\"). Por lo tanto, cuando un usuario instala su distribución de origen "
"usando pip, pip necesita ejecutar un paso de construcción primero."

#: ../../package-structure-code/python-package-distribution-files-sdist-wheel.md:167
msgid "Below is an example sdist for the stravalib Python package:"
msgstr "A continuación se muestra un ejemplo de sdist para el paquete de Python stravalib:"

#: ../../package-structure-code/python-package-distribution-files-sdist-wheel.md:219
msgid "GitHub archive vs sdist"
msgstr "El archivo de GitHub vs sdist"

#: ../../package-structure-code/python-package-distribution-files-sdist-wheel.md:221
msgid ""
"When you make a release on GitHub, it creates a `git archive` that "
"contains all of the files in your GitHub repository. While these files "
"are similar to an sdist, these two archives are not the same. The sdist "
"contains a few other items including a metadata directory and if you use "
"`setuptools_scm` or `hatch_vcs` the sdist may also contain a file that "
"stores the version."
msgstr ""
"Cuando se crea una versión en GitHub, se crea un `git archive` que contiene "
"todos los archivos de su repositorio de GitHub. Si bien estos archivos son "
"similares a un sdist, estos dos archivos no son iguales. El sdist contiene "
"algunos otros elementos, incluido un directorio de metadatos y si utiliza "
"`setuptools_scm` o `hatch_vcs`, el sdist también puede contener un archivo "
"que almacena la versión."

#: ../../package-structure-code/python-package-distribution-files-sdist-wheel.md:229
msgid "Wheel (.whl files):"
msgstr "Wheel (ficheros .whl):"

#: ../../package-structure-code/python-package-distribution-files-sdist-wheel.md:231
msgid ""
"A wheel file is a ZIP-format archive whose filename follows a specific "
"format (below) and has the extension `.whl`. The `.whl` archive contains "
"a specific set of files, including metadata that are generated from your "
"project's pyproject.toml file. The pyproject.toml and other files that "
"may be included in source distributions are not included in wheels "
"because it is a built distribution."
msgstr ""
"Un archivo wheel es un archivo en formato ZIP cuyo nombre sigue"
" un formato específico (a continuación) y tiene la "
"extensión `.whl`. El archivo `.whl` contiene un conjunto específico de "
"archivos, incluidos metadatos que se generan a partir del archivo "
"pyproject.toml de su proyecto. El pyproject.toml y otros archivos que "
"pueden estar incluidos en las distribuciones de origen no se incluyen en "
"las wheels porque es una distribución construida."

#: ../../package-structure-code/python-package-distribution-files-sdist-wheel.md:238
msgid ""
"The wheel (.whl) is your built binary distribution. **Binary files** are "
"the built / compiled source files. These files are ready to be installed."
" A wheel (**.whl**) is a **zip** file containing all of the files needed "
"to directly install your package. All of the files in a wheel are "
"binaries - this means that code is already compiled / built. Wheels are "
"thus faster to install - particularly if you have a package that requires"
" build steps."
msgstr ""
"La wheel (.whl) es su distribución binaria construida. Los"
" **archivos binarios** son los archivos de código fuente "
"construidos / compilados. Estos archivos están listos para ser instalados."
" Una wheel (**.whl**) es un archivo **zip** que contiene todos los archivos "
"necesarios para instalar directamente su paquete. Todos los archivos en una "
"wheel son binarios, lo que significa que el código ya está compilado / "
"construido. Por lo tanto, estas son más rápidas de instalar, "
"particularmente si tiene un paquete que requiere pasos de construcción."

#: ../../package-structure-code/python-package-distribution-files-sdist-wheel.md:240
msgid ""
"The wheel does not contain any of your package's configuration files such"
" as **setup.cfg** or **pyproject.toml**. This distribution is already "
"built so it's ready to install."
msgstr ""
"La wheel no contiene ninguno de los archivos de configuración de su paquete "
"como **setup.cfg** o **pyproject.toml**. Esta distribución ya está construida "
"por lo que está lista para instalar."

#: ../../package-structure-code/python-package-distribution-files-sdist-wheel.md:244
msgid ""
"Because it is built, the wheel file will be faster to install for pure "
"Python projects and can lead to consistent installs across machines."
msgstr ""
"Debido a que está construido, el archivo .whl será más rápido de instalar "
"para proyectos de Python puro y llevará a instalaciones consistentes "

#: ../../package-structure-code/python-package-distribution-files-sdist-wheel.md:252
msgid ""
"Wheels are also useful in the case that a package needs a **setup.py** "
"file to support a more complex build. In this case, because the files in "
"the wheel bundle are pre built, the user installing doesn't have to worry"
" about malicious code injections when it is installed."
msgstr ""
"Las wheels también son útiles en el caso de que un paquete necesite un "
"archivo **setup.py** para admitir una construcción más compleja. En este "
"caso, debido a que los archivos en el paquete de wheel están preconstruidos, "
"el usuario que lo instala no tiene que preocuparse por inyecciones de código "
"malicioso cuando se instala."

#: ../../package-structure-code/python-package-distribution-files-sdist-wheel.md:259
msgid "The filename of a wheel contains important metadata about your package."
msgstr "El nombre de archivo de una wheel contiene metadatos importantes sobre su paquete."

#: ../../package-structure-code/python-package-distribution-files-sdist-wheel.md:261
msgid "Example: **stravalib-1.1.0.post2-py3-none.whl**"
msgstr "Por ejemplo: **stravalib-1.1.0.post2-py3-none.whl**"

#: ../../package-structure-code/python-package-distribution-files-sdist-wheel.md:263
msgid "name: stravalib"
msgstr "nombre: stravalib"

#: ../../package-structure-code/python-package-distribution-files-sdist-wheel.md:264
msgid "version: 1.1.0"
msgstr "versión: 1.1.0"

#: ../../package-structure-code/python-package-distribution-files-sdist-wheel.md:265
msgid ""
"build-number: 2 (post2) [(read more about post "
"here)](https://peps.python.org/pep-0440/#post-release-separators)"
msgstr ""
"número de construcción: 2 (post2) [(lea más sobre post "
"aquí)](https://peps.python.org/pep-0440/#post-release-separators)"

#: ../../package-structure-code/python-package-distribution-files-sdist-wheel.md:266
msgid "py3: supports Python 3.x"
msgstr "py3: admite Python 3.x"

#: ../../package-structure-code/python-package-distribution-files-sdist-wheel.md:267
msgid "none: is not operating system specific (runs on windows, mac, linux)"
msgstr "none: no es específico del sistema operativo (se ejecuta en Windows, Mac, Linux)"

#: ../../package-structure-code/python-package-distribution-files-sdist-wheel.md:268
msgid "any: runs on any computer processor / architecture"
msgstr "any: se ejecuta en cualquier procesador / arquitectura de ordenador"

#: ../../package-structure-code/python-package-distribution-files-sdist-wheel.md:270
msgid "What a wheel file looks like when unpacked (unzipped):"
msgstr "¿Cómo se ve un archivo de rueda cuando se desempaqueta (descomprime)?"

#: ../../package-structure-code/python-package-distribution-files-sdist-wheel.md:304
msgid "[Read more about the wheel format here](https://pythonwheels.com/)"
msgstr "[Lea más sobre el formato de rueda aquí](https://pythonwheels.com/)"

#: ../../package-structure-code/python-package-structure.md:1
msgid "Python Package Structure for Scientific Python Projects"
msgstr "Estuctura de paquete de Python para proyectos científicos en Python"

#: ../../package-structure-code/python-package-structure.md:3
msgid ""
"There are two different layouts that you will commonly see within the "
"Python packaging ecosystem: [src and flat "
"layouts.](https://packaging.python.org/en/latest/discussions/src-layout-"
"vs-flat-layout/) Both layouts have advantages for different groups of "
"maintainers."
msgstr ""
"Existen dos diseños diferentes que comúnmente verá dentro del ecosistema de "
"empaquetado de Python: [diseños src y flat](https://packaging.python.org/en/"
"latest/discussions/src-layout-vs-flat-layout/). Ambos diseños tienen ventajas "
"para diferentes grupos de mantenedores."

#: ../../package-structure-code/python-package-structure.md:8
msgid ""
"We strongly suggest, but do not require, that you use the **src/** layout"
" (discussed below) for creating your Python package. This layout is also "
"recommended in the [PyPA packaging "
"guide](https://packaging.python.org/en/latest/tutorials/packaging-"
"projects/)."
msgstr ""
"Le sugerimos, pero no requerimos, que use el diseño **src/** (discutido a "
"continuación) para crear su paquete de Python. Este diseño también se "
"recomienda en la [guía de empaquetado de PyPA](https://packaging.python.org/"
"en/latest/tutorials/packaging-projects/)."

#: ../../package-structure-code/python-package-structure.md:12
msgid "pyOpenSci will never require a specific package structure for peer review"
msgstr "pyOpenSci nunca requerirá una estructura de paquete específica para la revisión por pares"

#: ../../package-structure-code/python-package-structure.md:15
msgid ""
"We understand that it would be tremendous effort for existing maintainers"
" to move to a new layout."
msgstr ""
"Entendemos que sería un esfuerzo tremendo para los mantenedores existentes "
"moverse a un nuevo diseño."

#: ../../package-structure-code/python-package-structure.md:18
msgid ""
"The overview on this page presents recommendations that we think are best"
" for someone getting started with Python packaging or someone who's "
"package has a simple build and might be open to moving to a more fail-"
"proof approach."
msgstr ""
"La descripción general en esta página presenta recomendaciones que creemos "
"que son las mejores para alguien que está comenzando con el empaquetado de "
"Python o para alguien cuyo paquete tiene una construcción simple y podría "
"estar abierto a moverse a un enfoque a prueba de fallos."

#: ../../package-structure-code/python-package-structure.md:23
msgid "An example of the **src/package** layout structure can be seen below."
msgstr "Un ejemplo de la estructura de diseño **src/package** se puede ver a continuación."

#: ../../package-structure-code/python-package-structure.md:45
msgid "Note the location of the following directories in the example above:"
msgstr "Nótese la ubicación de los siguientes directorios en el ejemplo anterior:"

#: ../../package-structure-code/python-package-structure.md:47
msgid ""
"**docs/:** discussed in our docs chapter, this directory contains your "
"user-facing documentation website. In a **src/** layout docs/ are "
"normally included at the same directory level of the **src/** folder."
msgstr ""
"**docs/:** discutido en nuestro capítulo de documentación, este directorio "
"contiene el sitio web de documentación orientado al usuario. En un diseño "
"**src/**, los docs/ normalmente se incluyen en el mismo nivel de directorio "
"que la carpeta **src/**."

#: ../../package-structure-code/python-package-structure.md:48
msgid ""
"**tests/** this directory contains the tests for your project code. In a "
"**src/** layout tests are normally included at the same directory level "
"of the **src/** folder."
msgstr ""
"**tests/** este directorio contiene las pruebas o tests para el código de su proyecto. "
"En un diseño **src/**, las pruebas o tests normalmente se incluyen en el "
"mismo nivel de directorio que la carpeta **src/**."

#: ../../package-structure-code/python-package-structure.md:49
msgid ""
"**src/package/**: this is the directory that contains the code for your "
"Python project. \"Package\" is normally your project's name."
msgstr ""
"**src/package/**: este es el directorio que contiene el código de su proyecto de Python. "
"\"Package\" es normalmente el nombre de su proyecto."

#: ../../package-structure-code/python-package-structure.md:51
msgid ""
"Also in the above example, notice that all of the core documentation "
"files that pyOpenSci requires live in the root of your project directory."
" These files include:"
msgstr ""
"También en el ejemplo anterior, observe que todos los archivos de documentación "
"básicos que pyOpenSci requiere se encuentran en la raíz del directorio de su proyecto. "
"Estos archivos incluyen:"

#: ../../package-structure-code/python-package-structure.md:55
msgid "CHANGELOG.md"
msgstr ""

#: ../../package-structure-code/python-package-structure.md:56
msgid "CODE_OF_CONDUCT.md"
msgstr ""

#: ../../package-structure-code/python-package-structure.md:57
msgid "CONTRIBUTING.md"
msgstr ""

#: ../../package-structure-code/python-package-structure.md:58
msgid "LICENSE.txt"
msgstr ""

#: ../../package-structure-code/python-package-structure.md:59
msgid "README.md"
msgstr ""

#: ../../package-structure-code/python-package-structure.md:63
msgid "Click here to read about our packaging documentation requirements."
msgstr "Haga clic aquí para leer sobre nuestros requisitos de documentación de empaquetado."

#: ../../package-structure-code/python-package-structure.md:70
msgid ""
"While we recommend the **src/** layout we also review the **flat** layout"
" here. Both are used in the Python ecosystem."
msgstr ""
"Aunque recomendamos el diseño **src/**, también revisamos el diseño **flat** aquí. "
"Ambos se utilizan en el ecosistema de Python."

#: ../../package-structure-code/python-package-structure.md:72
msgid "Example scientific packages that use **src/package** layout"
msgstr "Ejemplos de paquetes científicos que utilizan el diseño **src/package**"

#: ../../package-structure-code/python-package-structure.md:74
msgid "[Sourmash](https://github.com/sourmash-bio/sourmash)"
msgstr ""

#: ../../package-structure-code/python-package-structure.md:75
msgid "[bokeh](https://github.com/bokeh/bokeh)"
msgstr ""

#: ../../package-structure-code/python-package-structure.md:76
msgid "[openscm](https://github.com/openscm/openscm-runner)"
msgstr ""

#: ../../package-structure-code/python-package-structure.md:77
msgid "[awkward](https://github.com/scikit-hep/awkward)"
msgstr ""

#: ../../package-structure-code/python-package-structure.md:78
msgid "[poliastro](https://github.com/poliastro/poliastro/)"
msgstr ""

#: ../../package-structure-code/python-package-structure.md:82
msgid "The src/ layout and testing"
msgstr "El diseño src/ y los tests o pruebas"

#: ../../package-structure-code/python-package-structure.md:84
msgid ""
"The benefit of using the **src/package** layout, particularly if you are "
"creating a new package, is that it ensures tests are run against the "
"installed version of your package rather than the files in your package "
"working directory. If you run your tests on your files rather than the "
"installed version, you may be missing issues that users encounter when "
"your package is installed."
msgstr ""
"El beneficio de usar el diseño **src/package**, particularmente si está "
"creando un nuevo paquete, es que asegura que las pruebas se ejecuten contra "
"la versión instalada de su paquete en lugar de los archivos en el directorio "
"de trabajo de su paquete. Si ejecuta sus pruebas en sus archivos en lugar de "
"la versión instalada, es posible que se pierda problemas que los usuarios "
"encuentran cuando su paquete está instalado."

#: ../../package-structure-code/python-package-structure.md:91
msgid ""
"If `tests/` are outside of the **src/package** directory, they aren't "
"included in the package wheel. This makes your package size slightly "
"smaller which then places places a smaller storage burden on PyPI which "
"has over 400,000 packages to support."
msgstr ""
"Si `tests/` están fuera del directorio **src/package**, no se incluyen en la "
"rueda del paquete. Esto hace que el tamaño de su paquete sea ligeramente "
"más pequeño, lo que a su vez genera un almacenamiento más pequeño "
"en PyPI, que tiene más de 400,000 paquetes."

#: ../../package-structure-code/python-package-structure.md:93
msgid ""
"[Read more about reasons to use the **src/package** "
"layout](https://hynek.me/articles/testing-packaging/)"
msgstr ""
"[Lea más sobre las razones para usar el diseño"
" **src/package**](https://hynek.me/articles/testing-packaging/)"

#: ../../package-structure-code/python-package-structure.md:95
msgid "How Python discovers and prioritizes importing modules"
msgstr "¿Cómo descubre y prioriza Python la importación de módulos?"

#: ../../package-structure-code/python-package-structure.md:97
msgid ""
"By default, Python adds a module in your current working directory to the"
" front of the Python module search path."
msgstr ""
"De forma predeterminada, Python agrega un módulo en su directorio de trabajo "
"actual al principio de la ruta de búsqueda de módulos de Python."

#: ../../package-structure-code/python-package-structure.md:99
msgid ""
"This means that if you run your tests in your package's working "
"directory, using a flat layout, `/package/module.py`, Python will "
"discover `package/module.py` file before it discovers the installed "
"package."
msgstr ""
"Esto significa que si ejecuta sus pruebas en el directorio de trabajo de su "
"paquete, utilizando un diseño plano, `/package/module.py`, Python descubrirá "
"el archivo `package/module.py` antes de que descubra el paquete instalado."

#: ../../package-structure-code/python-package-structure.md:101
msgid ""
"However, if your package lives in a src/ directory structure "
"**src/package** then it won't be, by default, added to the Python path. "
"This means that when you import your package, Python will be forced to  "
"search the active environment (which has your package installed)."
msgstr ""
"Sin embargo, si su paquete se encuentra en una estructura de directorio src/ "
"**src/package**, entonces no se agregará, por defecto, a la ruta de Python. "
"Esto significa que cuando importe su paquete, Python se verá obligado a buscar "
"en el entorno activo (que tiene su paquete instalado)."

#: ../../package-structure-code/python-package-structure.md:103
msgid ""
"Note: Python versions 3.11 and above have a path setting that can be "
"adjusted to ensure the priority is to use installed packages first (e.g. "
"`PYTHONSAFEPATH`)."
msgstr ""
"Nota: Las versiones de Python 3.11 y superiores tienen un ajuste de ruta que "
"se puede modificar para garantizar que la prioridad sea utilizar primero los "
"paquetes instalados (por ejemplo, `PYTHONSAFEPATH`)."

#: ../../package-structure-code/python-package-structure.md:106
msgid "Sometimes tests are needed in a distribution"
msgstr "A veces se necesitan pruebas en una distribución"

#: ../../package-structure-code/python-package-structure.md:108
msgid ""
"We do not recommend including tests as part of your package wheel by "
"default. However, not including tests in your package distribution will "
"make it harder for people other than yourself to test whether your "
"package is functioning correctly on their system. If you have a small "
"test suite (Python files + data), and think your users may want to run "
"tests locally on their systems, you can include tests by moving the "
"`tests/` directory into the **src/package** directory (see example "
"below)."
msgstr ""
"No recomendamos incluir pruebas como parte de su rueda de paquete de forma "
"predeterminada. Sin embargo, no incluir pruebas en su distribución de paquete "
"hará que sea más difícil para las personas que no sean usted mismo probar si "
"su paquete funciona correctamente en su sistema. Si tiene un conjunto de pruebas "
"pequeño (archivos Python + datos) y cree que sus usuarios pueden querer ejecutar "
"pruebas localmente en sus sistemas, puede incluir pruebas moviendo el directorio "
"`tests/` al directorio **src/package** (ver ejemplo a continuación)."

#: ../../package-structure-code/python-package-structure.md:117
msgid ""
"Including the **tests/** directory in your **src/package** directory "
"ensures that tests will be included in your package's wheel."
msgstr ""
"Incluir el directorio **tests/** en su directorio **src/package** asegura que "
"las pruebas se incluirán en la rueda de su paquete."

#: ../../package-structure-code/python-package-structure.md:119
msgid ""
"Be sure to read the [pytest documentation for more about including tests "
"in your package "
"distribution](https://docs.pytest.org/en/7.2.x/explanation/goodpractices.html#choosing-a"
"-test-layout-import-rules)."
msgstr ""
"Asegúrese de leer la [documentación de pytest para obtener más información "
"sobre cómo incluir pruebas en su distribución de paquete](https://docs.pytest.org/en/"
"7.2.x/explanation/goodpractices.html#choosing-a-test-layout-import-rules)."

#: ../../package-structure-code/python-package-structure.md:121
msgid "Challenges with including tests and data in a package wheel"
msgstr "Desafíos al incluir pruebas y datos en una rueda de paquete"

#: ../../package-structure-code/python-package-structure.md:124
msgid ""
"Tests, especially when accompanied by test data can create a few small "
"challenges including:"
msgstr "Los tests, especialmente cuando van acompañados de datos de prueba, "
"pueden crear algunos pequeños desafíos, incluyendo:"

#: ../../package-structure-code/python-package-structure.md:126
msgid ""
"Take up space in your distribution which will build up over time as "
"storage space on PyPI"
msgstr ""
"Ocupar espacio en su distribución, lo que se acumulará con el tiempo en PyPI"

#: ../../package-structure-code/python-package-structure.md:127
msgid "Large file sizes can also slow down package install."
msgstr "Archivos grandes también pueden ralentizar la instalación del paquete."

#: ../../package-structure-code/python-package-structure.md:129
msgid ""
"However, in some cases, particularly in the scientific Python ecosystems "
"you may need to include tests."
msgstr ""
"Sin embargo, en algunos casos, particularmente en los ecosistemas científicos "
"de Python, es posible que necesite incluir pruebas."

#: ../../package-structure-code/python-package-structure.md:132
msgid "**Don't include test suite datasets in your package**"
msgstr "**No incluya conjuntos de datos de pruebas en su paquete**"

#: ../../package-structure-code/python-package-structure.md:134
msgid ""
"If you do include your tests in your package distribution, we strongly "
"discourage you from including data in your test suite directory. Rather, "
"host your test data in a repository such as Figshare or Zenodo. Use a "
"tool such as [Pooch](https://www.fatiando.org/pooch/latest/) to access "
"the data when you (or a user) runs tests."
msgstr ""
"Si incluye sus pruebas en su distribución de paquete, le recomendamos "
"encarecidamente que no incluya datos en su directorio de pruebas. En su lugar, "
"aloje sus datos de prueba en un repositorio como Figshare o Zenodo. Utilice "
"una herramienta como [Pooch](https://www.fatiando.org/pooch/latest/) para "
"acceder a los datos cuando usted (o un usuario) ejecute pruebas."

#: ../../package-structure-code/python-package-structure.md:140
msgid ""
"Check out the testing section of our guide for more information about "
"tests."
msgstr ""
"Consulte la sección de pruebas de nuestra guía para obtener más información sobre las pruebas."

#: ../../package-structure-code/python-package-structure.md:142
msgid ""
"The **src/package** layout is semantically more clear. Code is always "
"found in the **src/package** directory, `tests/` and `docs/`are in the "
"root directory."
msgstr ""
"El diseño **src/package** es semánticamente más claro. El código siempre se "
"encuentra en el directorio **src/package**, `tests/` y `docs/` están en el "
"directorio raíz."

#: ../../package-structure-code/python-package-structure.md:146
msgid ""
"If your package tests require data, we suggest that you do NOT include "
"that data within your package structure. We will discuss this in more "
"detail in a tutorial. Include data in your package structure increases "
"the size of your distribution files. This places a maintenance toll on "
"repositories like PyPI and Anaconda.org that have to deal with thousands "
"of package uploads."
msgstr ""
"Si las pruebas de su paquete requieren datos, le sugerimos que NO incluya "
"esos datos en su estructura de paquete. Discutiremos esto con más detalle en "
"un tutorial. Incluir datos en su estructura de paquete aumenta el tamaño de "
"los archivos de su distribución. Esto impone un peaje de mantenimiento en "
"repositorios como PyPI y Anaconda.org que tienen que lidiar con miles de "
"paquetes subidos."

#: ../../package-structure-code/python-package-structure.md:153
msgid "About the flat Python package layout"
msgstr "Sobre el diseño plano de paquetes de Python"

#: ../../package-structure-code/python-package-structure.md:155
msgid "Currently most scientific packages use the **flat-layout** given:"
msgstr "Actualmente, la mayoría de los paquetes científicos utilizan el **diseño plano** dado:"

#: ../../package-structure-code/python-package-structure.md:157
msgid ""
"It's the most commonly found layout with the scientific Python ecosystem "
"and people tend to look to other packages / maintainers that they respect"
" for examples of how to build Python packages."
msgstr ""
"Es el diseño más común en el ecosistema científico de Python "
"y las personas tienden a buscar otros paquetes / mantenedores que respetan "
"como ejemplos de cómo construir paquetes de Python."

#: ../../package-structure-code/python-package-structure.md:160
msgid ""
"Many Python tools depend upon tools in other language and / or complex "
"builds with compilation steps. Many developers thus appreciate / are used"
" to features of the flat layout."
msgstr ""
"Muchas herramientas de Python dependen de herramientas en otros idiomas y/o "
"construcciones complejas con pasos de compilación. Por lo tanto, muchos "
"desarrolladores aprecian/están acostumbrados a las características del diseño plano."

#: ../../package-structure-code/python-package-structure.md:164
msgid ""
"While we present this layout here in our guide, we suggest that those "
"just getting started with python packaging start with the src/package "
"layout discussed above. Numerous packages in the ecosystem [have had to "
"move to a src/ layout](https://github.com/scikit-build/cmake-python-"
"distributions/pull/145)"
msgstr ""
"Aunque presentamos este diseño aquí en nuestra guía, sugerimos que aquellos "
"que recién comienzan con el empaquetado de Python comiencen con el diseño "
"src/package discutido anteriormente. Numerosos paquetes en el ecosistema "
"[han tenido que moverse a un diseño src/]"
"(https://github.com/scikit-build/cmake-python-"
"distributions/pull/145)"

#: ../../package-structure-code/python-package-structure.md:169
msgid "Why most scientific Python packages do not use source"
msgstr "¿Por qué la mayoría de los paquetes científicos de Python no usan el código fuente?"

#: ../../package-structure-code/python-package-structure.md:172
msgid ""
"In most cases the advantages of using the **src/package** layout for "
"larger scientific packages that already use flat approach are not worth "
"it. Moving from a flat layout to a **src/package** layout would come at a"
" significant cost to maintainers."
msgstr ""
"En la mayoría de los casos, las ventajas de usar el diseño **src/package** "
"para paquetes científicos más grandes que ya utilizan un enfoque plano no "
"merecen la pena. Pasar de un diseño plano a un diseño **src/package** "
"supondría un costo significativo para los mantenedores."

#: ../../package-structure-code/python-package-structure.md:177
msgid ""
"However, the advantages of using the  **src/package** layout for a "
"beginner are significant. As such, we recommend that if you are getting "
"started with creating a package, that you consider using a  "
"**src/package** layout."
msgstr ""
"Sin embargo, las ventajas de usar el diseño **src/package** para un principiante "
"son significativas. Por lo tanto, recomendamos que si está comenzando a crear un "
"paquete, considere usar un diseño **src/package**."

#: ../../package-structure-code/python-package-structure.md:182
msgid "What does the flat layout structure look like?"
msgstr "¿Cómo es la estructura del diseño plano?"

#: ../../package-structure-code/python-package-structure.md:184
msgid "The flat layout's primary characteristics are:"
msgstr "Las características principales del diseño plano son:"

#: ../../package-structure-code/python-package-structure.md:186
msgid ""
"The source code for your package lives in a directory with your package's"
" name in the root of your directory"
msgstr ""
"El código fuente de su paquete se encuentra en un directorio con el nombre de "
"su paquete en la raíz de su directorio"

#: ../../package-structure-code/python-package-structure.md:188
msgid ""
"Often the `tests/` directory also lives within that same `package` "
"directory."
msgstr ""
"A menudo, el directorio `tests/` también se encuentra dentro de ese mismo "
"directorio `package`."

#: ../../package-structure-code/python-package-structure.md:190
msgid ""
"Below you can see the recommended structure of a scientific Python "
"package using the flat layout."
msgstr ""
"A continuación, puede ver la estructura recomendada de un paquete científico "
"de Python que utiliza el diseño plano."

#: ../../package-structure-code/python-package-structure.md:212
msgid "Benefits of using the flat layout in your Python package"
msgstr "Beneficios de usar el diseño plano en su paquete de Python"

#: ../../package-structure-code/python-package-structure.md:214
msgid ""
"There are some benefits to the scientific community in using the flat "
"layout."
msgstr ""
"Existen algunos beneficios para la comunidad científica al utilizar el diseño plano."

#: ../../package-structure-code/python-package-structure.md:216
msgid ""
"This structure has historically been used across the ecosystem and "
"packages using it are unlikely to change."
msgstr ""
"Esta estructura se ha utilizado históricamente en todo el ecosistema y es poco probable "
"que los paquetes que la utilizan cambien."

#: ../../package-structure-code/python-package-structure.md:218
msgid ""
"You can import the package directly from the root directory. For some "
"this is engrained in their respective workflows. However, for a beginner "
"the danger of doing this is that you are not developing and testing "
"against the installed version of your package. Rather, you are working "
"directly with the flat files."
msgstr ""
"Puede importar el paquete directamente desde el directorio raíz. Para algunos, "
"esto está arraigado en sus respectivos flujos de trabajo. Sin embargo, para un "
"principiante, el peligro de hacer esto es que no está desarrollando y probando "
"contra la versión instalada de su paquete. En cambio, está trabajando directamente "
"con los archivos planos."

#: ../../package-structure-code/python-package-structure.md:224
msgid "Core scientific Python packages that use the flat layout"
msgstr "Paquetes científicos de Python que utilizan el diseño plano"

#: ../../package-structure-code/python-package-structure.md:227
msgid "[numpy](https://github.com/numpy/numpy)"
msgstr ""

#: ../../package-structure-code/python-package-structure.md:228
msgid "[scipy](https://github.com/scipy/scipy)"
msgstr ""

#: ../../package-structure-code/python-package-structure.md:229
msgid "[pandas](https://github.com/pandas-dev/pandas)"
msgstr ""

#: ../../package-structure-code/python-package-structure.md:230
msgid "[xarray](https://github.com/pydata/xarray)"
msgstr ""

#: ../../package-structure-code/python-package-structure.md:231
msgid "[Jupyter-core](https://github.com/jupyter/jupyter_core)"
msgstr ""

#: ../../package-structure-code/python-package-structure.md:232
msgid "[Jupyter notebook](https://github.com/jupyter/notebook)"
msgstr ""

#: ../../package-structure-code/python-package-structure.md:233
msgid "[scikit-learn](https://github.com/scikit-learn/scikit-learn)"
msgstr ""

#: ../../package-structure-code/python-package-structure.md:235
msgid ""
"It would be a significant maintenance cost and burden to move all of "
"these packages to a different layout. The potential benefits of the "
"source layout for these tools is not worth the maintenance investment."
msgstr ""
"Sería un costo y una carga de mantenimiento significativos mover todos estos "
"paquetes a un diseño diferente. Los posibles beneficios del diseño src para "
"estas herramientas no valen la inversión en mantenimiento."

#: ../../package-structure-code/python-package-versions.md:1
msgid "Creating New Versions of Your Python Package"
msgstr ""

#: ../../package-structure-code/python-package-versions.md:6
msgid "Key Takeways"
msgstr ""

#: ../../package-structure-code/python-package-versions.md:8
msgid ""
"Follow [semantic versioning guidelines (SemVer) "
"rules](https://semver.org/) when bumping (increasing) your Python's "
"package version; for example a major version bump (version 1.0 --> 2.0) "
"equates to breaking changes in your package's code for a user."
msgstr ""

#: ../../package-structure-code/python-package-versions.md:9
msgid ""
"You may want to consider using a plugin like hatch_vsc for managing "
"versions of your package - if you want to have a GitHub only release "
"workflow."
msgstr ""

#: ../../package-structure-code/python-package-versions.md:10
msgid ""
"Otherwise most major package build tools such as Hatch, Flit and PDM have"
" a version feature that will help you update your package's version"
msgstr ""

#: ../../package-structure-code/python-package-versions.md:11
msgid "Avoid updating your packages version number manually by hand in your code!"
msgstr ""

#: ../../package-structure-code/python-package-versions.md:14
msgid ""
"pyOpenSci recommends that you follow the [Python PEP "
"440](https://peps.python.org/pep-0440) which recommends using [semantic "
"versioning guidelines](https://www.python.org/dev/peps/pep-0440"
"/#semantic-versioning) when assigning release values to new versions of "
"your Python package."
msgstr ""

#: ../../package-structure-code/python-package-versions.md:18
msgid ""
"[Semantic versioning](https://semver.org/) is an approach to updating "
"package versions that considers the type and extent of a change that you "
"are making to the package code. Being consistent with how and when you "
"update your package versions is important as:"
msgstr ""

#: ../../package-structure-code/python-package-versions.md:23
msgid ""
"It helps your users (which might include other developers that depend on "
"your package) understand the extent of changes to a package."
msgstr ""

#: ../../package-structure-code/python-package-versions.md:24
msgid ""
"It helps your development team make decisions about when to bump a "
"package version based on standard rules."
msgstr ""

#: ../../package-structure-code/python-package-versions.md:26
msgid ""
"Consistent version increases following semver rules mean that values of "
"your package version explain the extent of the changes made in the code "
"base from version to version. thus your package version numbers become "
"\"expressive\" in the same way that naming code variables well can [make "
"code expressive](https://medium.com/@daniel.oliver.king/writing-"
"expressive-code-b69ef7a5a2fa)."
msgstr ""

#: ../../package-structure-code/python-package-versions.md:28
msgid "A note about versioning"
msgstr ""

#: ../../package-structure-code/python-package-versions.md:29
msgid ""
"In some cases even small version changes can turn a package update into a"
" breaking change for some users. What is also important is that you "
"document how you version your code and if you can, also document your "
"deprecation policy for code."
msgstr ""

#: ../../package-structure-code/python-package-versions.md:37
msgid "SemVer rules"
msgstr ""

#: ../../package-structure-code/python-package-versions.md:39
msgid "Following SemVer, your bump your package version to a:"
msgstr ""

#: ../../package-structure-code/python-package-versions.md:41
msgid "patch (1.1.1 --> 1.1.**2**)"
msgstr ""

#: ../../package-structure-code/python-package-versions.md:42
msgid "minor (1.1.1 --> 1.**2**.1)"
msgstr ""

#: ../../package-structure-code/python-package-versions.md:43
msgid "major (1.1.1 --> **2**.1.1)"
msgstr ""

#: ../../package-structure-code/python-package-versions.md:45
msgid "version number change based on the following rules:"
msgstr ""

#: ../../package-structure-code/python-package-versions.md:47
msgid "Given a version number MAJOR.MINOR.PATCH, increment the:"
msgstr ""

#: ../../package-structure-code/python-package-versions.md:49
msgid "**MAJOR version** when you make incompatible API changes"
msgstr ""

#: ../../package-structure-code/python-package-versions.md:50
msgid ""
"**MINOR version** when you add functionality in a backwards compatible "
"manner"
msgstr ""

#: ../../package-structure-code/python-package-versions.md:51
msgid ""
"**PATCH version** when you make backwards compatible bug fixes Additional"
" labels for pre-release and build metadata are available as extensions to"
" the MAJOR.MINOR.PATCH format."
msgstr ""

#: ../../package-structure-code/python-package-versions.md:56
msgid ""
"Some people prefer to use [calver](https://calver.org/index.html) for "
"versioning. It may be a simpler-to-use system given it relies upon date "
"values associated with released versions. However, calver does not "
"provide a user with a sense of when a new version might break an existing"
" build. As such we still suggest semver."
msgstr ""

#: ../../package-structure-code/python-package-versions.md:59
msgid ""
"pyOpenSci will never require semver in a peer review as long as a package"
" has a reasonable approach to versioning!"
msgstr ""

#: ../../package-structure-code/python-package-versions.md:63
msgid "Avoid manually updating Python package version numbers if you can"
msgstr ""

#: ../../package-structure-code/python-package-versions.md:65
msgid ""
"Often times you may want to have your package version value in multiple "
"locations. One example of this is that it might be both an attribute in "
"your package **version** and also called in your documentation."
msgstr ""

#: ../../package-structure-code/python-package-versions.md:70
msgid ""
"We recommend that you avoid manual updates of your package version number"
" to avoid human-error. It is better practice to keep your version number "
"in one location."
msgstr ""

#: ../../package-structure-code/python-package-versions.md:74
msgid ""
"If you can't implement a single location version, then consider using a "
"tool like hatch, PDM or bump2version that will update the version values "
"for you - throughout your package."
msgstr ""

#: ../../package-structure-code/python-package-versions.md:78
msgid ""
"Below we discuss some tools that you can use to manage updating Python "
"package versions."
msgstr ""

#: ../../package-structure-code/python-package-versions.md:83
msgid "Tools to manage versions for your Python package"
msgstr ""

#: ../../package-structure-code/python-package-versions.md:85
msgid ""
"There are a handful of tools that are widely used in the scientific "
"ecosystem that you can use to manage your package versions. Some of these"
" tools are built into or work with your chosen [packaging build tools "
"that discussed in this chapter.](python-package-build-tools)"
msgstr ""

#: ../../package-structure-code/python-package-versions.md:91
msgid "Below, we provide an overview of these tools."
msgstr ""

#: ../../package-structure-code/python-package-versions.md:97
msgid ""
"There are three general groups of tools that you can use to manage "
"package versions:"
msgstr ""

#: ../../package-structure-code/python-package-versions.md:100
msgid ""
"**semantic release tools:** These tools will automagically determine what"
" type of version bump to use using the text in your commit messages. "
"Below we discuss [Python Semantic Release](https://python-semantic-"
"release.readthedocs.io/en/latest/) as a Python tool that implements a "
"semantic versioning approach."
msgstr ""

#: ../../package-structure-code/python-package-versions.md:102
msgid ""
"**Manual incremental bump tools:** Tools like "
"[Hatch](https://hatch.pypa.io/latest/version/) offer version bumping "
"within your package. Normally this is implemented at the command link for"
" instance `hatch version major` would bump your project from 0.x to 1.0."
msgstr ""

#: ../../package-structure-code/python-package-versions.md:103
msgid ""
"**Version Control System tools:** Finally there are tools that rely on "
"your version control system to track versions. These tools often are "
"plugins to your package build tool (ex: setuptools build or hatchling). "
"We discuss this option below assuming that you are using **.git tags** "
"and **GitHub** to manage your package repository."
msgstr ""

#: ../../package-structure-code/python-package-versions.md:105
msgid "Semantic release, vs version control based vs manual version bumping"
msgstr ""

#: ../../package-structure-code/python-package-versions.md:107
msgid ""
"Generally semantic release and version control system tools can be setup "
"to run automatically on GitHub using GitHub actions. This means that you "
"can create a workflow where a GitHub release and associated new version "
"tag is used to trigger an automated build that:"
msgstr ""

#: ../../package-structure-code/python-package-versions.md:113
msgid "Builds your package and updates the version following the new tag"
msgstr ""

#: ../../package-structure-code/python-package-versions.md:114
msgid "Tests the build and publishes to test PyPI"
msgstr ""

#: ../../package-structure-code/python-package-versions.md:115
msgid "Publishes the package to PyPI"
msgstr ""

#: ../../package-structure-code/python-package-versions.md:118
msgid ""
"Bumping a package version refers to the step of increasing the package "
"version after a set number of changes have been made to it. For example, "
"you might bump from version 0.8 to 0.9 of a package. or from 0.9 to 1.0."
msgstr ""

#: ../../package-structure-code/python-package-versions.md:122
msgid ""
"Using semantic versioning, there are three main \"levels\" of versions "
"that you might consider:"
msgstr ""

#: ../../package-structure-code/python-package-versions.md:125
msgid "Major, minor and patch. These are described in more detail below."
msgstr ""

#: ../../package-structure-code/python-package-versions.md:128
msgid "Tools for bumping Python package versions"
msgstr ""

#: ../../package-structure-code/python-package-versions.md:130
msgid ""
"In this section we discuss the following tools for managing your Python "
"package's version:"
msgstr ""

#: ../../package-structure-code/python-package-versions.md:133
msgid "hatch &"
msgstr ""

#: ../../package-structure-code/python-package-versions.md:134
msgid "hatch_vcs plugin for hatchling"
msgstr ""

#: ../../package-structure-code/python-package-versions.md:135
msgid "setuptools-scm"
msgstr ""

#: ../../package-structure-code/python-package-versions.md:136
msgid "python-semantic-version"
msgstr ""

#: ../../package-structure-code/python-package-versions.md:138
msgid "Tool 1: Hatch and other build tools that offer incremental versioning"
msgstr ""

#: ../../package-structure-code/python-package-versions.md:140
msgid ""
"Many of the modern build tool front end tools offer version support that "
"follow semantic versioning rules. These tools are different from Python "
"Semantic Version in that they do not require specific commit messages to "
"implement version. Rather, they allow you to update the version at the "
"command line using commands such as:"
msgstr ""

#: ../../package-structure-code/python-package-versions.md:146
msgid "`tool-name version update major`"
msgstr ""

#: ../../package-structure-code/python-package-versions.md:147
msgid "`tool-name version update minor`"
msgstr ""

#: ../../package-structure-code/python-package-versions.md:149
msgid ""
"[Hatch](https://hatch.pypa.io/latest/version/), for instance offers "
"`hatch version minor` which will modify the version of your package "
"incrementally. With **Hatch** the version value will be found in your "
"`pyproject.toml` file. <!-- TODO double check this -->"
msgstr ""

#: ../../package-structure-code/python-package-versions.md:152
msgid "Hatch (or other tools like PDM) Pros"
msgstr ""

#: ../../package-structure-code/python-package-versions.md:154
msgid "Easy to use version updates locally using a single tool!"
msgstr ""

#: ../../package-structure-code/python-package-versions.md:156
msgid "Hatch (or other tools like PDM) Cons"
msgstr ""

#: ../../package-structure-code/python-package-versions.md:158
msgid ""
"There will be some setup involved to ensure package version is updated "
"throughout your package"
msgstr ""

#: ../../package-structure-code/python-package-versions.md:160
msgid "Tool 2: Hatch_vcs & hatchling build back-end"
msgstr ""

#: ../../package-structure-code/python-package-versions.md:162
msgid ""
"[hatch_vcs](https://github.com/ofek/hatch-vcs) is a versioning tool that "
"allows you to manage package versions using **git tags**. Hatch_vcs "
"creates a **\\_version.py** file in your package ecosystem that keeps "
"track of the package's current version."
msgstr ""

#: ../../package-structure-code/python-package-versions.md:167
msgid ""
"Hatch keeps track of your package's version in a `_version.py` file. "
"Storing the version in a single file managed by Hatch provides your "
"package with a \"single source of truth\" value for the version number. "
"This in turn eliminates potential error associated with manually updating"
" your package's version."
msgstr ""

#: ../../package-structure-code/python-package-versions.md:173
msgid ""
"When you (or your CI system) build your package, hatch checks the current"
" tag number for your package. if it has increased, it will update the "
"**\\_version.py** file with the new value."
msgstr ""

#: ../../package-structure-code/python-package-versions.md:176
msgid ""
"Thus, when you create a new tag or a new release with a tag and build "
"your package, Hatch will access the new tag value and use it to update "
"your package version."
msgstr ""

#: ../../package-structure-code/python-package-versions.md:179
msgid ""
"To use **hatch_vcs** you will need to use the **hatchling** build back "
"end."
msgstr ""

#: ../../package-structure-code/python-package-versions.md:182
msgid ""
"Hatchling can also be used with any of the modern build tools including "
"**Flit** and **PDM** if you prefer those for your day to day workflow."
msgstr ""

#: ../../package-structure-code/python-package-versions.md:187
msgid "Hatch example setup in your pyproject.toml"
msgstr ""

#: ../../package-structure-code/python-package-versions.md:196
msgid ""
"**Hatch_vcs** supports a fully automated package release and build, and "
"push to PyPI workflow on GitHub."
msgstr ""

#: ../../package-structure-code/python-package-versions.md:206
msgid ""
"If you use **setuptools_scm**, then you might find **hatch_vcs** and "
"**hatchling** to be the modern equivalent to your current setuptools / "
"build workflow."
msgstr ""

#: ../../package-structure-code/python-package-versions.md:209
msgid "hatch_vcs Pros"
msgstr ""

#: ../../package-structure-code/python-package-versions.md:211
msgid "Hatch supports modern Python packaging standards"
msgstr ""

#: ../../package-structure-code/python-package-versions.md:212
#: ../../package-structure-code/python-package-versions.md:238
msgid "It creates a single-source file that contains your package version."
msgstr ""

#: ../../package-structure-code/python-package-versions.md:213
#: ../../package-structure-code/python-package-versions.md:239
msgid "You never manually update the package version"
msgstr ""

#: ../../package-structure-code/python-package-versions.md:214
#: ../../package-structure-code/python-package-versions.md:240
msgid ""
"You can automate writing the version anywhere in your package including "
"your documentation!"
msgstr ""

#: ../../package-structure-code/python-package-versions.md:215
#: ../../package-structure-code/python-package-versions.md:241
msgid ""
"It supports a purely GitHub based release workflow. This simplifies "
"maintenance workflows."
msgstr ""

#: ../../package-structure-code/python-package-versions.md:216
#: ../../package-structure-code/python-package-versions.md:242
msgid ""
"Version number is updated in your package via a hidden `_version.py` "
"file. There is no manual configuration updates required."
msgstr ""

#: ../../package-structure-code/python-package-versions.md:217
#: ../../package-structure-code/python-package-versions.md:243
msgid ""
"While we like detailed commit messages (See Python Semantic Version "
"below), we know that sometimes when maintaining a package specific "
"guidelines around commit messages can be hard to apply and manage."
msgstr ""

#: ../../package-structure-code/python-package-versions.md:219
msgid "hatch_vcs Cons"
msgstr ""

#: ../../package-structure-code/python-package-versions.md:221
msgid ""
"In a CI workflow you will end up manually entering or creating the "
"version number via a tag on GitHub. But you could locally develop a build"
" to \"bump\" tag versions"
msgstr ""

#: ../../package-structure-code/python-package-versions.md:224
msgid "Tool 3: setuptools-scm versioning using git tags"
msgstr ""

#: ../../package-structure-code/python-package-versions.md:226
msgid ""
"[`Setuptools_scm`](https://github.com/pypa/setuptools_scm/) is an "
"extension that you can use with setuptools to manage package versions. "
"**Setuptools_scm** operates the same way that **hatch_vcs** (discussed "
"above) does. It stores a version in a **\\_version.py** file and relies "
"on (**git**) tags to determine the package's current version."
msgstr ""

#: ../../package-structure-code/python-package-versions.md:232
msgid ""
"If you are using **setuptools** as your primary build tool, then "
"`*setuptools-scm` is a good choice as:"
msgstr ""

#: ../../package-structure-code/python-package-versions.md:236
msgid "setuptools_scm Pros"
msgstr ""

#: ../../package-structure-code/python-package-versions.md:244
msgid "**setuptools** is still the most commonly used Python packaging build tool"
msgstr ""

#: ../../package-structure-code/python-package-versions.md:246
msgid "setuptools_scm Cons"
msgstr ""

#: ../../package-structure-code/python-package-versions.md:248
msgid ""
"In a CI workflow you will end up manually entering or creating the "
"version number via a tag on GitHub."
msgstr ""

#: ../../package-structure-code/python-package-versions.md:249
msgid "Not well documented"
msgstr ""

#: ../../package-structure-code/python-package-versions.md:250
msgid ""
"Because setuptools will always have to support backwards compatibility it"
" will always be slower in adopting modern Python packaging conventions."
msgstr ""

#: ../../package-structure-code/python-package-versions.md:252
msgid ""
"As such you might consider using a more modern tool such as **hatch_vcs**"
" and **hatchling** to build your package and manage package versions."
msgstr ""

#: ../../package-structure-code/python-package-versions.md:264
msgid ""
"Tool 4: [Python semantic release](https://python-semantic-"
"release.readthedocs.io/en/latest/)"
msgstr ""

#: ../../package-structure-code/python-package-versions.md:266
msgid ""
"Python semantic release uses a commit message workflow that updates the "
"version of your package based on keywords found in your commit messages. "
"As the name implies, Python Semantic Release follows semver release "
"rules."
msgstr ""

#: ../../package-structure-code/python-package-versions.md:271
msgid ""
"With Python Semantic Release, versions are triggered using specific "
"language found in a git commit message."
msgstr ""

#: ../../package-structure-code/python-package-versions.md:274
msgid ""
"For example, the words `fix(attribute_warning):` trigger Python Semantic "
"Release to implement a **patch** version bump. For instance if your "
"package was at version 1.1.0 and you made the commit below with the words"
" fix(text-here), Python Semantic Release would bump your package to "
"version 1.1.1."
msgstr ""

#: ../../package-structure-code/python-package-versions.md:284
msgid ""
"Similarly a feature (`feat()`) triggers a minor version bump. For example"
" from version 1.1 to version 1.2"
msgstr ""

#: ../../package-structure-code/python-package-versions.md:292
msgid ""
"You can find a thoughtful discussion of python semantic version [in this "
"Python package guide](https://py-pkgs.org/07-releasing-versioning"
"#automatic-version-bumping). Note that the guide hasn't been updated "
"since 2020 and will potentially be updated in the future! But for now, "
"some of the commands are dated but the content is still excellent."
msgstr ""

#: ../../package-structure-code/python-package-versions.md:295
msgid "Python Semantic Release Pros"
msgstr ""

#: ../../package-structure-code/python-package-versions.md:297
msgid "Follows semver versioning closely"
msgstr ""

#: ../../package-structure-code/python-package-versions.md:298
msgid ""
"Enforces maintainers using descriptive commit messages which can simplify"
" troubleshooting and ensure a cleaner and more self-describing git "
"history."
msgstr ""

#: ../../package-structure-code/python-package-versions.md:300
msgid "Python Semantic Release Cons"
msgstr ""

#: ../../package-structure-code/python-package-versions.md:302
msgid ""
"Requires very specific commit language to work. In practice some "
"maintainers and contributors may not be able to maintain that level of "
"specificity in commit messages (NOTE: there are bots that will check git "
"commit messages in a repo)"
msgstr ""

#: ../../package-structure-code/python-package-versions.md:303
msgid ""
"Release happens at the command line. This makes is harder to implement a "
"GitHub based release workflow as the wrong commit message could trigger a"
" release."
msgstr ""

#: ../../package-structure-code/python-package-versions.md:304
msgid ""
"The version number is manually updated in a configuration file such as "
"`pyproject.toml` vs. in a package **\\_version.py** file."
msgstr ""
