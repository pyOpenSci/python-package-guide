# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2025, pyOpenSci
# This file is distributed under the same license as the pyOpenSci Python
# Package Guide package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2025.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: pyOpenSci Python Package Guide \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-01-18 13:00-0500\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: es\n"
"Language-Team: es <LL@li.org>\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.16.0\n"

#: ../../continuous-integration/ci.md:2
msgid ""
"Continuous Integration and Continuous Deployment (CI/CD) For Python "
"Packages"
msgstr ""

#: ../../continuous-integration/ci.md:4
msgid ""
"When you develop, work on, and contribute to software, there is more to "
"consider than just writing code. Having tests and checks ensures that "
"your code runs reliably and follows a consistent format is also "
"important. You can use **Continuous Integration (CI)** and **Continuous "
"Deployment (CD)** to run tests and checks on your code every time someone"
" suggests a change online in a platform like GitHub or GitLab."
msgstr ""

#: ../../continuous-integration/ci.md:11
msgid ""
"**Continuous Integration (CI):** Automates the process of running tests, "
"code checks, and other workflows each time code is updated."
msgstr ""

#: ../../continuous-integration/ci.md:13
msgid ""
"**Continuous Deployment (CD):** Extends CI by allowing you to automate "
"publishing your package to PyPI, publishing your documentation, and more."
msgstr ""

#: ../../continuous-integration/ci.md:15
msgid ""
"CI and CD streamline software development by automating repetitive tasks "
"and ensuring code quality and consistency. Having CI setup also makes it "
"easier for new contributors to contribute to your code base without "
"setting up all your test suites and other local checks."
msgstr ""

#: ../../continuous-integration/ci.md:20
msgid "What is continuous integration?"
msgstr ""

#: ../../continuous-integration/ci.md:22
msgid ""
"When youâ€™re ready to publish your code online, you can set up Continuous "
"Integration (CI). CI is a platform that allows you to specify and run "
"jobs or workflows you define. These workflows include:"
msgstr ""

#: ../../continuous-integration/ci.md:25
msgid "Running your test suite"
msgstr ""

#: ../../continuous-integration/ci.md:26
msgid "Running code checkers / linters / spellcheck"
msgstr ""

#: ../../continuous-integration/ci.md:27
msgid "Building your documentation"
msgstr ""

#: ../../continuous-integration/ci.md:29
msgid ""
"CI allows you to automate running workflows across a suite of "
"environments, including:"
msgstr ""

#: ../../continuous-integration/ci.md:31
msgid "environments containing different Python versions and"
msgstr ""

#: ../../continuous-integration/ci.md:32
msgid "different operating systems (Mac, Linux, Windows)."
msgstr ""

#: ../../continuous-integration/ci.md:34
msgid "What is Continuous Deployment (CD)?"
msgstr ""

#: ../../continuous-integration/ci.md:36
msgid ""
"Continuous deployment (CD) extends the CI process by automating the "
"deployment of code changes to production or staging environments. In the "
"case of your open source tool, CD can be used to:"
msgstr ""

#: ../../continuous-integration/ci.md:38
msgid "Automate publishing to PyPI"
msgstr ""

#: ../../continuous-integration/ci.md:39
msgid "Automate publishing your documentation to GitHub Pages or Read the Docs."
msgstr ""

#: ../../continuous-integration/ci.md:41
msgid ""
"It is also used once your conda-forge recipe is set up to keep your "
"package up to date on conda-forge."
msgstr ""

#: ../../continuous-integration/ci.md:43
msgid "Why use CI"
msgstr ""

#: ../../continuous-integration/ci.md:45
msgid ""
"CI can be configured to run a workflow on every commit pushed to GitHub "
"and every pull request opened. This ensures that any changes made to your"
" package are tested across environments before merging into the main "
"branch of your code."
msgstr ""

#: ../../continuous-integration/ci.md:47
msgid ""
"These checks are particularly useful if someone new is contributing to "
"your code. Every contributor's change will be tested when pushed to your "
"code repository."
msgstr ""

#: ../../continuous-integration/ci.md:49
msgid ""
"Together, CI and CD streamline the process of building, testing, and "
"deploying code. They aim to improve software development and publication "
"efficiency, quality, and reliability."
msgstr ""

#: ../../continuous-integration/ci.md:52
msgid ""
"All pyOpenSci packages must use some form of continuous integration. Even"
" if you are not planning to go through peer review, we strongly recommend"
" that you use continuous integration, too!"
msgstr ""

#: ../../continuous-integration/ci.md:55
msgid ""
"In the case of GitHub actions (which we will focus on here), CI workflows"
" are running on online servers that support GitHub."
msgstr ""

#: ../../continuous-integration/ci.md:57
msgid "CI / CD platforms"
msgstr ""

#: ../../continuous-integration/ci.md:59
msgid ""
"There are numerous platforms available for CI/CD. Here, we will focus on "
"GitHub Actions (GHA), built into GitHub. GitHub is the most commonly used"
" platform to store scientific open-source software."
msgstr ""

#: ../../continuous-integration/ci.md:62
msgid ""
"If you use [GitLab](https://about.gitlab.com/) CI/CD, many of the "
"principles described here will apply. However, the workflow files may "
"look different."
msgstr ""

#: ../../continuous-integration/ci.md:65
msgid "If you aren't sure, use GitHub Actions"
msgstr ""

#: ../../continuous-integration/ci.md:67
msgid ""
"While you are welcome to use the continuous integration platform of your "
"choice, we recommend GitHub Actions because it is free-to-use and "
"integrated tightly into the GitHub user interface. There is also an "
"entire store of GitHub action templates that you can easily use and adapt"
" to your own needs."
msgstr ""

#: ../../continuous-integration/ci.md:72
msgid "Other platforms that you may run into"
msgstr ""

#: ../../continuous-integration/ci.md:75
msgid ""
"[Appveyor:](https://www.appveyor.com/): Supports running tests on Windows"
" operating systems and predated the release of GitHub Actions. Today, "
"AppVeyor supports operating systems beyond Windows."
msgstr ""

#: ../../continuous-integration/ci.md:76
msgid ""
"[Travis CI:](https://www.travis-ci.com/) had been a common CI platform "
"choice in our ecosystem. Usage dropped after Travis CI ended free support"
" for open-source projects."
msgstr ""

#: ../../continuous-integration/ci.md:77
msgid ""
"[CircleCI:](https://circleci.com/) CircleCI can be useful for automated "
"builds of websites and documentation since it offers a preview of the PR "
"changes."
msgstr ""

#: ../../continuous-integration/ci.md:80
msgid "Embrace automation"
msgstr ""

#: ../../continuous-integration/ci.md:82
msgid ""
"By embracing CI/CD, you can ensure that your code runs as you expect it "
"to across the diverse landscapes of user environments. Further, you can "
"automate certain checks (and, in some cases, code fixes), including "
"linting and code style. You can even automate spell-checking your "
"documentation and docstrings!"
msgstr ""

#: ../../continuous-integration/index.md:5
msgid "What is CI?"
msgstr ""

#: ../../continuous-integration/index.md:5
msgid "Continuous Integration"
msgstr ""

#: ../../continuous-integration/index.md:2
msgid ""
"Continuous Integration (CI) and Continuous Deployment (CD) for your "
"Python package"
msgstr ""
