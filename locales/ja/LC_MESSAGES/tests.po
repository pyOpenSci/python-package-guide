# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2025, pyOpenSci
# This file is distributed under the same license as the pyOpenSci Python
# Package Guide package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2025.
#
# Translators:
# Tetsuo Koyama <tkoyama010@gmail.com>, 2025
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: pyOpenSci Python Package Guide\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-04-20 11:32+0900\n"
"PO-Revision-Date: 2025-04-14 18:12+0000\n"
"Last-Translator: Tetsuo Koyama <tkoyama010@gmail.com>, 2025\n"
"Language: ja\n"
"Language-Team: ja <LL@li.org>\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.17.0\n"

#: ../../tests/code-cov.md:1
msgid "Code coverage for your Python package test suite"
msgstr "Pythonパッケージのテストスイートのコードカバレッジ"

#: ../../tests/code-cov.md:3
msgid ""
"Code coverage measures how much of your package's code runs during "
"testing. Achieving high coverage can help ensure the reliability of your "
"codebase, but it’s not a guarantee of quality. Below, we outline key "
"considerations for using code coverage effectively."
msgstr ""
"コードカバレッジは、テスト中にパッケージのコードがどれだけ実行されるかを測定します。 "
"高いカバレッジを達成することは、コードベースの信頼性を確保するのに役立ちますが、品質を保証するものではありません。 "
"以下に、コードカバレッジを効果的に使用するための主な検討事項を概説します。"

#: ../../tests/code-cov.md:8
msgid "Why aim for high code coverage?"
msgstr "なぜ高いコードカバレッジを目指すのか？"

#: ../../tests/code-cov.md:10
msgid ""
"A good practice is to ensure that every line of your code runs at least "
"once during your test suite. This helps you:"
msgstr "良い習慣は、テストスイートの間に、コードのすべての行が少なくとも一度は実行されるようにすることです。これはあなたを助けます:"

#: ../../tests/code-cov.md:13
msgid "Identify untested parts of your codebase."
msgstr "コードベースのテストされていない部分を特定します。"

#: ../../tests/code-cov.md:14
msgid "Catch bugs that might otherwise go unnoticed."
msgstr "他の方法では気づかれないかもしれないバグをキャッチします。"

#: ../../tests/code-cov.md:15
msgid "Build confidence in your software's stability."
msgstr "ソフトウェアの安定性に自信を持てます。"

#: ../../tests/code-cov.md:17
msgid "Limitations of code coverage"
msgstr "コードカバレッジの限界"

#: ../../tests/code-cov.md:19
msgid "While high code coverage is valuable, it has its limits:"
msgstr "高いコードカバレッジは価値がありますが、それには限界があります:"

#: ../../tests/code-cov.md:21
msgid ""
"**Difficult-to-test code:** Some parts of your code might be challenging "
"to test, either due to complexity or limited resources."
msgstr "**テストしにくいコード:** コードの中には、複雑さや限られたリソースのために、テストが難しい部分があるかもしれません。"

#: ../../tests/code-cov.md:23
msgid ""
"**Missed edge cases:** Running all lines of code doesn’t guarantee that "
"edge cases are handled correctly."
msgstr "**見逃されたエッジケース:** すべてのコードを実行しても、エッジケースが正しく処理される保証はありません。"

#: ../../tests/code-cov.md:26
msgid ""
"Ultimately, you should focus on how your package will be used and ensure "
"your tests cover those scenarios adequately."
msgstr "最終的には、パッケージがどのように使用されるかに焦点を当て、テストがそのシナリオを十分にカバーするようにしなければなりません。"

#: ../../tests/code-cov.md:29
msgid "Tools for analyzing Python package code coverage"
msgstr "Pythonパッケージのコードカバレッジを分析するツール"

#: ../../tests/code-cov.md:31
msgid ""
"Some common services for analyzing code coverage are "
"[codecov.io](https://codecov.io/) and "
"[coveralls.io](https://coveralls.io/). These projects are free for open "
"source tools and will provide dashboards that tell you how much of your "
"codebase is covered during your tests. We recommend setting up an account"
" (on either CodeCov or Coveralls) and using it to keep track of your code"
" coverage."
msgstr ""
"コードカバレッジを分析するための一般的なサービスには、 [codecov.io](https://codecov.io/) と "
"[coveralls.io](https://coveralls.io/) があります。 "
"これらのプロジェクトはオープンソースのツールで無料であり、テスト中にコードベースがどの程度カバーされているかを示すダッシュボードを提供してくれます。"
" (CodeCovまたはCoverallsで) アカウントを設定し、コード・カバレッジを追跡するために使用することをお勧めします。"

#: ../../tests/code-cov.md:33
#, python-format
msgid ""
"Screenshot of the code cov service - showing test coverage for the "
"stravalib package. This image shows a list of package modules and the "
"associated number of lines and % lines covered by tests. At the top of "
"the image, you can see what branch is being evaluated and the path to the"
" repository."
msgstr ""
"code covサービスのスクリーンショット - stravalibパッケージのテストカバレッジを示します。 "
"この画像は、パッケージモジュールのリストと、関連する行数およびテスト対象行の割合を示しています。 "
"画像の上部には、評価対象のブランチとリポジトリへのパスが表示されています。"

#: ../../tests/code-cov.md:38
msgid ""
"The CodeCov platform is a useful tool if you wish to track code coverage "
"visually. Using it, you can not only get the same summary information "
"that you can get with the **pytest-cov** extension. You can also see what"
" lines are covered by your tests and which are not. Code coverage is "
"useful for evaluating unit tests and/or how much of your package code is "
"\"covered\". It, however, will not evaluate things like integration tests"
" and end-to-end workflows."
msgstr ""
"CodeCovプラットフォームは、コードカバレッジを視覚的に追跡したい場合に便利なツールです。これを使えば、 **pytest-cov** "
"拡張機能で得られるのと同じサマリー情報を得られるだけではありません。また、テストの対象になっているラインとそうでないラインを確認することもできます。コードカバレッジは、単体テストの評価や、パッケージのコードがどれだけ"
" \"カバー\" されているかを評価するのに役立ちます。しかし、統合テストやエンドツーエンドのワークフローなどは評価されません。"

#: ../../tests/code-cov.md:43
msgid "Typing & MyPy coverage"
msgstr "型 & MyPyのカバレッジ"

#: ../../tests/code-cov.md:44
msgid "You can also create and upload typing reports to CodeCov."
msgstr "また、型レポートを作成し、CodeCovにアップロードすることもできます。"

#: ../../tests/code-cov.md:47
msgid "Exporting Local Coverage Reports"
msgstr "ローカルカバレッジレポートのエクスポート"

#: ../../tests/code-cov.md:49
msgid ""
"In addition to using services like CodeCov or Coveralls, you can generate"
" local coverage reports directly using the **coverage.py** tool. This can"
" be especially useful if you want to create reports in Markdown or HTML "
"format for offline use or documentation."
msgstr ""
"CodeCovやCoverallsのようなサービスを利用するだけでなく、 **coverage.py** "
"ツールを使って直接ローカルカバレッジレポートを作成することもできます。 "
"これは、オフラインでの使用や文書化のためにMarkdownやHTML形式でレポートを作成したい場合に特に便利です。"

#: ../../tests/code-cov.md:51
msgid "To generate a coverage report in **Markdown** format, run:"
msgstr "カバレッジレポートを **Markdown** 形式で作成するには、以下を実行します:"

#: ../../tests/code-cov.md:56
msgid ""
"This command will produce a Markdown-formatted coverage summary that you "
"can easily include in project documentation or share with your team."
msgstr "このコマンドはMarkdown形式のカバレッジサマリーを作成し、プロジェクトのドキュメントに簡単に記載したり、チームと共有したりすることができます。"

#: ../../tests/code-cov.md:58
msgid ""
"To generate an HTML report that provides a detailed, interactive view of "
"which lines are covered, use:"
msgstr "どの行がカバーされているか、詳細でインタラクティブなビューを提供するHTMLレポートを生成するには、以下を使用します:"

#: ../../tests/code-cov.md:64
msgid ""
"The generated HTML report will be saved in a directory named htmlcov by "
"default. Open the index.html file in your browser to explore your "
"coverage results."
msgstr "生成されたHTMLレポートは、デフォルトでhtmlcovというディレクトリに保存されます。index.htmlファイルをブラウザで開き、カバレッジ結果をご覧ください。"

#: ../../tests/code-cov.md:66
msgid ""
"These local reports are an excellent way to quickly review coverage "
"without setting up an external service."
msgstr "このようなローカルレポートは、外部サービスを立ち上げることなくカバレッジを素早く確認する優れた方法です。"

#: ../../tests/index.md:73
msgid "Intro"
msgstr "イントロ"

#: ../../tests/index.md:73
msgid "Write tests"
msgstr "テストを書く"

#: ../../tests/index.md:73
msgid "Test types"
msgstr "テストの種類"

#: ../../tests/index.md:73
msgid "Run tests locally"
msgstr "ローカルでテストを実行する"

#: ../../tests/index.md:73
msgid "Run tests online (using CI)"
msgstr "オンラインでテストを実行する(CIを使用する)"

#: ../../tests/index.md:73
msgid "Code coverage"
msgstr "コードカバレッジ"

#: ../../tests/index.md:73
msgid "Create & Run Tests"
msgstr "テストの作成と実行"

#: ../../tests/index.md:2
msgid "Tests and data for your Python package"
msgstr "Pythonパッケージのテストとデータ"

#: ../../tests/index.md:4
msgid ""
"Tests are an important part of your Python package because they provide a"
" set of checks that ensure that your package is functioning how you "
"expect it to."
msgstr ""
"テストは Python "
"パッケージの重要な一部です。なぜなら、テストはパッケージが期待通りに動作しているかどうかを確認するための一連のチェック機能を提供するからです。"

#: ../../tests/index.md:8
msgid ""
"In this section, you will learn more about the importance of writing "
"tests for your Python package and how you can set up infrastructure to "
"run your tests both locally and on GitHub."
msgstr ""
"このセクションでは、Python パッケージのテストを書くことの重要性と、ローカルと GitHub "
"の両方でテストを実行するためのインフラストラクチャの設定方法について学びます。"

#: ../../tests/index.md:20
msgid "✨ Why write tests ✨"
msgstr "✨テストを書く理由✨"

#: ../../tests/index.md:25
msgid ""
"Learn more about the art of writing tests for your Python package. Learn "
"about why you should write tests and how they can help you and potential "
"contributors to your project."
msgstr ""
"Python パッケージのテストを書く技術についてもっと学びましょう。 "
"なぜテストを書く必要があるのか、そしてテストがどのようにあなたやあなたのプロジェクトへの将来の貢献者の助けになるのかを学びましょう。"

#: ../../tests/index.md:32
msgid "✨ Types of tests ✨"
msgstr "✨テストの種類✨"

#: ../../tests/index.md:37
msgid ""
"There are three general types of tests that you can write for your Python"
" package: unit tests, integration tests and end-to-end (or functional) "
"tests. Learn about all three."
msgstr ""
"Python パッケージで書くことのできるテストには、ユニットテスト、統合テスト、エンドツーエンドテスト (あるいは機能テスト) の 3 "
"種類があります。 この 3 つについて学びましょう。"

#: ../../tests/index.md:43
msgid "✨ Run tests locally ✨"
msgstr "✨ローカルでテストを実行する✨"

#: ../../tests/index.md:48
msgid ""
"If you expect your users to use your package across different versions of"
" Python, then using an automation tool such as nox to run your tests is "
"useful. Learn about the various tools that you can use to run your tests "
"across python versions here."
msgstr ""
"もしユーザがあなたのパッケージを異なるバージョンの Python で使うことを想定しているなら、テストを実行するために nox "
"のような自動化ツールを使うと便利です。 Python "
"のバージョンにまたがってテストを実行するために使える様々なツールについては、こちらを参照してください。"

#: ../../tests/index.md:54
msgid "✨ Run tests online (using CI) ✨"
msgstr "✨オンラインでテストを実行する(CIを使用する)✨"

#: ../../tests/index.md:59
msgid ""
"Continuous integration platforms such as GitHub Actions can be useful for"
" running your tests across both different Python versions and different "
"operating systems. Learn about setting up tests to run in Continuous "
"Integration here."
msgstr ""
"GitHub Actionsのような継続的インテグレーションプラットフォームは、Python "
"のバージョンやオペレーティングシステムの違いを問わずテストを実行するのに便利です。 "
"継続的インテグレーションで実行するテストの設定については、こちらを参照してください。"

#: ../../tests/index.md:70
msgid "Graphic showing the elements of the packaging process."
msgstr "パッケージング工程の要素を示すグラフィック。"

#: ../../tests/run-tests.md:6
msgid "Run Python package tests"
msgstr "Pythonパッケージテストの実行"

#: ../../tests/run-tests.md:8
msgid ""
"Running your tests is important to ensure that your package is working as"
" expected. It's good practice to consider that tests will run on your "
"computer and your users' computers that may be running a different Python"
" version and operating systems. Think about the following when running "
"your tests:"
msgstr ""
"テストを実行することは、パッケージが期待通りに動作していることを確認するために重要です。 テストは、あなたのコンピュータと、Python "
"のバージョンやオペレーティングシステムが異なるユーザのコンピュータで実行されることを考慮するのがよい習慣です。 "
"テストを実行する際には、以下のことを考慮してください:"

#: ../../tests/run-tests.md:11
msgid ""
"Run your test suite in a matrix of environments that represent the Python"
" versions and operating systems your users are likely to have."
msgstr "テストスイートは、Python のバージョンとユーザーが使用する可能性のあるオペレーティングシステムを表す環境のマトリックスで実行します。"

#: ../../tests/run-tests.md:12
msgid ""
"Running your tests in an isolated environment provides confidence in the "
"tests and their reproducibility. This ensures that tests do not pass "
"randomly due to your computer's specific setup. For instance, you might "
"have unexpectedly installed dependencies on your local system that are "
"not declared in your package's dependency list. This oversight could lead"
" to issues when others try to install or run your package on their "
"computers."
msgstr ""
"隔離された環境でテストを実行することで、テストとその再現性に自信を持つことができます。 "
"これにより、あなたのコンピュータの設定によってテストがランダムにパスすることがなくなります。 "
"たとえば、あなたのパッケージの依存関係リストで宣言されていない依存関係を、予期せずローカルシステムにインストールしてしまったかもしれません。 "
"このような見落としは、他の人があなたのパッケージを自分のコン ピュータにインストールしたり実行しようとしたときに、問題につながる可能性 "
"があります。"

#: ../../tests/run-tests.md:14
msgid ""
"On this page, you will learn about the tools that you can use to both run"
" tests in isolated environments and across Python versions."
msgstr "このページでは、隔離された環境でテストを実行したり、Python のバージョンを越えてテストを実行したりするために使えるツールについて学びます。"

#: ../../tests/run-tests.md:19
#, fuzzy
msgid "Tools to run your tests"
msgstr "テストを実行するためのツール"

#: ../../tests/run-tests.md:21
msgid ""
"There are three categories of tools that will make is easier to setup and"
" run your tests in various environments:"
msgstr "さまざまな環境でのテストのセットアップと実行を容易にするツールには、3つのカテゴリーがあります:"

#: ../../tests/run-tests.md:24
msgid ""
"A **test framework**, is a package that provides a particular syntax and "
"set of tools for _both writing and running your tests_. Some test "
"frameworks also have plugins that add additional features such as "
"evaluating how much of your code the tests cover. Below you will learn "
"about the **pytest** framework which is one of the most commonly used "
"Python testing frameworks in the scientific ecosystem. Testing frameworks"
" are essential but they only serve to run your tests. These frameworks "
"don't provide a way to easily run tests across Python versions without "
"the aid of additional automation tools."
msgstr ""
"**テストフレームワーク** とは、テストを書いたり実行したりするための特定の構文やツールのセットを提供するパッケージのことです。 "
"いくつかのテストフレームワークにはプラグインがあり、テストがカバーするコードの範囲を評価するなどの機能を追加することができます。 "
"以下では、科学的なエコシステムで最もよく使われている Python テストフレームワークの一つである **pytest** "
"フレームワークについて学びます。 テストフレームワークは必要不可欠ですが、テストを実行するためだけのものです。 "
"これらのフレームワークは、追加の自動化ツールの助けを借りずに Python のバージョンをまたいだテストを簡単に実行する方法は提供しません。"

#: ../../tests/run-tests.md:25
msgid ""
"**Automation tools** allow you to automate running workflows such as "
"tests in specific ways using user-defined commands. For instance it's "
"useful to be able to run tests across different Python versions with a "
"single command. Tools such as "
"[**nox**](https://nox.thea.codes/en/stable/index.html) and "
"[**tox**](https://tox.wiki/en/latest/index.html) also allow you to run "
"tests across Python versions. However, it will be difficult to test your "
"build on different operating systems using only nox and tox - this is "
"where continuous integration (CI) comes into play."
msgstr ""
"**自動化ツール** を使うと、ユーザー定義のコマンドを使って、テストのようなワークフローを特定の方法で実行することを自動化できます。 "
"例えば、1つのコマンドで異なるPythonのバージョンにまたがってテストを実行できると便利です。  "
"[**nox**](https://nox.thea.codes/en/stable/index.html) や "
"[**tox**](https://tox.wiki/en/latest/index.html) "
"のようなツールも、Pythonのバージョンをまたいでテストを実行できます。 "
"しかし、noxとtoxだけを使って異なるオペレーティングシステムでビルドをテストするのは難しいでしょう - "
"ここで継続的インテグレーション(CI)の出番です。"

#: ../../tests/run-tests.md:26
msgid ""
"**Continuous Integration (CI):** is the last tool that you'll need to run"
" your tests. CI will not only allow you to replicate any automated builds"
" you create using nox or tox to run your package in different Python "
"environments. It will also allow you to run your tests on different "
"operating systems (Windows, Mac and Linux). [We discuss using CI to run "
"tests here](tests-ci)."
msgstr ""
"**継続的インテグレーション (CI):** は、テストを実行するために必要な最後のツールです。 CI は、nox や tox "
"を使って作成した自動ビルドを複製して、異なる Python 環境でパッケージを実行できるようにするだけではありません。 "
"また、異なるオペレーティングシステム（Windows、Mac、Linux）でテストを実行することもできます。 "
"[テストを実行するためにCIを使うことについては、ここで説明します](tests-ci) 。"

#: ../../tests/run-tests.md:28
msgid "Table: Testing & Automation Tool"
msgstr "テーブル: テスト＆自動化ツール"

#: ../../tests/run-tests.md:35
msgid "Features"
msgstr "機能"

#: ../../tests/run-tests.md:36
msgid "Testing Framework (pytest)"
msgstr "テストフレームワーク (pytest)"

#: ../../tests/run-tests.md:37
msgid "Test Runner (Tox)"
msgstr "テストランナー (Tox)"

#: ../../tests/run-tests.md:38
msgid "Automation Tools (Nox)"
msgstr "自動化ツール（Nox）"

#: ../../tests/run-tests.md:39
msgid "Continuous Integration (GitHub Actions)"
msgstr "継続的インテグレーション（GitHub Actions）"

#: ../../tests/run-tests.md:40
msgid "Run Tests Locally"
msgstr "ローカルでテストを実行する"

#: ../../tests/run-tests.md:41 ../../tests/run-tests.md:42
#: ../../tests/run-tests.md:43 ../../tests/run-tests.md:49
#: ../../tests/run-tests.md:52 ../../tests/run-tests.md:53
#: ../../tests/run-tests.md:54 ../../tests/run-tests.md:57
#: ../../tests/run-tests.md:58 ../../tests/run-tests.md:59
#: ../../tests/run-tests.md:64 ../../tests/run-tests.md:68
#: ../../tests/run-tests.md:69
msgid "<i class=\"fa-solid fa-circle-check fa-xl\"></i>"
msgstr "<i class=\"fa-solid fa-circle-check fa-xl\"></i>"

#: ../../tests/run-tests.md:44 ../../tests/run-tests.md:46
#: ../../tests/run-tests.md:47 ../../tests/run-tests.md:48
#: ../../tests/run-tests.md:51 ../../tests/run-tests.md:56
#: ../../tests/run-tests.md:61 ../../tests/run-tests.md:62
#: ../../tests/run-tests.md:63 ../../tests/run-tests.md:66
#: ../../tests/run-tests.md:67
msgid "<i class=\"fa-solid fa-xmark fa-xl\" style=\"color: #afb3bb;\"></i>"
msgstr "<i class=\"fa-solid fa-xmark fa-xl\" style=\"color: #afb3bb;\"></i>"

#: ../../tests/run-tests.md:45
msgid "Run Tests Online"
msgstr "オンラインテストを実行する"

#: ../../tests/run-tests.md:50
msgid "Run Tests Across Python Versions"
msgstr "Pythonのバージョンにまたがってテストを実行する"

#: ../../tests/run-tests.md:55
msgid "Run Tests In Isolated Environments"
msgstr "隔離された環境でのテストの実行"

#: ../../tests/run-tests.md:60
msgid "Run Tests Across Operating Systems (Windows, MacOS, Linux)"
msgstr "オペレーティングシステム（Windows、MacOS、Linux）にまたがるテストの実行"

#: ../../tests/run-tests.md:65
msgid "Use for other automation tasks (e.g. building docs)"
msgstr "その他の自動化タスクに使用する（ドキュメントの作成など）"

#: ../../tests/run-tests.md:73
msgid "What testing framework / package should I use to run tests?"
msgstr "テストを実行するには、どのテストフレームワーク/パッケージを使用すればよいですか？"

#: ../../tests/run-tests.md:75
msgid ""
"We recommend using `Pytest` to build and run your package tests. Pytest "
"is the most common testing tool used in the Python ecosystem."
msgstr ""
"パッケージテストのビルドと実行には `Pytest` を使うことを推奨します。 Pytest は Python "
"のエコシステムで最もよく使われているテストツールです。"

#: ../../tests/run-tests.md:77
msgid ""
"[The Pytest package](https://docs.pytest.org/en/latest/) also has a "
"number of extensions that can be used to add functionality such as:"
msgstr ""
"[Pytestパッケージ](https://docs.pytest.org/en/latest/) "
"には、以下のような機能を追加するために使用できる多くの拡張機能もあります："

#: ../../tests/run-tests.md:80
msgid ""
"[pytest-cov](https://pytest-cov.readthedocs.io/en/latest/) allows you to "
"analyze the code coverage of your package during your tests, and "
"generates a report that you can [upload to codecov](https://codecov.io/)."
msgstr ""
"[pytest-cov](https://pytest-cov.readthedocs.io/en/latest/) "
"を使うと、テスト中にパッケージのコードカバレッジを分析し、 [codecov](https://codecov.io/) "
"にアップロードできるレポートを生成することができます。"

#: ../../tests/run-tests.md:82 ../../tests/run-tests.md:174
#: ../../tests/test-types.md:14 ../../tests/tests-ci.md:7
msgid "Todo"
msgstr "Todo"

#: ../../tests/run-tests.md:83
msgid "Learn more about code coverage here. (add link)"
msgstr "コードカバレッジについてはこちらをご覧ください。 (リンクを追加)"

#: ../../tests/run-tests.md:87
msgid ""
"Your editor or IDE may add additional convenience for running tests, "
"setting breakpoints, and toggling the `–no-cov` flag. Check your editor's"
" documentation for more information."
msgstr ""
"お使いのエディタや IDE には、テストを実行したり、ブレークポイントを設定したり、 `-no-cov` "
"フラグを切り替えたりするための便利な機能が追加されているかもしれません。 詳しくはエディタのドキュメントを参照してください。"

#: ../../tests/run-tests.md:90
msgid "Run tests using pytest"
msgstr "pytest を使ってテストを実行する"

#: ../../tests/run-tests.md:92
msgid "If you are using **pytest**, you can run your tests locally by calling:"
msgstr "**pytest** を使用している場合、テストをローカルで実行することができます:"

#: ../../tests/run-tests.md:95
msgid "`pytest`"
msgstr "`pytest`"

#: ../../tests/run-tests.md:97
msgid ""
"Or if you want to run a specific test file - let's call this file "
"\"`test_module.py`\" - you can run:"
msgstr ""
"また、特定のテストファイル - このファイルを \"`test_module.py`\" と呼ぶことにします - "
"を実行したい場合は、次のようにします:"

#: ../../tests/run-tests.md:99
msgid "`pytest test_module.py`"
msgstr "`pytest test_module.py`"

#: ../../tests/run-tests.md:101
msgid ""
"Learn more from the [get started docs](https://docs.pytest.org/en/7.1.x"
"/getting-started.html)."
msgstr ""
"詳しくは [ドキュメントスタートガイド](https://docs.pytest.org/en/7.1.x/getting-"
"started.html) をご覧ください。"

#: ../../tests/run-tests.md:103
msgid ""
"Running pytest on your computer is going to run your tests in whatever "
"Python environment you currently have activated. This means that tests "
"will be run on a single version of Python and only on the operating "
"system that you are running locally."
msgstr ""
"あなたのコンピュータで pytest を実行すると、現在有効になっている Python 環境でテストが実行されます。 "
"つまり、テストは単一のバージョンのPythonで、ローカルで実行しているオペレーティングシステム上でのみ実行されます。"

#: ../../tests/run-tests.md:108
msgid ""
"An automation tool can simplify the process of running tests in various "
"Python environments."
msgstr "自動化ツールは、様々な Python 環境でテストを実行するプロセスを単純化することができます。"

#: ../../tests/run-tests.md:111
msgid "Tests across operating systems"
msgstr "オペレーティングシステムをまたいだテスト"

#: ../../tests/run-tests.md:112
msgid ""
"If you want to run your tests across different operating systems you can "
"[continuous integration. Learn more here](tests-ci)."
msgstr ""
"異なるオペレーティングシステム間でテストを実行したい場合は、 [継続的インテグレーション。 詳細はこちら](tests-ci) "
"を使用することができます。"

#: ../../tests/run-tests.md:115
msgid "Tools to automate running your tests"
msgstr "テストの実行を自動化するツール"

#: ../../tests/run-tests.md:117
msgid ""
"To run tests on various Python versions or in various specific "
"environments with a single command, you can use an automation tool such "
"as `nox` or `tox`. Both `nox` and `tox` can create an isolated virtual "
"environments. This allows you to easily run your tests in multiple "
"environments and across Python versions."
msgstr ""
"一つのコマンドで様々な Python のバージョンや特定の環境でテストを実行するには、 `nox` や `tox` "
"のような自動化ツールを使うことができます。 `nox` も `tox` も、隔離された仮想環境を作成することができます。 これにより、複数の環境や"
" Python のバージョンをまたいだテストを簡単に実行することができます。"

#: ../../tests/run-tests.md:120
msgid ""
"We will focus on [Nox](https://nox.thea.codes/) in this guide. `nox` is a"
" Python-based automation tool that builds upon the features of both "
"`make` and `tox`. `nox` is designed to simplify and streamline testing "
"and development workflows. Everything that you do with `nox` can be "
"implemented using a Python-based interface."
msgstr ""
"このガイドでは、 [Nox](https://nox.thea.codes/) に焦点を当てます。 `nox` は Python "
"ベースの自動化ツールで、 `make` と `tox` の機能をベースにしています。 `nox` "
"はテストと開発のワークフローを簡素化し、効率化するように設計されています。 `nox` "
"で行うことはすべて、Pythonベースのインターフェースを使って実装することができます。"

#: ../../tests/run-tests.md:122
msgid "Other automation tools you'll see in the wild"
msgstr "その他の自動化ツール"

#: ../../tests/run-tests.md:125
msgid ""
"**[Tox](https://tox.wiki/en/latest/index.html#useful-links)** is an "
"automation tool that supports common steps such as building "
"documentation, running tests across various versions of Python, and more."
msgstr ""
"**[Tox](https://tox.wiki/en/latest/index.html#useful-links)** "
"は自動化ツールで、ドキュメントのビルドや、Pythonの様々なバージョン間でのテストの実行など、一般的なステップをサポートしています。"

#: ../../tests/run-tests.md:127
msgid ""
"**[Hatch](https://github.com/ofek/hatch)** is a modern end-to-end "
"packaging tool that works with the popular build backend called "
"hatchling. `hatch` offers a `tox`-like setup where you can run tests "
"locally using different Python versions. If you are using `hatch` to "
"support your packaging workflow, you may want to also use its testing "
"capabilities rather than using `nox`."
msgstr ""
"**[Hatch](https://github.com/ofek/hatch)** "
"は、hatchlingと呼ばれる人気のあるビルドバックエンドで動作する最新のエンドツーエンドパッケージングツールです。  `hatch` は "
"`tox` のようなセットアップを提供し、異なる Python バージョンを使ってローカルでテストを実行することができます。 "
"パッケージングのワークフローをサポートするために `hatch` を使っているのであれば、 `nox` を使うよりも `hatch` "
"のテスト機能を使った方が良いかもしれない。"

#: ../../tests/run-tests.md:129
msgid ""
"[**make:**](https://www.gnu.org/software/make/manual/make.html) Some "
"developers use Make, which is a build automation tool, for running tests "
"due to its versatility; it's not tied to a specific language and can be "
"used to run various build processes. However, Make's unique syntax and "
"approach can make it more challenging to learn, particularly if you're "
"not already familiar with it. Make also won't manage environments for you"
" like **nox** will do."
msgstr ""
"[**make:**](https://www.gnu.org/software/make/manual/make.html) "
"ビルド自動化ツールであるMakeは汎用性が高いため、テストの実行に使う開発者もいます; "
"特定の言語に縛られることなく、さまざまなビルドプロセスを実行するために使うことができます。しかし、Makeのユニークな構文とアプローチは、特にあなたがまだMakeに慣れていない場合、習得を難しくする可能性があります。Makeはまた、"
" **nox** がやってくれるような環境管理もしてくれません。"

#: ../../tests/run-tests.md:136
msgid "Run tests across Python versions with nox"
msgstr "noxでPythonのバージョンにまたがってテストを実行する"

#: ../../tests/run-tests.md:138
msgid "**Nox** is a great automation tool to learn because it:"
msgstr "**Nox** は素晴らしい自動化ツールです:"

#: ../../tests/run-tests.md:140
msgid "Is Python-based making it accessible if you already know Python and"
msgstr "Pythonベースですので、Pythonをすでに知っていれば利用しやすいです。"

#: ../../tests/run-tests.md:141
msgid "Will create isolated environments to run workflows."
msgstr "ワークフローを実行するための隔離された環境を構築します。"

#: ../../tests/run-tests.md:143
msgid ""
"`nox` simplifies creating and managing testing environments. With `nox`, "
"you can set up virtual environments, and run tests across Python versions"
" using the environment manager of your choice with a single command."
msgstr ""
"`nox` はテスト環境の作成と管理を簡単にします。 `nox` を使うと、仮想環境をセットアップし、好きな環境マネージャを使って Python "
"のバージョンをまたいだテストをコマンド一つで実行することができます。"

#: ../../tests/run-tests.md:148
msgid "Nox Installations"
msgstr "Noxのインストール"

#: ../../tests/run-tests.md:150
msgid ""
"When you install and use nox to run tests across different Python "
"versions, nox will create and manage individual `venv` environments for "
"each Python version that you specify in the nox function."
msgstr ""
"異なる Python バージョン間でテストを実行するために nox をインストールして使用する場合、nox は nox 関数で指定した "
"Python バージョンごとに個別の `venv` 環境を作成して管理します。"

#: ../../tests/run-tests.md:152
msgid "Nox will manage each environment on its own."
msgstr "Noxはそれぞれの環境を独自に管理します。"

#: ../../tests/run-tests.md:154
msgid ""
"Nox can also be used for other development tasks such as building "
"documentation, creating your package distribution, and testing "
"installations across both PyPI related environments (e.g. venv, "
"virtualenv) and `conda` (e.g. `conda-forge`)."
msgstr ""
"nox は、ドキュメントのビルド、パッケージ配布の作成、PyPI 関連の環境 (venv や virtualenv など) と `conda` "
"(conda-forge` など) の両方にわたるインストールのテストなど、その他の開発作業にも使用できます。"

#: ../../tests/run-tests.md:158
msgid ""
"To get started with nox, you create a `noxfile.py` file at the root of "
"your project directory. You then define commands using Python functions. "
"Some examples of that are below."
msgstr ""
"noxを使い始めるには、プロジェクトディレクトリのルートに `noxfile.py` ファイルを作成します。 "
"そして、Pythonの関数を使ってコマンドを定義します。 以下にその例をいくつか挙ます。"

#: ../../tests/run-tests.md:162
msgid "Test Environments"
msgstr "テスト環境"

#: ../../tests/run-tests.md:164
msgid ""
"By default, `nox` uses the Python built in `venv` environment manager. A "
"virtual environment (`venv`) is a self-contained Python environment that "
"allows you to isolate and manage dependencies for different Python "
"projects. It helps ensure that project-specific libraries and packages do"
" not interfere with each other, promoting a clean and organized "
"development environment."
msgstr ""
"デフォルトでは、 `nox` は Python 組み込みの `venv` 環境マネージャを使用します。 仮想環境 (`venv`) は自己完結型の"
" Python 環境で、異なる Python プロジェクトの依存関係を分離して管理することができます。 "
"プロジェクト固有のライブラリやパッケージが互いに干渉しないようにし、クリーンで整理された開発環境を促進します。"

#: ../../tests/run-tests.md:166
msgid ""
"An example of using nox to run tests in `venv` environments for Python "
"versions 3.9, 3.10, 3.11 and 3.12 is below."
msgstr "noxを使ってPythonバージョン3.9、3.10、3.11、3.12の `venv` 環境でテストを実行する例を以下に示します。"

#: ../../tests/run-tests.md:169
msgid ""
"Note that for the code below to work, you need to have all 4 versions of "
"Python installed on your computer for `nox` to find."
msgstr ""
"以下のコードが動作するためには、 `nox` "
"が見つけることができる4つのバージョンのPythonがコンピュータにインストールされている必要があることに注意してください。"

#: ../../tests/run-tests.md:172
msgid "Nox with venv environments"
msgstr "venv環境のnox"

#: ../../tests/run-tests.md:175
msgid ""
"TODO: add some tests above and show what the output would look like in "
"the examples below..."
msgstr "TODO: 上記のテストをいくつか追加し、以下の例で出力がどのようになるかを示す..."

#: ../../tests/run-tests.md:178
msgid ""
"Below is an example of setting up nox to run tests using `venv` which is "
"the built in environment manager that comes with base Python."
msgstr "以下は、Pythonに組み込まれている環境マネージャーである `venv` を使ってテストを実行するようにnoxをセットアップする例です。"

#: ../../tests/run-tests.md:180
msgid ""
"Note that the example below assumes that you have [setup your "
"`pyproject.toml` to declare test dependencies in a way that pip can "
"understand](../package-structure-code/declare-dependencies.md). An "
"example of that setup is below."
msgstr ""
"以下の例では、 [pipが理解できる方法でテストの依存関係を宣言するように`pyproject.toml`をセットアップする"
"](../package-structure-code/declare-dependencies.md) "
"ことを前提としていることに注意してください。 そのセットアップの例を以下に示します。"

#: ../../tests/run-tests.md:201
msgid ""
"If you have the above setup, then you can use "
"`session.install(\".[tests]\")` to install your test dependencies. Notice"
" that below one single nox session allows you to run your tests on 4 "
"different Python environments (Python 3.9, 3.10, 3.11, and 3.12)."
msgstr ""
"上記の設定ができていれば、 `session.install(\".[tests]\")` "
"を使ってテストの依存関係をインストールすることができます。 以下のように、1つのnoxセッションで4つの異なるPython環境（Python "
"3.9、3.10、3.11、3.12）でテストを実行できることに注意してください。"

#: ../../tests/run-tests.md:222
msgid ""
"Above you create a nox session in the form of a function with a "
"`@nox.session` decorator. Notice that within the decorator you declare "
"the versions of python that you wish to run."
msgstr ""
"上の例では、 `@nox.session` デコレーターを使って関数の形で nox セッションを作成しています。 デコレータの中で、実行したい "
"python のバージョンを宣言していることに注意してください。"

#: ../../tests/run-tests.md:226
msgid ""
"To run the above you'd execute the following command, specifying which "
"session with `--session` (sometimes shortened to `-s`). Your function "
"above is called test, therefore the session name is test."
msgstr ""
"上記を実行するには、 `--session` （ `-s` "
"と短縮されることもある）でセッションを指定し、以下のコマンドを実行します。上記の関数はtestという名前なので、セッション名はtestです。"

#: ../../tests/run-tests.md:234
msgid "Nox with conda / mamba"
msgstr "conda / mamba による nox"

#: ../../tests/run-tests.md:236
msgid ""
"Below is an example for setting up nox to use mamba (or conda) for your "
"environment manager. Note that unlike venv, conda can automatically "
"install the various versions of Python that you need. You won't need to "
"install all four Python versions if you use conda/mamba, like you do with"
" `venv`."
msgstr ""
"以下は、noxが環境マネージャーにmamba（またはconda）を使うように設定する例です。venvと違って、condaは必要なPythonの様々なバージョンを自動的にインストールできることに注意してください。conda/mambaを使う場合は、"
" `venv` のように4つのPythonバージョンをインストールする必要はありません。"

#: ../../tests/run-tests.md:242
msgid ""
"For `conda` to work with `nox`, you will need to ensure that either "
"`conda` or `mamba` is installed on your computer."
msgstr ""
"`nox` で `conda` を動作させるには、コンピュータに `conda` か `mamba` "
"のどちらかがインストールされていることを確認する必要があります。"

#: ../../tests/run-tests.md:264
msgid "To run the above session you'd use:"
msgstr "上記のセッションを実行するには、次のようにします:"

#: ../../tests/test-types.md:1
msgid "Test Types for Python packages"
msgstr "Pythonパッケージのテストタイプ"

#: ../../tests/test-types.md:3
msgid "Three types of tests: Unit, Integration & Functional Tests"
msgstr "3種類のテスト: 単体テスト、統合テスト、機能テスト"

#: ../../tests/test-types.md:5
msgid ""
"There are different types of tests that you want to consider when "
"creating your test suite:"
msgstr "テストスイートを作成する際に考慮したいテストには、さまざまなタイプがあります:"

#: ../../tests/test-types.md:8
msgid "Unit tests"
msgstr "単体テスト"

#: ../../tests/test-types.md:9
msgid "Integration"
msgstr "統合"

#: ../../tests/test-types.md:10
msgid "End-to-end (also known as Functional) tests"
msgstr "エンドツーエンド(機能テストとも呼ばれる)テスト"

#: ../../tests/test-types.md:12
msgid ""
"Each type of test has a different purpose. Here, you will learn about all"
" three types of tests."
msgstr "それぞれのテストには異なる目的があります。 ここでは、3種類のテストすべてについて学びます。"

#: ../../tests/test-types.md:15
msgid ""
"I think this page would be stronger if we did have some examples from our"
" package here: https://github.com/pyOpenSci/pyosPackage"
msgstr ""
"私たちのパッケージからの例があれば、このページはもっと強くなると思います: "
"https://github.com/pyOpenSci/pyosPackage "

#: ../../tests/test-types.md:20
msgid "Unit Tests"
msgstr "単体テスト"

#: ../../tests/test-types.md:22
msgid ""
"A unit test involves testing individual components or units of code in "
"isolation to ensure that they work correctly. The goal of unit testing is"
" to verify that each part of the software, typically at the function or "
"method level, performs its intended task correctly."
msgstr "単体テストは、個々のコンポーネントやコードの単位を分離してテストし、それらが正しく動作することを確認するものです。単体テストの目的は、ソフトウェアの各部分、通常は関数やメソッドのレベルが、意図したタスクを正しく実行することを検証することです。"

#: ../../tests/test-types.md:24
msgid ""
"Unit tests can be compared to examining each piece of your puzzle to "
"ensure parts of it are not broken. If all of the pieces of your puzzle "
"don’t fit together, you will never complete it. Similarly, when working "
"with code, tests ensure that each function, attribute, class, method "
"works properly when isolated."
msgstr "単体テストは、パズルの各パーツが壊れていないかどうかを調べることに例えることができます。パズルのピースがすべて合わなければ、完成することはありません。同様に、コードを扱う場合、テストは各関数、プロパティ、クラス、メソッドが分離されたときに正しく機能することを保証します。"

#: ../../tests/test-types.md:26
msgid ""
"**Unit test example:** Pretend that you have a function that converts a "
"temperature value from Celsius to Fahrenheit. A test for that function "
"might ensure that when provided with a value in Celsius, the function "
"returns the correct value in degrees Fahrenheit. That function is a unit "
"test. It checks a single unit (function) in your code."
msgstr ""
"**ユニットテスト例:** "
"温度値を摂氏から華氏に変換する関数があるとします。その関数のテストは、摂氏の値が提供されたとき、その関数が正しい華氏の値を返すことを保証するかもしれません。この関数はユニットテストです。これは、コード内の1つのユニット(関数)をチェックします。"

#: ../../tests/test-types.md:44
msgid ""
"Example unit test for the above function. You'd run this test using the "
"`pytest` command in your **tests/** directory."
msgstr "上記の関数のユニットテスト例。このテストは、 **tests/** ディレクトリの `pytest` コマンドを使って実行します。"

#: ../../tests/test-types.md:65 ../../tests/test-types.md:115
msgid ""
"image of puzzle pieces that all fit together nicely. The puzzle pieces "
"are colorful - purple, green and teal."
msgstr "パズルのピースがうまく組み合わさったような画像です。パズルのピースは紫色、緑色、鴨の羽色とカラフルです。"

#: ../../tests/test-types.md:69
msgid ""
"Your unit tests should ensure each part of your code works as expected on"
" its own."
msgstr "ユニットテストでは、コードの各部分がそれ自体で期待通りに動作することを確認する必要があります。"

#: ../../tests/test-types.md:72
msgid "Integration tests"
msgstr "統合テスト"

#: ../../tests/test-types.md:74
msgid ""
"Integration tests involve testing how parts of your package work together"
" or integrate. Integration tests can be compared to connecting a bunch of"
" puzzle pieces together to form a whole picture. Integration tests focus "
"on how different pieces of your code fit and work together."
msgstr "統合テストでは、パッケージの各パーツがどのように連動するか、あるいは統合されるかをテストします。統合テストは、パズルのピースをつなげて全体像を作るようなものです。統合テストは、コードのさまざまな部分がどのように適合し、連携して動作するかに焦点を当てます。"

#: ../../tests/test-types.md:76
msgid ""
"For example, if you had a series of steps that collected temperature data"
" in a spreadsheet, converted it from degrees celsius to Fahrenheit and "
"then provided an average temperature for a particular time period. An "
"integration test would ensure that all parts of that workflow behaved as "
"expected."
msgstr "例えば、スプレッドシートに温度データを収集し、摂氏から華氏に変換し、特定の期間の平均温度を提供する一連のステップがあったとします。統合テストは、そのワークフローのすべての部分が期待通りに動作することを保証します。"

#: ../../tests/test-types.md:107
msgid ""
"image of two puzzle pieces with some missing parts. The puzzle pieces are"
" purple teal yellow and blue. The shapes of each piece don’t fit "
"together."
msgstr "パズルのピースが2つあり、一部欠けている画像です。パズルのピースは紫・鴨の羽色・黄色・青色。 それぞれのピースの形が合いません。"

#: ../../tests/test-types.md:112
msgid ""
"If puzzle pieces have missing ends, they can’t work together with other "
"elements in the puzzle. The same is true with individual functions, "
"methods and classes in your software. The code needs to work both "
"individually and together to perform certain sets of tasks."
msgstr "パズルのピースの両端が欠けていると、パズルの他の要素と連動することができません。ソフトウェアの個々の関数、メソッド、クラスについても同様です。コードは、ある一連のタスクを実行するために、個々に、そして一緒に働く必要があります。"

#: ../../tests/test-types.md:120
msgid ""
"Your integration tests should ensure that parts of your code that are "
"expected to work together, do so as expected."
msgstr "統合テストは、コードの一部が連携して動作することが期待されており、期待通りに動作することを保証するものでなければなりません。"

#: ../../tests/test-types.md:124
msgid "End-to-end (functional) tests"
msgstr "エンドツーエンド(機能)テスト"

#: ../../tests/test-types.md:126
msgid ""
"End-to-end tests (also referred to as functional tests) in Python are "
"like comprehensive checklists for your software. They simulate real user "
"end-to-end workflows to make sure the code base supports real life "
"applications and use-cases from start to finish. These tests help catch "
"issues that might not show up in smaller tests and ensure your entire "
"application or program behaves correctly. Think of them as a way to give "
"your software a final check before it's put into action, making sure it's"
" ready to deliver a smooth experience to its users."
msgstr ""
"Python "
"におけるエンドツーエンドのテスト（機能テストとも呼ばれる）は、ソフトウェアの包括的なチェックリストのようなものです。実際のユーザーのエンドツーエンドのワークフローをシミュレートし、コードベースが実際のアプリケーションやユースケースを最初から最後までサポートすることを確認します。これらのテストは、小規模なテストでは表示されないかもしれない問題をキャッチし、アプリケーションやプログラム全体が正しく動作することを確認するのに役立ちます。ソフトウェアを実用化する前に最終チェックを行い、ユーザーにスムーズなエクスペリエンスを提供する準備ができていることを確認する方法だと考えてください。"

#: ../../tests/test-types.md:128
msgid "Image of a completed puzzle showing a daisy"
msgstr "デイジーを描いたパズルの完成イメージ"

#: ../../tests/test-types.md:133
msgid ""
"End-to-end or functional tests represent an entire workflow that you "
"expect your package to support."
msgstr "エンドツーエンドテストまたは機能テストは、パッケージがサポートすることを期待するワークフロー全体を表します。"

#: ../../tests/test-types.md:137
msgid ""
"End-to-end test also test how a program runs from start to finish. A "
"tutorial that you add to your documentation that runs in CI in an "
"isolated environment is another example of an end-to-end test."
msgstr "エンドツーエンドのテストも、プログラムが最初から最後までどのように実行されるかをテストします。ドキュメントに追加するチュートリアルは、分離された環境のCIで実行され、エンドツーエンドのテストのもう一つの例です。"

#: ../../tests/test-types.md:140
msgid ""
"For scientific packages, creating short tutorials that highlight core "
"workflows that your package supports, that are run when your "
"documentation is built could also serve as end-to-end tests."
msgstr "科学的なパッケージの場合、パッケージがサポートする中核的なワークフローを強調する短いチュートリアルを作成し、ドキュメントのビルド時に実行することで、エンドツーエンドのテストを兼ねることができます。"

#: ../../tests/test-types.md:143
msgid "Comparing unit, integration and end-to-end tests"
msgstr "ユニットテスト、統合テスト、エンドツーエンドテストの比較"

#: ../../tests/test-types.md:145
msgid ""
"Unit tests, integration tests, and end-to-end tests have complementary "
"advantages and disadvantages. The fine-grained nature of unit tests make "
"them well-suited for isolating where errors are occurring. However, unit "
"tests are not useful for verifying that different sections of code work "
"together."
msgstr ""
"単体テスト、統合テスト、エンドツーエンドテストには、それぞれ相補的な長所と短所があります。 "
"単体テストは、そのきめ細かな性質から、どこでエラーが発生しているかを切り分けるのに適しています。 "
"しかし、ユニットテストは、コードの異なるセクションが連携して動作することを検証するのには役に立ちません。"

#: ../../tests/test-types.md:147
msgid ""
"Integration and end-to-end tests verify that the different portions of "
"the program work together, but are less well-suited for isolating where "
"errors are occurring. For example, when you refactor your code, it is "
"possible that that your end-to-end tests will break. But if the refactor "
"didn't introduce new behavior to your existing code, then you can rely on"
" your unit tests to continue to pass, testing the original functionality "
"of your code."
msgstr "統合テストとエンドツーエンドテストは、プログラムのさまざまな部分が連携して動作することを検証しますが、どこでエラーが発生しているかを切り分けるにはあまり適していません。例えば、コードをリファクタリングすると、エンドツーエンドのテストが壊れる可能性があります。しかし、リファクタリングによって既存のコードに新しい動作が導入されなかったのであれば、コードの元の機能をテストするユニットテストがパスし続けることに頼ることができます。"

#: ../../tests/test-types.md:152
msgid ""
"It is important to note that you don't need to spend energy worrying "
"about the specifics surrounding the different types of tests. When you "
"begin to work on your test suite, consider what your package does and how"
" you may need to test parts of your package. Bring familiar with the "
"different types of tests can provides a framework to help you think about"
" writing tests and how different types of tests can complement each "
"other."
msgstr "重要なのは、さまざまな種類のテストにまつわる詳細について心配することにエネルギーを費やす必要はないということです。テストスイートの作成に取りかかるときには、パッケージが何をするのか、そしてパッケージの一部をどのようにテストする必要があるのかを考えてください。さまざまな種類のテストに慣れ親しむことは、テストの書き方や、さまざまな種類のテストが互いにどのように補完し合えるかを考える際のフレームワークとなります。"

#: ../../tests/tests-ci.md:1
msgid "Run tests with Continuous Integration"
msgstr "継続的インテグレーションによるテストの実行"

#: ../../tests/tests-ci.md:3
msgid ""
"Running your [test suite locally](run-tests) is useful as you develop "
"code and also test new features or changes to the code base. However, you"
" also will want to setup Continuous Integration (CI) to run your tests "
"online. CI allows you to run all of your tests in the cloud. While you "
"may only be able to run tests locally on a specific operating system, "
"using CI you can specify tests to run both on various versions of Python "
"and across different operating systems."
msgstr ""
"[テストスイートをローカルで実行する](run-tests) "
"ことは、コードを開発したり、新しい機能やコード・ベースの変更をテストしたりするときに便利です。しかし、テストをオンラインで実行するために、継続的インテグレーション（CI）もセットアップしたいです。CIを使えば、すべてのテストをクラウド上で実行できます。特定のオペレーティングシステム上でしかローカルにテストを実行できないかもしれませんが、CIを使用すると、Pythonのさまざまなバージョンや異なるオペレーティングシステム間で実行するテストを指定できます。"

#: ../../tests/tests-ci.md:5
msgid ""
"CI can also be triggered for pull requests and pushes to your repository."
" This means that every pull request that you, your maintainer team or a "
"contributor submit, can be tested. In the end CI testing ensures your "
"code continues to run as expected even as changes are made to the code "
"base."
msgstr ""
"CIは、プルリクエストやリポジトリへのプッシュをトリガーすることもできます。 "
"これは、あなた、あなたのメンテナチーム、またはコントリビューターが提出するすべてのプルリクエストをテストできることを意味します。 "
"最終的にCIテストは、コードベースに変更が加えられても、あなたのコードが期待通りに実行され続けることを保証します。"

#: ../../tests/tests-ci.md:9
msgid ""
"Learn more about Continuous Integration and how it can be used, here. "
"(add link)"
msgstr "継続的インテグレーションとその使用方法については、こちらをご覧ください。 (リンクを追加)"

#: ../../tests/tests-ci.md:13
msgid "CI & pull requests"
msgstr "CIとプルリクエスト"

#: ../../tests/tests-ci.md:15
msgid ""
"CI is invaluable if you have outside people contributing to your "
"software. You can setup CI to run on all pull requests submitted to your "
"repository. CI can make your repository more friendly to new potential "
"contributors. It allows users to contribute code, documentation fixes and"
" more without having to create development environments, run tests and "
"build documentation locally."
msgstr ""
"CIは、外部の人があなたのソフトウェアに貢献している場合、非常に貴重です。 "
"リポジトリに投稿されたすべてのプルリクエストに対してCIを実行するように設定できます。 "
"CIは、あなたのリポジトリを新しい将来の貢献者によりフレンドリーなものにします。 "
"開発環境の構築、テストの実行、ドキュメントのビルドをローカルで行うことなく、コードやドキュメントの修正などに貢献することができます。"

#: ../../tests/tests-ci.md:22
msgid "Example GitHub Actions that runs tests"
msgstr "テストを実行する GitHub Actionsの例"

#: ../../tests/tests-ci.md:24
msgid ""
"Below is an example GitHub Actions that runs tests using nox across both "
"Windows, Mac and Linux and on Python versions 3.9-3.11."
msgstr ""
"以下は、Windows、Mac、Linuxの両方で、Pythonのバージョン3.9-3.11でnoxを使ってテストを実行するGitHub "
"Actionsの例です。"

#: ../../tests/tests-ci.md:28
msgid ""
"To work properly, this file should be located in a root directory of your"
" GitHub repository:"
msgstr "正しく動作させるには、このファイルをGitHubリポジトリのルートディレクトリに置く必要があります:"

#: ../../tests/write-tests.md:1
msgid "Write tests for your Python package"
msgstr "Pythonパッケージのテストを書く"

#: ../../tests/write-tests.md:3
msgid ""
"Writing code that tests your package code, also known as test suites, is "
"important for you as a maintainer, your users, and package contributors. "
"Test suites consist of sets of functions, methods, and classes that are "
"written with the intention of making sure a specific part of your code "
"works as you expected it to."
msgstr ""
"パッケージのコードをテストするコードを書くことは、テスト・スイートとしても知られています。 "
"テスト・スイートは、関数、メソッド、クラスのセットで構成され、コードの特定の部分が期待通りに動作することを確認することを意図して書かれます。"

#: ../../tests/write-tests.md:7
msgid "Why write tests for your package?"
msgstr "なぜパッケージのテストを書くのか？"

#: ../../tests/write-tests.md:9
msgid ""
"Tests act as a safety net for code changes. They help you spot and "
"rectify bugs before they affect users. Tests also instill confidence that"
" code alterations from contributors won't breaking existing "
"functionality."
msgstr ""
"テストはコード変更のセーフティネットとして機能します。 バグがユーザーに影響を与える前に発見し、修正するのに役立ちます。 "
"テストはまた、貢献者によるコード改変が既存の機能を壊さないという確信を与えます。"

#: ../../tests/write-tests.md:13
msgid "Writing tests for your Python package is important because:"
msgstr "Pythonパッケージのテストを書くことは重要です:"

#: ../../tests/write-tests.md:15
msgid ""
"**Catch Mistakes:** Tests are a safety net. When you make changes or add "
"new features to your package, tests can quickly tell you if you "
"accidentally broke something that was working fine before."
msgstr ""
"**キャッチミス:** "
"テストはセーフティネットです。パッケージに変更を加えたり、新機能を追加したりした場合、テストによって、以前は問題なく動作していたものを誤って壊してしまったかどうかをすぐに知ることができます。"

#: ../../tests/write-tests.md:16
msgid ""
"**Save Time:** Imagine you have a magic button that can automatically "
"check if your package is still working properly. Tests are like that "
"magic button! They can run all those checks for you saving you time."
msgstr ""
"**時間を節約する:** "
"あなたのパッケージがまだ正常に動作しているかどうかを自動的にチェックできる魔法のボタンがあるとしましょう。テストは魔法のボタンのようなものです！ "
"あなたの時間を節約するために、すべてのチェックを実行してくれます。"

#: ../../tests/write-tests.md:17
msgid ""
"**Easier Collaboration:** If you're working with others, or have outside "
"contributors, tests help everyone stay on the same page. Your tests "
"explain how your package is supposed to work, making it easier for others"
" to understand and contribute to your project."
msgstr ""
"**より容易なコラボレーション:** "
"他の人と一緒に仕事をしていたり、外部の協力者がいる場合、テストは全員が同じページにとどまるのに役立ちます。テストは、パッケージがどのように動作するかを説明し、他の人が理解しやすくし、プロジェクトに貢献しやすくします。"

#: ../../tests/write-tests.md:18
msgid ""
"**Fearless Refactoring:** Refactoring means making improvements to your "
"code structure without changing its behavior. Tests empower you to make "
"these changes as if you break something, test failures will let you know."
msgstr ""
"**大胆不敵なリファクタリング:** リファクタリングとは、コードの振る舞いを変えることなく、コード構造を改善することです。 "
"テストは、あなたが何かを壊した場合、テストの失敗があなたに知らせてくれるので、このような変更を行う力を与えてくれます。"

#: ../../tests/write-tests.md:19
msgid ""
"**Documentation:** Tests serve as technical examples of how to use your "
"package. This can be helpful for a new technical contributor that wants "
"to contribute code to your package. They can look at your tests to "
"understand how parts of your code functionality fits together."
msgstr ""
"**文書化:** テストは、あなたのパッケージの使い方の技術的な例となります。 "
"これは、あなたのパッケージにコードを提供しようとする新しい技術的貢献者にとって役に立ちます。 "
"彼らはあなたのテストを見て、コードの機能の一部がどのように組み合わされているかを理解することができます。"

#: ../../tests/write-tests.md:20
msgid ""
"**Long-Term ease of maintenance:** As your package evolves, tests ensure "
"that your code continues to behave as expected, even as you make changes "
"over time. Thus you are helping your future self when writing tests."
msgstr ""
"**長期的なメンテナンスの容易さ:** "
"パッケージが進化するにつれて、テストは、時間の経過とともに変更を加えても、コードが期待通りに動作し続けることを保証します。こうして、テストを書くときに将来の自分を助けることになります。"

#: ../../tests/write-tests.md:21
msgid ""
"**Easier pull request reviews:** By running your tests in a CI framework "
"such as GitHub Actions, each time you or a contributor makes a change to "
"your code-base, you can catch issues and things that may have changed in "
"your code base. This ensures that your software behaves the way you "
"expect it to."
msgstr ""
"**より簡単なプルリクエストのレビュー:** GitHub Actionsのような CI "
"フレームワークでテストを実行することで、あなたや貢献者がコードベースに変更を加えるたびに、コードベースの問題や変更点をキャッチすることができます。"
" これにより、あなたのソフトウェアが期待通りに動作することが保証されます。"

#: ../../tests/write-tests.md:23
msgid "Tests for user edge cases"
msgstr "ユーザーエッジケースのテスト"

#: ../../tests/write-tests.md:25
msgid ""
"Edge cases refer to unexpected or \"outlier\" ways that some users may "
"use your package. Tests enable you to address various edge cases that "
"could impair your package's functionality. For example, what occurs if a "
"function expects a pandas `dataframe` but a user supplies a numpy "
"`array`? Does your code gracefully handle this situation, providing clear"
" feedback, or does it leave users frustrated by an unexplained failure?"
msgstr ""
"エッジケースとは、あるユーザがあなたのパッケージを使用する際の、予期せぬ、あるいは \"外れ値\"  の使い方を指します。 "
"テストによって、パッケージの機能を損なう可能性のある様々なエッジケースに対処することができます。 例えば、ある関数がpandasの "
"`dataframe` を期待したのに、ユーザがnumpyの `array` を提供した場合、何が起こるでしょうか？ "
"あなたのコードは、このような状況を丁寧に処理し、明確なフィードバックを提供していますか？それとも、原因不明の失敗でユーザーをイライラさせたままにしていますか？"

#: ../../tests/write-tests.md:33
msgid ""
"For a good introduction to testing, see [this Software Carpentry "
"lesson](https://swcarpentry.github.io/python-novice-"
"inflammation/10-defensive.html)"
msgstr ""
"テストの入門書としては、 [このSoftware Carpentryのレッスン](https://swcarpentry.github.io"
"/python-novice-inflammation/10-defensive.html) を参照してください。"

#: ../../tests/write-tests.md:41
msgid ""
"Imagine you're working on a puzzle where each puzzle piece represents a "
"function, method, class or attribute in your Python package that you want"
" other people to be able to use. Would you want to give someone a puzzle "
"that has missing pieces or pieces that don't fit together? Providing "
"people with the right puzzle pieces that work together can be compared to"
" writing tests for your Python package."
msgstr ""
"パズルのピースが、あなたのPythonパッケージの関数、メソッド、クラス、属性を表しているとしましょう。 "
"そしてあなたは他の人に使ってもらいたいと思っています。 ピースが欠けていたり、ピースが合わなかったりするパズルを誰かに渡したいと思いますか？ "
"パズルのピースを正しく組み合わせて提供することは、Python パッケージのテストを書くことに例えることができます。"

#: ../../tests/write-tests.md:44
msgid "Test examples"
msgstr "テスト例"

#: ../../tests/write-tests.md:47
msgid ""
"Let’s say you have a Python function that adds two numbers a and b "
"together."
msgstr "例えば、2つの数値aとbを足し合わせるPython関数があるとしましょう。"

#: ../../tests/write-tests.md:54
msgid ""
"A test to ensure that function runs as you might expect when provided "
"with different numbers might look like this:"
msgstr "異なる数値が与えられたときに、その関数が期待通りに実行されることを確認するテストは次のようになります:"

#: ../../tests/write-tests.md:72
msgid "🧩🐍"
msgstr "🧩🐍"

#: ../../tests/write-tests.md:74
msgid "How do I know what type of tests to write?"
msgstr "どのような種類のテストを書けばいいのか、どうすればわかりますか？"

#: ../../tests/write-tests.md:77
msgid ""
"This section has been adapted from [a presentation by Nick "
"Murphy](https://zenodo.org/record/8185113)."
msgstr ""
"このセクションは、 [Nick Murphyのプレゼンテーション](https://zenodo.org/record/8185113) "
"から引用しました。"

#: ../../tests/write-tests.md:80
msgid ""
"At this point, you may be wondering - what should you be testing in your "
"package? Below are a few examples:"
msgstr "この時点で、あなたは疑問に思うかもしれません-あなたのパッケージで何をテストすべきか？ 以下にいくつか例を挙げます:"

#: ../../tests/write-tests.md:82
msgid ""
"**Test some typical cases:** Test that the package functions as you "
"expect it to when users use it. For instance, if your package is supposed"
" to add two numbers, test that the outcome value of adding those two "
"numbers is correct."
msgstr ""
"**いくつかの典型的なケースをテスト:** "
"パッケージが、ユーザーが使用したときに期待通りに機能することをテストします。例えば、パッケージが2つの数値を足すことになっている場合、その2つの数値を足した結果が正しいかどうかをテストします。"

#: ../../tests/write-tests.md:84
msgid ""
"**Test special cases:** Sometimes there are special or outlier cases. For"
" instance, if a function performs a specific calculation that may become "
"problematic closer to the value = 0, test it with the input of both 0 and"
msgstr ""
"**特別なケースをテストする:** "
"時には特殊なケースや異常なケースもあります。例えば、ある関数が特定の計算を実行し、その計算が値=0に近いほど問題になる可能性がある場合、その関数の入力を0と"

#: ../../tests/write-tests.md:86
msgid ""
"**Test at and near the expected boundaries:** If a function requires a "
"value that is greater than or equal to 1, make sure that the function "
"still works with both the values 1 and less than one and 1.001 as well "
"(something close to the constraint value).."
msgstr ""
"**予想される境界線とその付近でテストする:** 関数が1以上の値を必要とする場合、この関数が、1と1未満と1.001の両方の値 "
"(制約値に近い値) でも動作することを確認してください。"

#: ../../tests/write-tests.md:88
msgid ""
"**Test that code fails correctly:** If a function requires a value "
"greater than or equal to 1, then test at 0.999. Make sure that the "
"function fails gracefully when given unexpected values and help and that "
"the user can easily understand why if failed (provides a useful error "
"message)."
msgstr ""
"**コードが正しく失敗するかテストする** 関数が1以上の値を必要とする場合は、0.999でテストします。 "
"予期しない値やヘルプが与えられたときに、関数が差し障り無く失敗し、ユーザが失敗した理由を簡単に理解できるようにします(有用なエラーメッセージを提供します)。"
